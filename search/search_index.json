{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GooeyAI Python SDK","text":""},{"location":"#usage","title":"Usage","text":"<p>Lipsync+TTS with a local image.</p> API Key <p>You need a Gooey API key to use this SDK. You can obtain it from your Gooey.AI account page and set it to the environment variable <code>GOOEY_API_KEY</code>.</p> <pre><code>export GOOEY_API_KEY=sk-...\n</code></pre> <pre><code>from gooey import Gooey\n\nclient = Gooey()\nresult = client.lipsync_tts(\n    input_face=\"./image.jpg\",\n    text_prompt=\"Gooey.AI is awesome!\",\n)\nprint(result.output_video)\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> gooey<ul> <li> client</li> <li> copilot<ul> <li> client</li> <li> types<ul> <li> copilot_completion_request_functions_item</li> <li> copilot_completion_request_sadtalker_settings</li> <li> copilot_completion_request_sadtalker_settings_preprocess</li> </ul> </li> </ul> </li> <li> core<ul> <li> api_error</li> <li> client_wrapper</li> <li> datetime_utils</li> <li> file</li> <li> http_client</li> <li> jsonable_encoder</li> <li> pydantic_utilities</li> <li> query_encoder</li> <li> remove_none_from_dict</li> <li> request_options</li> <li> serialization</li> </ul> </li> <li> environment</li> <li> errors<ul> <li> payment_required_error</li> <li> too_many_requests_error</li> <li> unprocessable_entity_error</li> </ul> </li> <li> types<ul> <li> agg_function</li> <li> agg_function_function</li> <li> agg_function_result</li> <li> agg_function_result_function</li> <li> animation_models</li> <li> animation_prompt</li> <li> asr_chunk</li> <li> asr_models</li> <li> asr_output_format</li> <li> asr_output_json</li> <li> asr_page_output</li> <li> asr_page_output_output_text_item</li> <li> asr_page_request</li> <li> asr_page_status_response</li> <li> async_api_response_model_v3</li> <li> balance_response</li> <li> bot_broadcast_filters</li> <li> bot_broadcast_request_model</li> <li> bulk_eval_page_output</li> <li> bulk_eval_page_status_response</li> <li> bulk_runner_page_output</li> <li> bulk_runner_page_request</li> <li> bulk_runner_page_status_response</li> <li> button_pressed</li> <li> called_function_response</li> <li> chat_completion_content_part_image_param</li> <li> chat_completion_content_part_text_param</li> <li> chyron_plant_page_output</li> <li> chyron_plant_page_request</li> <li> chyron_plant_page_status_response</li> <li> citation_styles</li> <li> combine_documents_chains</li> <li> compare_llm_page_output</li> <li> compare_llm_page_status_response</li> <li> compare_text2img_page_output</li> <li> compare_text2img_page_status_response</li> <li> compare_upscaler_page_output</li> <li> compare_upscaler_page_request</li> <li> compare_upscaler_page_status_response</li> <li> console_logs</li> <li> console_logs_level</li> <li> control_net_models</li> <li> conversation_entry</li> <li> conversation_entry_content</li> <li> conversation_entry_content_item</li> <li> conversation_entry_role</li> <li> conversation_start</li> <li> create_stream_request</li> <li> create_stream_response</li> <li> deforum_sd_page_output</li> <li> deforum_sd_page_status_response</li> <li> doc_extract_page_output</li> <li> doc_extract_page_request</li> <li> doc_extract_page_status_response</li> <li> doc_search_page_output</li> <li> doc_search_page_status_response</li> <li> doc_summary_page_output</li> <li> doc_summary_page_request</li> <li> doc_summary_page_status_response</li> <li> email_face_inpainting_page_output</li> <li> email_face_inpainting_page_status_response</li> <li> embedding_models</li> <li> embeddings_page_output</li> <li> embeddings_page_status_response</li> <li> eval_prompt</li> <li> face_inpainting_page_output</li> <li> face_inpainting_page_request</li> <li> face_inpainting_page_status_response</li> <li> final_response</li> <li> function_trigger</li> <li> functions_page_output</li> <li> functions_page_status_response</li> <li> generic_error_response</li> <li> generic_error_response_detail</li> <li> google_gpt_page_output</li> <li> google_gpt_page_status_response</li> <li> google_image_gen_page_output</li> <li> google_image_gen_page_status_response</li> <li> http_validation_error</li> <li> image_segmentation_models</li> <li> image_segmentation_page_output</li> <li> image_segmentation_page_request</li> <li> image_segmentation_page_status_response</li> <li> image_to_image_models</li> <li> image_url</li> <li> image_url_detail</li> <li> img2img_page_output</li> <li> img2img_page_request</li> <li> img2img_page_status_response</li> <li> inpainting_models</li> <li> keyword_query</li> <li> large_language_models</li> <li> letter_writer_page_output</li> <li> letter_writer_page_request</li> <li> letter_writer_page_status_response</li> <li> lipsync_models</li> <li> lipsync_page_output</li> <li> lipsync_page_request</li> <li> lipsync_page_status_response</li> <li> lipsync_tts_page_output</li> <li> lipsync_tts_page_request</li> <li> lipsync_tts_page_status_response</li> <li> llm_tools</li> <li> message_part</li> <li> object_inpainting_page_output</li> <li> object_inpainting_page_request</li> <li> object_inpainting_page_status_response</li> <li> open_ai_tts_models</li> <li> open_ai_tts_voices</li> <li> prompt_tree_node</li> <li> prompt_tree_node_prompt</li> <li> qr_code_generator_page_output</li> <li> qr_code_generator_page_request</li> <li> qr_code_generator_page_status_response</li> <li> recipe_function</li> <li> recipe_run_state</li> <li> related_doc_search_response</li> <li> related_google_gpt_response</li> <li> related_qn_a_doc_page_output</li> <li> related_qn_a_doc_page_status_response</li> <li> related_qn_a_page_output</li> <li> related_qn_a_page_status_response</li> <li> reply_button</li> <li> response_format_type</li> <li> response_model</li> <li> response_model_final_keyword_query</li> <li> response_model_final_prompt</li> <li> run_settings</li> <li> run_settings_retention_policy</li> <li> run_start</li> <li> sad_talker_settings</li> <li> sad_talker_settings_preprocess</li> <li> schedulers</li> <li> search_reference</li> <li> selected_control_net_models</li> <li> seo_summary_page_output</li> <li> seo_summary_page_status_response</li> <li> serp_search_locations</li> <li> serp_search_type</li> <li> smart_gpt_page_output</li> <li> smart_gpt_page_status_response</li> <li> social_lookup_email_page_output</li> <li> social_lookup_email_page_status_response</li> <li> stream_error</li> <li> text2audio_models</li> <li> text2audio_page_output</li> <li> text2audio_page_status_response</li> <li> text_to_image_models</li> <li> text_to_speech_page_output</li> <li> text_to_speech_page_status_response</li> <li> text_to_speech_providers</li> <li> training_data_model</li> <li> translation_models</li> <li> translation_page_output</li> <li> translation_page_request</li> <li> translation_page_status_response</li> <li> upscaler_models</li> <li> validation_error</li> <li> validation_error_loc_item</li> <li> vcard</li> <li> video_bots_page_output</li> <li> video_bots_page_output_final_keyword_query</li> <li> video_bots_page_output_final_prompt</li> <li> video_bots_page_request</li> <li> video_bots_page_request_functions_item</li> <li> video_bots_page_request_sadtalker_settings</li> <li> video_bots_page_request_sadtalker_settings_preprocess</li> <li> video_bots_page_status_response</li> </ul> </li> <li> version</li> </ul> </li> </ul>"},{"location":"reference/gooey/","title":"gooey","text":""},{"location":"reference/gooey/#gooey","title":"gooey","text":""},{"location":"reference/gooey/#gooey.Gooey","title":"Gooey","text":"<pre><code>Gooey(\n    *,\n    base_url: Optional[str] = None,\n    environment: GooeyEnvironment = GooeyEnvironment.DEFAULT,\n    api_key: Optional[\n        Union[str, Callable[[], str]]\n    ] = os.getenv(\"GOOEY_API_KEY\"),\n    timeout: Optional[float] = None,\n    follow_redirects: Optional[bool] = True,\n    httpx_client: Optional[Client] = None\n)\n</code></pre> <p>Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.</p>"},{"location":"reference/gooey/#gooey.Gooey--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def __init__(\n    self,\n    *,\n    base_url: typing.Optional[str] = None,\n    environment: GooeyEnvironment = GooeyEnvironment.DEFAULT,\n    api_key: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv(\"GOOEY_API_KEY\"),\n    timeout: typing.Optional[float] = None,\n    follow_redirects: typing.Optional[bool] = True,\n    httpx_client: typing.Optional[httpx.Client] = None,\n):\n    _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None\n    if api_key is None:\n        raise ApiError(body=\"The client must be instantiated be either passing in api_key or setting GOOEY_API_KEY\")\n    self._client_wrapper = SyncClientWrapper(\n        base_url=_get_base_url(base_url=base_url, environment=environment),\n        api_key=api_key,\n        httpx_client=(\n            httpx_client\n            if httpx_client is not None\n            else (\n                httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)\n                if follow_redirects is not None\n                else httpx.Client(timeout=_defaulted_timeout)\n            )\n        ),\n        timeout=_defaulted_timeout,\n    )\n    self.copilot = CopilotClient(client_wrapper=self._client_wrapper)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.animate","title":"animate","text":"<pre><code>animate(\n    *,\n    animation_prompts: Sequence[AnimationPrompt],\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    max_frames: Optional[int] = OMIT,\n    selected_model: Optional[AnimationModels] = OMIT,\n    animation_mode: Optional[str] = OMIT,\n    zoom: Optional[str] = OMIT,\n    translation_x: Optional[str] = OMIT,\n    translation_y: Optional[str] = OMIT,\n    rotation3d_x: Optional[str] = OMIT,\n    rotation3d_y: Optional[str] = OMIT,\n    rotation3d_z: Optional[str] = OMIT,\n    fps: Optional[int] = OMIT,\n    seed: Optional[int] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; DeforumSdPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.animate--examples","title":"Examples","text":"<pre><code>from gooey import AnimationPrompt, Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.animate(\n    animation_prompts=[\n        AnimationPrompt(\n            frame=\"frame\",\n            prompt=\"prompt\",\n        )\n    ],\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def animate(\n    self,\n    *,\n    animation_prompts: typing.Sequence[AnimationPrompt],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    max_frames: typing.Optional[int] = OMIT,\n    selected_model: typing.Optional[AnimationModels] = OMIT,\n    animation_mode: typing.Optional[str] = OMIT,\n    zoom: typing.Optional[str] = OMIT,\n    translation_x: typing.Optional[str] = OMIT,\n    translation_y: typing.Optional[str] = OMIT,\n    rotation3d_x: typing.Optional[str] = OMIT,\n    rotation3d_y: typing.Optional[str] = OMIT,\n    rotation3d_z: typing.Optional[str] = OMIT,\n    fps: typing.Optional[int] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; DeforumSdPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import AnimationPrompt, Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.animate(\n        animation_prompts=[\n            AnimationPrompt(\n                frame=\"frame\",\n                prompt=\"prompt\",\n            )\n        ],\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/DeforumSD/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"animation_prompts\": animation_prompts,\n            \"max_frames\": max_frames,\n            \"selected_model\": selected_model,\n            \"animation_mode\": animation_mode,\n            \"zoom\": zoom,\n            \"translation_x\": translation_x,\n            \"translation_y\": translation_y,\n            \"rotation_3d_x\": rotation3d_x,\n            \"rotation_3d_y\": rotation3d_y,\n            \"rotation_3d_z\": rotation3d_z,\n            \"fps\": fps,\n            \"seed\": seed,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                DeforumSdPageOutput,\n                parse_obj_as(\n                    type_=DeforumSdPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.bulk_run","title":"bulk_run","text":"<pre><code>bulk_run(\n    *,\n    documents: List[File],\n    run_urls: List[str],\n    input_columns: Dict[str, str],\n    output_columns: Dict[str, str],\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    eval_urls: Optional[List[str]] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; BulkRunnerPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.bulk_run--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.bulk_run(\n    run_urls=[\"run_urls\"],\n    input_columns={\"key\": \"value\"},\n    output_columns={\"key\": \"value\"},\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def bulk_run(\n    self,\n    *,\n    documents: typing.List[core.File],\n    run_urls: typing.List[str],\n    input_columns: typing.Dict[str, str],\n    output_columns: typing.Dict[str, str],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    eval_urls: typing.Optional[typing.List[str]] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; BulkRunnerPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.bulk_run(\n        run_urls=[\"run_urls\"],\n        input_columns={\"key\": \"value\"},\n        output_columns={\"key\": \"value\"},\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/bulk-runner/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"run_urls\": run_urls,\n            \"input_columns\": input_columns,\n            \"output_columns\": output_columns,\n            \"eval_urls\": eval_urls,\n            \"settings\": settings,\n        },\n        files={\n            \"documents\": documents,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                BulkRunnerPageOutput,\n                parse_obj_as(\n                    type_=BulkRunnerPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.doc_summary","title":"doc_summary","text":"<pre><code>doc_summary(\n    *,\n    documents: List[File],\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    merge_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    chain_type: Optional[CombineDocumentsChains] = OMIT,\n    selected_asr_model: Optional[AsrModels] = OMIT,\n    google_translate_target: Optional[str] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; DocSummaryPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.doc_summary--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.doc_summary()\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def doc_summary(\n    self,\n    *,\n    documents: typing.List[core.File],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    merge_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    chain_type: typing.Optional[CombineDocumentsChains] = OMIT,\n    selected_asr_model: typing.Optional[AsrModels] = OMIT,\n    google_translate_target: typing.Optional[str] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; DocSummaryPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.doc_summary()\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/doc-summary/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"task_instructions\": task_instructions,\n            \"merge_instructions\": merge_instructions,\n            \"selected_model\": selected_model,\n            \"chain_type\": chain_type,\n            \"selected_asr_model\": selected_asr_model,\n            \"google_translate_target\": google_translate_target,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        files={\n            \"documents\": documents,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                DocSummaryPageOutput,\n                parse_obj_as(\n                    type_=DocSummaryPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.embed","title":"embed","text":"<pre><code>embed(\n    *,\n    texts: Sequence[str],\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    selected_model: Optional[EmbeddingModels] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; EmbeddingsPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.embed--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed(\n    texts=[\"texts\"],\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def embed(\n    self,\n    *,\n    texts: typing.Sequence[str],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    selected_model: typing.Optional[EmbeddingModels] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; EmbeddingsPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.embed(\n        texts=[\"texts\"],\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/embeddings/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"texts\": texts,\n            \"selected_model\": selected_model,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                EmbeddingsPageOutput,\n                parse_obj_as(\n                    type_=EmbeddingsPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.eval","title":"eval","text":"<pre><code>eval(\n    *,\n    documents: Sequence[str],\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    eval_prompts: Optional[Sequence[EvalPrompt]] = OMIT,\n    agg_functions: Optional[Sequence[AggFunction]] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; BulkEvalPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.eval--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.eval(\n    documents=[\"documents\"],\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def eval(\n    self,\n    *,\n    documents: typing.Sequence[str],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    eval_prompts: typing.Optional[typing.Sequence[EvalPrompt]] = OMIT,\n    agg_functions: typing.Optional[typing.Sequence[AggFunction]] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; BulkEvalPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.eval(\n        documents=[\"documents\"],\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/bulk-eval/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"documents\": documents,\n            \"eval_prompts\": eval_prompts,\n            \"agg_functions\": agg_functions,\n            \"selected_model\": selected_model,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                BulkEvalPageOutput,\n                parse_obj_as(\n                    type_=BulkEvalPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.functions","title":"functions","text":"<pre><code>functions(\n    *,\n    example_id: Optional[str] = None,\n    code: Optional[str] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; FunctionsPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.functions--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.functions()\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def functions(\n    self,\n    *,\n    example_id: typing.Optional[str] = None,\n    code: typing.Optional[str] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; FunctionsPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.functions()\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/functions/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"code\": code,\n            \"variables\": variables,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                FunctionsPageOutput,\n                parse_obj_as(\n                    type_=FunctionsPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.get_balance","title":"get_balance","text":"<pre><code>get_balance(\n    *, request_options: Optional[RequestOptions] = None\n) -&gt; BalanceResponse\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.get_balance--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.get_balance()\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def get_balance(self, *, request_options: typing.Optional[RequestOptions] = None) -&gt; BalanceResponse:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.get_balance()\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v1/balance/\",\n        method=\"GET\",\n        request_options=request_options,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                BalanceResponse,\n                parse_obj_as(\n                    type_=BalanceResponse,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.image_from_email","title":"image_from_email","text":"<pre><code>image_from_email(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    email_address: Optional[str] = OMIT,\n    twitter_handle: Optional[str] = OMIT,\n    face_scale: Optional[float] = OMIT,\n    face_pos_x: Optional[float] = OMIT,\n    face_pos_y: Optional[float] = OMIT,\n    selected_model: Optional[InpaintingModels] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    upscale_factor: Optional[float] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    should_send_email: Optional[bool] = OMIT,\n    email_from: Optional[str] = OMIT,\n    email_cc: Optional[str] = OMIT,\n    email_bcc: Optional[str] = OMIT,\n    email_subject: Optional[str] = OMIT,\n    email_body: Optional[str] = OMIT,\n    email_body_enable_html: Optional[bool] = OMIT,\n    fallback_email_body: Optional[str] = OMIT,\n    seed: Optional[int] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; EmailFaceInpaintingPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.image_from_email--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.image_from_email(\n    email_address=\"sean@dara.network\",\n    text_prompt=\"winter's day in paris\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def image_from_email(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    email_address: typing.Optional[str] = OMIT,\n    twitter_handle: typing.Optional[str] = OMIT,\n    face_scale: typing.Optional[float] = OMIT,\n    face_pos_x: typing.Optional[float] = OMIT,\n    face_pos_y: typing.Optional[float] = OMIT,\n    selected_model: typing.Optional[InpaintingModels] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    upscale_factor: typing.Optional[float] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    should_send_email: typing.Optional[bool] = OMIT,\n    email_from: typing.Optional[str] = OMIT,\n    email_cc: typing.Optional[str] = OMIT,\n    email_bcc: typing.Optional[str] = OMIT,\n    email_subject: typing.Optional[str] = OMIT,\n    email_body: typing.Optional[str] = OMIT,\n    email_body_enable_html: typing.Optional[bool] = OMIT,\n    fallback_email_body: typing.Optional[str] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; EmailFaceInpaintingPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.image_from_email(\n        email_address=\"sean@dara.network\",\n        text_prompt=\"winter's day in paris\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/EmailFaceInpainting/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"email_address\": email_address,\n            \"twitter_handle\": twitter_handle,\n            \"text_prompt\": text_prompt,\n            \"face_scale\": face_scale,\n            \"face_pos_x\": face_pos_x,\n            \"face_pos_y\": face_pos_y,\n            \"selected_model\": selected_model,\n            \"negative_prompt\": negative_prompt,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"upscale_factor\": upscale_factor,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"guidance_scale\": guidance_scale,\n            \"should_send_email\": should_send_email,\n            \"email_from\": email_from,\n            \"email_cc\": email_cc,\n            \"email_bcc\": email_bcc,\n            \"email_subject\": email_subject,\n            \"email_body\": email_body,\n            \"email_body_enable_html\": email_body_enable_html,\n            \"fallback_email_body\": fallback_email_body,\n            \"seed\": seed,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                EmailFaceInpaintingPageOutput,\n                parse_obj_as(\n                    type_=EmailFaceInpaintingPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.image_from_web_search","title":"image_from_web_search","text":"<pre><code>image_from_web_search(\n    *,\n    search_query: str,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    serp_search_location: Optional[\n        SerpSearchLocations\n    ] = OMIT,\n    scaleserp_locations: Optional[Sequence[str]] = OMIT,\n    selected_model: Optional[ImageToImageModels] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    prompt_strength: Optional[float] = OMIT,\n    sd2upscaling: Optional[bool] = OMIT,\n    seed: Optional[int] = OMIT,\n    image_guidance_scale: Optional[float] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; GoogleImageGenPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.image_from_web_search--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.image_from_web_search(\n    search_query=\"search_query\",\n    text_prompt=\"text_prompt\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def image_from_web_search(\n    self,\n    *,\n    search_query: str,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    serp_search_location: typing.Optional[SerpSearchLocations] = OMIT,\n    scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,\n    selected_model: typing.Optional[ImageToImageModels] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    prompt_strength: typing.Optional[float] = OMIT,\n    sd2upscaling: typing.Optional[bool] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    image_guidance_scale: typing.Optional[float] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; GoogleImageGenPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.image_from_web_search(\n        search_query=\"search_query\",\n        text_prompt=\"text_prompt\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/GoogleImageGen/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"serp_search_location\": serp_search_location,\n            \"scaleserp_locations\": scaleserp_locations,\n            \"search_query\": search_query,\n            \"text_prompt\": text_prompt,\n            \"selected_model\": selected_model,\n            \"negative_prompt\": negative_prompt,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"guidance_scale\": guidance_scale,\n            \"prompt_strength\": prompt_strength,\n            \"sd_2_upscaling\": sd2upscaling,\n            \"seed\": seed,\n            \"image_guidance_scale\": image_guidance_scale,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                GoogleImageGenPageOutput,\n                parse_obj_as(\n                    type_=GoogleImageGenPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.lipsync","title":"lipsync","text":"<pre><code>lipsync(\n    *,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    input_face: Optional[File] = OMIT,\n    face_padding_top: Optional[int] = OMIT,\n    face_padding_bottom: Optional[int] = OMIT,\n    face_padding_left: Optional[int] = OMIT,\n    face_padding_right: Optional[int] = OMIT,\n    sadtalker_settings: Optional[SadTalkerSettings] = OMIT,\n    selected_model: Optional[LipsyncModels] = OMIT,\n    input_audio: Optional[File] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; LipsyncPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.lipsync--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.lipsync()\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def lipsync(\n    self,\n    *,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    input_face: typing.Optional[core.File] = OMIT,\n    face_padding_top: typing.Optional[int] = OMIT,\n    face_padding_bottom: typing.Optional[int] = OMIT,\n    face_padding_left: typing.Optional[int] = OMIT,\n    face_padding_right: typing.Optional[int] = OMIT,\n    sadtalker_settings: typing.Optional[SadTalkerSettings] = OMIT,\n    selected_model: typing.Optional[LipsyncModels] = OMIT,\n    input_audio: typing.Optional[core.File] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; LipsyncPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.lipsync()\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/Lipsync/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"face_padding_top\": face_padding_top,\n            \"face_padding_bottom\": face_padding_bottom,\n            \"face_padding_left\": face_padding_left,\n            \"face_padding_right\": face_padding_right,\n            \"sadtalker_settings\": sadtalker_settings,\n            \"selected_model\": selected_model,\n            \"settings\": settings,\n        },\n        files={\n            \"input_face\": input_face,\n            \"input_audio\": input_audio,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                LipsyncPageOutput,\n                parse_obj_as(\n                    type_=LipsyncPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.lipsync_tts","title":"lipsync_tts","text":"<pre><code>lipsync_tts(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    tts_provider: Optional[TextToSpeechProviders] = OMIT,\n    uberduck_voice_name: Optional[str] = OMIT,\n    uberduck_speaking_rate: Optional[float] = OMIT,\n    google_voice_name: Optional[str] = OMIT,\n    google_speaking_rate: Optional[float] = OMIT,\n    google_pitch: Optional[float] = OMIT,\n    bark_history_prompt: Optional[str] = OMIT,\n    elevenlabs_voice_name: Optional[str] = OMIT,\n    elevenlabs_api_key: Optional[str] = OMIT,\n    elevenlabs_voice_id: Optional[str] = OMIT,\n    elevenlabs_model: Optional[str] = OMIT,\n    elevenlabs_stability: Optional[float] = OMIT,\n    elevenlabs_similarity_boost: Optional[float] = OMIT,\n    elevenlabs_style: Optional[float] = OMIT,\n    elevenlabs_speaker_boost: Optional[bool] = OMIT,\n    azure_voice_name: Optional[str] = OMIT,\n    openai_voice_name: Optional[OpenAiTtsVoices] = OMIT,\n    openai_tts_model: Optional[OpenAiTtsModels] = OMIT,\n    input_face: Optional[File] = OMIT,\n    face_padding_top: Optional[int] = OMIT,\n    face_padding_bottom: Optional[int] = OMIT,\n    face_padding_left: Optional[int] = OMIT,\n    face_padding_right: Optional[int] = OMIT,\n    sadtalker_settings: Optional[SadTalkerSettings] = OMIT,\n    selected_model: Optional[LipsyncModels] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; LipsyncTtsPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.lipsync_tts--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.lipsync_tts(\n    text_prompt=\"text_prompt\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def lipsync_tts(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    tts_provider: typing.Optional[TextToSpeechProviders] = OMIT,\n    uberduck_voice_name: typing.Optional[str] = OMIT,\n    uberduck_speaking_rate: typing.Optional[float] = OMIT,\n    google_voice_name: typing.Optional[str] = OMIT,\n    google_speaking_rate: typing.Optional[float] = OMIT,\n    google_pitch: typing.Optional[float] = OMIT,\n    bark_history_prompt: typing.Optional[str] = OMIT,\n    elevenlabs_voice_name: typing.Optional[str] = OMIT,\n    elevenlabs_api_key: typing.Optional[str] = OMIT,\n    elevenlabs_voice_id: typing.Optional[str] = OMIT,\n    elevenlabs_model: typing.Optional[str] = OMIT,\n    elevenlabs_stability: typing.Optional[float] = OMIT,\n    elevenlabs_similarity_boost: typing.Optional[float] = OMIT,\n    elevenlabs_style: typing.Optional[float] = OMIT,\n    elevenlabs_speaker_boost: typing.Optional[bool] = OMIT,\n    azure_voice_name: typing.Optional[str] = OMIT,\n    openai_voice_name: typing.Optional[OpenAiTtsVoices] = OMIT,\n    openai_tts_model: typing.Optional[OpenAiTtsModels] = OMIT,\n    input_face: typing.Optional[core.File] = OMIT,\n    face_padding_top: typing.Optional[int] = OMIT,\n    face_padding_bottom: typing.Optional[int] = OMIT,\n    face_padding_left: typing.Optional[int] = OMIT,\n    face_padding_right: typing.Optional[int] = OMIT,\n    sadtalker_settings: typing.Optional[SadTalkerSettings] = OMIT,\n    selected_model: typing.Optional[LipsyncModels] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; LipsyncTtsPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.lipsync_tts(\n        text_prompt=\"text_prompt\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/LipsyncTTS/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"tts_provider\": tts_provider,\n            \"uberduck_voice_name\": uberduck_voice_name,\n            \"uberduck_speaking_rate\": uberduck_speaking_rate,\n            \"google_voice_name\": google_voice_name,\n            \"google_speaking_rate\": google_speaking_rate,\n            \"google_pitch\": google_pitch,\n            \"bark_history_prompt\": bark_history_prompt,\n            \"elevenlabs_voice_name\": elevenlabs_voice_name,\n            \"elevenlabs_api_key\": elevenlabs_api_key,\n            \"elevenlabs_voice_id\": elevenlabs_voice_id,\n            \"elevenlabs_model\": elevenlabs_model,\n            \"elevenlabs_stability\": elevenlabs_stability,\n            \"elevenlabs_similarity_boost\": elevenlabs_similarity_boost,\n            \"elevenlabs_style\": elevenlabs_style,\n            \"elevenlabs_speaker_boost\": elevenlabs_speaker_boost,\n            \"azure_voice_name\": azure_voice_name,\n            \"openai_voice_name\": openai_voice_name,\n            \"openai_tts_model\": openai_tts_model,\n            \"face_padding_top\": face_padding_top,\n            \"face_padding_bottom\": face_padding_bottom,\n            \"face_padding_left\": face_padding_left,\n            \"face_padding_right\": face_padding_right,\n            \"sadtalker_settings\": sadtalker_settings,\n            \"selected_model\": selected_model,\n            \"settings\": settings,\n        },\n        files={\n            \"input_face\": input_face,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                LipsyncTtsPageOutput,\n                parse_obj_as(\n                    type_=LipsyncTtsPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.llm","title":"llm","text":"<pre><code>llm(\n    *,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    input_prompt: Optional[str] = OMIT,\n    selected_models: Optional[\n        Sequence[LargeLanguageModels]\n    ] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; CompareLlmPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.llm--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.llm()\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def llm(\n    self,\n    *,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    input_prompt: typing.Optional[str] = OMIT,\n    selected_models: typing.Optional[typing.Sequence[LargeLanguageModels]] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; CompareLlmPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.llm()\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/CompareLLM/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"input_prompt\": input_prompt,\n            \"selected_models\": selected_models,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                CompareLlmPageOutput,\n                parse_obj_as(\n                    type_=CompareLlmPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.personalize_email","title":"personalize_email","text":"<pre><code>personalize_email(\n    *,\n    email_address: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    input_prompt: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; SocialLookupEmailPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.personalize_email--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.personalize_email(\n    email_address=\"email_address\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def personalize_email(\n    self,\n    *,\n    email_address: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    input_prompt: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; SocialLookupEmailPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.personalize_email(\n        email_address=\"email_address\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/SocialLookupEmail/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"email_address\": email_address,\n            \"input_prompt\": input_prompt,\n            \"selected_model\": selected_model,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                SocialLookupEmailPageOutput,\n                parse_obj_as(\n                    type_=SocialLookupEmailPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.portrait","title":"portrait","text":"<pre><code>portrait(\n    *,\n    input_image: File,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    face_scale: Optional[float] = OMIT,\n    face_pos_x: Optional[float] = OMIT,\n    face_pos_y: Optional[float] = OMIT,\n    selected_model: Optional[InpaintingModels] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    upscale_factor: Optional[float] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    seed: Optional[int] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; FaceInpaintingPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.portrait--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.portrait(\n    text_prompt=\"text_prompt\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def portrait(\n    self,\n    *,\n    input_image: core.File,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    face_scale: typing.Optional[float] = OMIT,\n    face_pos_x: typing.Optional[float] = OMIT,\n    face_pos_y: typing.Optional[float] = OMIT,\n    selected_model: typing.Optional[InpaintingModels] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    upscale_factor: typing.Optional[float] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; FaceInpaintingPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.portrait(\n        text_prompt=\"text_prompt\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/FaceInpainting/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"face_scale\": face_scale,\n            \"face_pos_x\": face_pos_x,\n            \"face_pos_y\": face_pos_y,\n            \"selected_model\": selected_model,\n            \"negative_prompt\": negative_prompt,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"upscale_factor\": upscale_factor,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"guidance_scale\": guidance_scale,\n            \"seed\": seed,\n            \"settings\": settings,\n        },\n        files={\n            \"input_image\": input_image,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                FaceInpaintingPageOutput,\n                parse_obj_as(\n                    type_=FaceInpaintingPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.product_image","title":"product_image","text":"<pre><code>product_image(\n    *,\n    input_image: File,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    obj_scale: Optional[float] = OMIT,\n    obj_pos_x: Optional[float] = OMIT,\n    obj_pos_y: Optional[float] = OMIT,\n    mask_threshold: Optional[float] = OMIT,\n    selected_model: Optional[InpaintingModels] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    sd2upscaling: Optional[bool] = OMIT,\n    seed: Optional[int] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; ObjectInpaintingPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.product_image--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.product_image(\n    text_prompt=\"text_prompt\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def product_image(\n    self,\n    *,\n    input_image: core.File,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    obj_scale: typing.Optional[float] = OMIT,\n    obj_pos_x: typing.Optional[float] = OMIT,\n    obj_pos_y: typing.Optional[float] = OMIT,\n    mask_threshold: typing.Optional[float] = OMIT,\n    selected_model: typing.Optional[InpaintingModels] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    sd2upscaling: typing.Optional[bool] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; ObjectInpaintingPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.product_image(\n        text_prompt=\"text_prompt\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/ObjectInpainting/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"obj_scale\": obj_scale,\n            \"obj_pos_x\": obj_pos_x,\n            \"obj_pos_y\": obj_pos_y,\n            \"mask_threshold\": mask_threshold,\n            \"selected_model\": selected_model,\n            \"negative_prompt\": negative_prompt,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"guidance_scale\": guidance_scale,\n            \"sd_2_upscaling\": sd2upscaling,\n            \"seed\": seed,\n            \"settings\": settings,\n        },\n        files={\n            \"input_image\": input_image,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                ObjectInpaintingPageOutput,\n                parse_obj_as(\n                    type_=ObjectInpaintingPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.qr_code","title":"qr_code","text":"<pre><code>qr_code(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    qr_code_data: Optional[str] = OMIT,\n    qr_code_input_image: Optional[File] = OMIT,\n    qr_code_vcard: Optional[Vcard] = OMIT,\n    qr_code_file: Optional[File] = OMIT,\n    use_url_shortener: Optional[bool] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    image_prompt: Optional[str] = OMIT,\n    image_prompt_controlnet_models: Optional[\n        List[ControlNetModels]\n    ] = OMIT,\n    image_prompt_strength: Optional[float] = OMIT,\n    image_prompt_scale: Optional[float] = OMIT,\n    image_prompt_pos_x: Optional[float] = OMIT,\n    image_prompt_pos_y: Optional[float] = OMIT,\n    selected_model: Optional[TextToImageModels] = OMIT,\n    selected_controlnet_model: Optional[\n        List[ControlNetModels]\n    ] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    controlnet_conditioning_scale: Optional[\n        List[float]\n    ] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    scheduler: Optional[Schedulers] = OMIT,\n    seed: Optional[int] = OMIT,\n    obj_scale: Optional[float] = OMIT,\n    obj_pos_x: Optional[float] = OMIT,\n    obj_pos_y: Optional[float] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; QrCodeGeneratorPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.qr_code--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.qr_code(\n    text_prompt=\"text_prompt\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def qr_code(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    qr_code_data: typing.Optional[str] = OMIT,\n    qr_code_input_image: typing.Optional[core.File] = OMIT,\n    qr_code_vcard: typing.Optional[Vcard] = OMIT,\n    qr_code_file: typing.Optional[core.File] = OMIT,\n    use_url_shortener: typing.Optional[bool] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    image_prompt: typing.Optional[str] = OMIT,\n    image_prompt_controlnet_models: typing.Optional[typing.List[ControlNetModels]] = OMIT,\n    image_prompt_strength: typing.Optional[float] = OMIT,\n    image_prompt_scale: typing.Optional[float] = OMIT,\n    image_prompt_pos_x: typing.Optional[float] = OMIT,\n    image_prompt_pos_y: typing.Optional[float] = OMIT,\n    selected_model: typing.Optional[TextToImageModels] = OMIT,\n    selected_controlnet_model: typing.Optional[typing.List[ControlNetModels]] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    controlnet_conditioning_scale: typing.Optional[typing.List[float]] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    scheduler: typing.Optional[Schedulers] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    obj_scale: typing.Optional[float] = OMIT,\n    obj_pos_x: typing.Optional[float] = OMIT,\n    obj_pos_y: typing.Optional[float] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; QrCodeGeneratorPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.qr_code(\n        text_prompt=\"text_prompt\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/art-qr-code/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"qr_code_data\": qr_code_data,\n            \"qr_code_vcard\": qr_code_vcard,\n            \"use_url_shortener\": use_url_shortener,\n            \"text_prompt\": text_prompt,\n            \"negative_prompt\": negative_prompt,\n            \"image_prompt\": image_prompt,\n            \"image_prompt_controlnet_models\": image_prompt_controlnet_models,\n            \"image_prompt_strength\": image_prompt_strength,\n            \"image_prompt_scale\": image_prompt_scale,\n            \"image_prompt_pos_x\": image_prompt_pos_x,\n            \"image_prompt_pos_y\": image_prompt_pos_y,\n            \"selected_model\": selected_model,\n            \"selected_controlnet_model\": selected_controlnet_model,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"guidance_scale\": guidance_scale,\n            \"controlnet_conditioning_scale\": controlnet_conditioning_scale,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"scheduler\": scheduler,\n            \"seed\": seed,\n            \"obj_scale\": obj_scale,\n            \"obj_pos_x\": obj_pos_x,\n            \"obj_pos_y\": obj_pos_y,\n            \"settings\": settings,\n        },\n        files={\n            \"qr_code_input_image\": qr_code_input_image,\n            \"qr_code_file\": qr_code_file,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                QrCodeGeneratorPageOutput,\n                parse_obj_as(\n                    type_=QrCodeGeneratorPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.rag","title":"rag","text":"<pre><code>rag(\n    *,\n    search_query: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    keyword_query: Optional[KeywordQuery] = OMIT,\n    documents: Optional[Sequence[str]] = OMIT,\n    max_references: Optional[int] = OMIT,\n    max_context_words: Optional[int] = OMIT,\n    scroll_jump: Optional[int] = OMIT,\n    doc_extract_url: Optional[str] = OMIT,\n    embedding_model: Optional[EmbeddingModels] = OMIT,\n    dense_weight: Optional[float] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    query_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    citation_style: Optional[CitationStyles] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; DocSearchPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.rag--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.rag(\n    search_query=\"search_query\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def rag(\n    self,\n    *,\n    search_query: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    keyword_query: typing.Optional[KeywordQuery] = OMIT,\n    documents: typing.Optional[typing.Sequence[str]] = OMIT,\n    max_references: typing.Optional[int] = OMIT,\n    max_context_words: typing.Optional[int] = OMIT,\n    scroll_jump: typing.Optional[int] = OMIT,\n    doc_extract_url: typing.Optional[str] = OMIT,\n    embedding_model: typing.Optional[EmbeddingModels] = OMIT,\n    dense_weight: typing.Optional[float] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    query_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    citation_style: typing.Optional[CitationStyles] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; DocSearchPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.rag(\n        search_query=\"search_query\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/doc-search/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"search_query\": search_query,\n            \"keyword_query\": keyword_query,\n            \"documents\": documents,\n            \"max_references\": max_references,\n            \"max_context_words\": max_context_words,\n            \"scroll_jump\": scroll_jump,\n            \"doc_extract_url\": doc_extract_url,\n            \"embedding_model\": embedding_model,\n            \"dense_weight\": dense_weight,\n            \"task_instructions\": task_instructions,\n            \"query_instructions\": query_instructions,\n            \"selected_model\": selected_model,\n            \"citation_style\": citation_style,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                DocSearchPageOutput,\n                parse_obj_as(\n                    type_=DocSearchPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.remix_image","title":"remix_image","text":"<pre><code>remix_image(\n    *,\n    input_image: File,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    text_prompt: Optional[str] = OMIT,\n    selected_model: Optional[ImageToImageModels] = OMIT,\n    selected_controlnet_model: Optional[\n        SelectedControlNetModels\n    ] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    prompt_strength: Optional[float] = OMIT,\n    controlnet_conditioning_scale: Optional[\n        List[float]\n    ] = OMIT,\n    seed: Optional[int] = OMIT,\n    image_guidance_scale: Optional[float] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; Img2ImgPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.remix_image--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.remix_image()\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def remix_image(\n    self,\n    *,\n    input_image: core.File,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    text_prompt: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[ImageToImageModels] = OMIT,\n    selected_controlnet_model: typing.Optional[SelectedControlNetModels] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    prompt_strength: typing.Optional[float] = OMIT,\n    controlnet_conditioning_scale: typing.Optional[typing.List[float]] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    image_guidance_scale: typing.Optional[float] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; Img2ImgPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.remix_image()\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/Img2Img/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"selected_model\": selected_model,\n            \"selected_controlnet_model\": selected_controlnet_model,\n            \"negative_prompt\": negative_prompt,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"guidance_scale\": guidance_scale,\n            \"prompt_strength\": prompt_strength,\n            \"controlnet_conditioning_scale\": controlnet_conditioning_scale,\n            \"seed\": seed,\n            \"image_guidance_scale\": image_guidance_scale,\n            \"settings\": settings,\n        },\n        files={\n            \"input_image\": input_image,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                Img2ImgPageOutput,\n                parse_obj_as(\n                    type_=Img2ImgPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.remove_background","title":"remove_background","text":"<pre><code>remove_background(\n    *,\n    input_image: File,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    selected_model: Optional[\n        ImageSegmentationModels\n    ] = OMIT,\n    mask_threshold: Optional[float] = OMIT,\n    rect_persepective_transform: Optional[bool] = OMIT,\n    reflection_opacity: Optional[float] = OMIT,\n    obj_scale: Optional[float] = OMIT,\n    obj_pos_x: Optional[float] = OMIT,\n    obj_pos_y: Optional[float] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; ImageSegmentationPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.remove_background--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.remove_background()\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def remove_background(\n    self,\n    *,\n    input_image: core.File,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    selected_model: typing.Optional[ImageSegmentationModels] = OMIT,\n    mask_threshold: typing.Optional[float] = OMIT,\n    rect_persepective_transform: typing.Optional[bool] = OMIT,\n    reflection_opacity: typing.Optional[float] = OMIT,\n    obj_scale: typing.Optional[float] = OMIT,\n    obj_pos_x: typing.Optional[float] = OMIT,\n    obj_pos_y: typing.Optional[float] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; ImageSegmentationPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.remove_background()\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/ImageSegmentation/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"selected_model\": selected_model,\n            \"mask_threshold\": mask_threshold,\n            \"rect_persepective_transform\": rect_persepective_transform,\n            \"reflection_opacity\": reflection_opacity,\n            \"obj_scale\": obj_scale,\n            \"obj_pos_x\": obj_pos_x,\n            \"obj_pos_y\": obj_pos_y,\n            \"settings\": settings,\n        },\n        files={\n            \"input_image\": input_image,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                ImageSegmentationPageOutput,\n                parse_obj_as(\n                    type_=ImageSegmentationPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.seo_content","title":"seo_content","text":"<pre><code>seo_content(\n    *,\n    search_query: str,\n    keywords: str,\n    title: str,\n    company_url: str,\n    example_id: Optional[str] = None,\n    task_instructions: Optional[str] = OMIT,\n    enable_html: Optional[bool] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: Optional[int] = OMIT,\n    enable_crosslinks: Optional[bool] = OMIT,\n    seed: Optional[int] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    serp_search_location: Optional[\n        SerpSearchLocations\n    ] = OMIT,\n    scaleserp_locations: Optional[Sequence[str]] = OMIT,\n    serp_search_type: Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: Optional[str] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; SeoSummaryPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.seo_content--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.seo_content(\n    search_query=\"search_query\",\n    keywords=\"keywords\",\n    title=\"title\",\n    company_url=\"company_url\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def seo_content(\n    self,\n    *,\n    search_query: str,\n    keywords: str,\n    title: str,\n    company_url: str,\n    example_id: typing.Optional[str] = None,\n    task_instructions: typing.Optional[str] = OMIT,\n    enable_html: typing.Optional[bool] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: typing.Optional[int] = OMIT,\n    enable_crosslinks: typing.Optional[bool] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    serp_search_location: typing.Optional[SerpSearchLocations] = OMIT,\n    scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,\n    serp_search_type: typing.Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: typing.Optional[str] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; SeoSummaryPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.seo_content(\n        search_query=\"search_query\",\n        keywords=\"keywords\",\n        title=\"title\",\n        company_url=\"company_url\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/SEOSummary/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"search_query\": search_query,\n            \"keywords\": keywords,\n            \"title\": title,\n            \"company_url\": company_url,\n            \"task_instructions\": task_instructions,\n            \"enable_html\": enable_html,\n            \"selected_model\": selected_model,\n            \"max_search_urls\": max_search_urls,\n            \"enable_crosslinks\": enable_crosslinks,\n            \"seed\": seed,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"serp_search_location\": serp_search_location,\n            \"scaleserp_locations\": scaleserp_locations,\n            \"serp_search_type\": serp_search_type,\n            \"scaleserp_search_field\": scaleserp_search_field,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                SeoSummaryPageOutput,\n                parse_obj_as(\n                    type_=SeoSummaryPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.seo_people_also_ask","title":"seo_people_also_ask","text":"<pre><code>seo_people_also_ask(\n    *,\n    search_query: str,\n    site_filter: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    query_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: Optional[int] = OMIT,\n    max_references: Optional[int] = OMIT,\n    max_context_words: Optional[int] = OMIT,\n    scroll_jump: Optional[int] = OMIT,\n    embedding_model: Optional[EmbeddingModels] = OMIT,\n    dense_weight: Optional[float] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    serp_search_location: Optional[\n        SerpSearchLocations\n    ] = OMIT,\n    scaleserp_locations: Optional[Sequence[str]] = OMIT,\n    serp_search_type: Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: Optional[str] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; RelatedQnAPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.seo_people_also_ask--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.seo_people_also_ask(\n    search_query=\"search_query\",\n    site_filter=\"site_filter\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def seo_people_also_ask(\n    self,\n    *,\n    search_query: str,\n    site_filter: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    query_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: typing.Optional[int] = OMIT,\n    max_references: typing.Optional[int] = OMIT,\n    max_context_words: typing.Optional[int] = OMIT,\n    scroll_jump: typing.Optional[int] = OMIT,\n    embedding_model: typing.Optional[EmbeddingModels] = OMIT,\n    dense_weight: typing.Optional[float] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    serp_search_location: typing.Optional[SerpSearchLocations] = OMIT,\n    scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,\n    serp_search_type: typing.Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: typing.Optional[str] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; RelatedQnAPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.seo_people_also_ask(\n        search_query=\"search_query\",\n        site_filter=\"site_filter\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/related-qna-maker/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"search_query\": search_query,\n            \"site_filter\": site_filter,\n            \"task_instructions\": task_instructions,\n            \"query_instructions\": query_instructions,\n            \"selected_model\": selected_model,\n            \"max_search_urls\": max_search_urls,\n            \"max_references\": max_references,\n            \"max_context_words\": max_context_words,\n            \"scroll_jump\": scroll_jump,\n            \"embedding_model\": embedding_model,\n            \"dense_weight\": dense_weight,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"serp_search_location\": serp_search_location,\n            \"scaleserp_locations\": scaleserp_locations,\n            \"serp_search_type\": serp_search_type,\n            \"scaleserp_search_field\": scaleserp_search_field,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                RelatedQnAPageOutput,\n                parse_obj_as(\n                    type_=RelatedQnAPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.seo_people_also_ask_doc","title":"seo_people_also_ask_doc","text":"<pre><code>seo_people_also_ask_doc(\n    *,\n    search_query: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    keyword_query: Optional[KeywordQuery] = OMIT,\n    documents: Optional[Sequence[str]] = OMIT,\n    max_references: Optional[int] = OMIT,\n    max_context_words: Optional[int] = OMIT,\n    scroll_jump: Optional[int] = OMIT,\n    doc_extract_url: Optional[str] = OMIT,\n    embedding_model: Optional[EmbeddingModels] = OMIT,\n    dense_weight: Optional[float] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    query_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    citation_style: Optional[CitationStyles] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    serp_search_location: Optional[\n        SerpSearchLocations\n    ] = OMIT,\n    scaleserp_locations: Optional[Sequence[str]] = OMIT,\n    serp_search_type: Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: Optional[str] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; RelatedQnADocPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.seo_people_also_ask_doc--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.seo_people_also_ask_doc(\n    search_query=\"search_query\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def seo_people_also_ask_doc(\n    self,\n    *,\n    search_query: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    keyword_query: typing.Optional[KeywordQuery] = OMIT,\n    documents: typing.Optional[typing.Sequence[str]] = OMIT,\n    max_references: typing.Optional[int] = OMIT,\n    max_context_words: typing.Optional[int] = OMIT,\n    scroll_jump: typing.Optional[int] = OMIT,\n    doc_extract_url: typing.Optional[str] = OMIT,\n    embedding_model: typing.Optional[EmbeddingModels] = OMIT,\n    dense_weight: typing.Optional[float] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    query_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    citation_style: typing.Optional[CitationStyles] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    serp_search_location: typing.Optional[SerpSearchLocations] = OMIT,\n    scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,\n    serp_search_type: typing.Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: typing.Optional[str] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; RelatedQnADocPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.seo_people_also_ask_doc(\n        search_query=\"search_query\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/related-qna-maker-doc/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"search_query\": search_query,\n            \"keyword_query\": keyword_query,\n            \"documents\": documents,\n            \"max_references\": max_references,\n            \"max_context_words\": max_context_words,\n            \"scroll_jump\": scroll_jump,\n            \"doc_extract_url\": doc_extract_url,\n            \"embedding_model\": embedding_model,\n            \"dense_weight\": dense_weight,\n            \"task_instructions\": task_instructions,\n            \"query_instructions\": query_instructions,\n            \"selected_model\": selected_model,\n            \"citation_style\": citation_style,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"serp_search_location\": serp_search_location,\n            \"scaleserp_locations\": scaleserp_locations,\n            \"serp_search_type\": serp_search_type,\n            \"scaleserp_search_field\": scaleserp_search_field,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                RelatedQnADocPageOutput,\n                parse_obj_as(\n                    type_=RelatedQnADocPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.smart_gpt","title":"smart_gpt","text":"<pre><code>smart_gpt(\n    *,\n    input_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    cot_prompt: Optional[str] = OMIT,\n    reflexion_prompt: Optional[str] = OMIT,\n    dera_prompt: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; SmartGptPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.smart_gpt--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.smart_gpt(\n    input_prompt=\"input_prompt\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def smart_gpt(\n    self,\n    *,\n    input_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    cot_prompt: typing.Optional[str] = OMIT,\n    reflexion_prompt: typing.Optional[str] = OMIT,\n    dera_prompt: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; SmartGptPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.smart_gpt(\n        input_prompt=\"input_prompt\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/SmartGPT/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"input_prompt\": input_prompt,\n            \"cot_prompt\": cot_prompt,\n            \"reflexion_prompt\": reflexion_prompt,\n            \"dera_prompt\": dera_prompt,\n            \"selected_model\": selected_model,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                SmartGptPageOutput,\n                parse_obj_as(\n                    type_=SmartGptPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.speech_recognition","title":"speech_recognition","text":"<pre><code>speech_recognition(\n    *,\n    documents: List[File],\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    selected_model: Optional[AsrModels] = OMIT,\n    language: Optional[str] = OMIT,\n    translation_model: Optional[TranslationModels] = OMIT,\n    output_format: Optional[AsrOutputFormat] = OMIT,\n    google_translate_target: Optional[str] = OMIT,\n    translation_source: Optional[str] = OMIT,\n    translation_target: Optional[str] = OMIT,\n    glossary_document: Optional[File] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; AsrPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.speech_recognition--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.speech_recognition()\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def speech_recognition(\n    self,\n    *,\n    documents: typing.List[core.File],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    selected_model: typing.Optional[AsrModels] = OMIT,\n    language: typing.Optional[str] = OMIT,\n    translation_model: typing.Optional[TranslationModels] = OMIT,\n    output_format: typing.Optional[AsrOutputFormat] = OMIT,\n    google_translate_target: typing.Optional[str] = OMIT,\n    translation_source: typing.Optional[str] = OMIT,\n    translation_target: typing.Optional[str] = OMIT,\n    glossary_document: typing.Optional[core.File] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; AsrPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.speech_recognition()\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/asr/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"selected_model\": selected_model,\n            \"language\": language,\n            \"translation_model\": translation_model,\n            \"output_format\": output_format,\n            \"google_translate_target\": google_translate_target,\n            \"translation_source\": translation_source,\n            \"translation_target\": translation_target,\n            \"settings\": settings,\n        },\n        files={\n            \"documents\": documents,\n            \"glossary_document\": glossary_document,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                AsrPageOutput,\n                parse_obj_as(\n                    type_=AsrPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.synthesize_data","title":"synthesize_data","text":"<pre><code>synthesize_data(\n    *,\n    documents: List[File],\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    sheet_url: Optional[File] = OMIT,\n    selected_asr_model: Optional[AsrModels] = OMIT,\n    google_translate_target: Optional[str] = OMIT,\n    glossary_document: Optional[File] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; DocExtractPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.synthesize_data--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.synthesize_data()\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def synthesize_data(\n    self,\n    *,\n    documents: typing.List[core.File],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    sheet_url: typing.Optional[core.File] = OMIT,\n    selected_asr_model: typing.Optional[AsrModels] = OMIT,\n    google_translate_target: typing.Optional[str] = OMIT,\n    glossary_document: typing.Optional[core.File] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; DocExtractPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.synthesize_data()\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/doc-extract/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"selected_asr_model\": selected_asr_model,\n            \"google_translate_target\": google_translate_target,\n            \"task_instructions\": task_instructions,\n            \"selected_model\": selected_model,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        files={\n            \"documents\": documents,\n            \"sheet_url\": sheet_url,\n            \"glossary_document\": glossary_document,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                DocExtractPageOutput,\n                parse_obj_as(\n                    type_=DocExtractPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.text_to_image","title":"text_to_image","text":"<pre><code>text_to_image(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    dall_e3quality: Optional[str] = OMIT,\n    dall_e3style: Optional[str] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    seed: Optional[int] = OMIT,\n    sd2upscaling: Optional[bool] = OMIT,\n    selected_models: Optional[\n        Sequence[TextToImageModels]\n    ] = OMIT,\n    scheduler: Optional[Schedulers] = OMIT,\n    edit_instruction: Optional[str] = OMIT,\n    image_guidance_scale: Optional[float] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; CompareText2ImgPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.text_to_image--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.text_to_image(\n    text_prompt=\"text_prompt\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def text_to_image(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    dall_e3quality: typing.Optional[str] = OMIT,\n    dall_e3style: typing.Optional[str] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    sd2upscaling: typing.Optional[bool] = OMIT,\n    selected_models: typing.Optional[typing.Sequence[TextToImageModels]] = OMIT,\n    scheduler: typing.Optional[Schedulers] = OMIT,\n    edit_instruction: typing.Optional[str] = OMIT,\n    image_guidance_scale: typing.Optional[float] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; CompareText2ImgPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.text_to_image(\n        text_prompt=\"text_prompt\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/CompareText2Img/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"negative_prompt\": negative_prompt,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"dall_e_3_quality\": dall_e3quality,\n            \"dall_e_3_style\": dall_e3style,\n            \"guidance_scale\": guidance_scale,\n            \"seed\": seed,\n            \"sd_2_upscaling\": sd2upscaling,\n            \"selected_models\": selected_models,\n            \"scheduler\": scheduler,\n            \"edit_instruction\": edit_instruction,\n            \"image_guidance_scale\": image_guidance_scale,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                CompareText2ImgPageOutput,\n                parse_obj_as(\n                    type_=CompareText2ImgPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.text_to_music","title":"text_to_music","text":"<pre><code>text_to_music(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    duration_sec: Optional[float] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    seed: Optional[int] = OMIT,\n    sd2upscaling: Optional[bool] = OMIT,\n    selected_models: Optional[\n        Sequence[Text2AudioModels]\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; Text2AudioPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.text_to_music--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.text_to_music(\n    text_prompt=\"text_prompt\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def text_to_music(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    duration_sec: typing.Optional[float] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    sd2upscaling: typing.Optional[bool] = OMIT,\n    selected_models: typing.Optional[typing.Sequence[Text2AudioModels]] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; Text2AudioPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.text_to_music(\n        text_prompt=\"text_prompt\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/text2audio/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"negative_prompt\": negative_prompt,\n            \"duration_sec\": duration_sec,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"guidance_scale\": guidance_scale,\n            \"seed\": seed,\n            \"sd_2_upscaling\": sd2upscaling,\n            \"selected_models\": selected_models,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                Text2AudioPageOutput,\n                parse_obj_as(\n                    type_=Text2AudioPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.text_to_speech","title":"text_to_speech","text":"<pre><code>text_to_speech(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    tts_provider: Optional[TextToSpeechProviders] = OMIT,\n    uberduck_voice_name: Optional[str] = OMIT,\n    uberduck_speaking_rate: Optional[float] = OMIT,\n    google_voice_name: Optional[str] = OMIT,\n    google_speaking_rate: Optional[float] = OMIT,\n    google_pitch: Optional[float] = OMIT,\n    bark_history_prompt: Optional[str] = OMIT,\n    elevenlabs_voice_name: Optional[str] = OMIT,\n    elevenlabs_api_key: Optional[str] = OMIT,\n    elevenlabs_voice_id: Optional[str] = OMIT,\n    elevenlabs_model: Optional[str] = OMIT,\n    elevenlabs_stability: Optional[float] = OMIT,\n    elevenlabs_similarity_boost: Optional[float] = OMIT,\n    elevenlabs_style: Optional[float] = OMIT,\n    elevenlabs_speaker_boost: Optional[bool] = OMIT,\n    azure_voice_name: Optional[str] = OMIT,\n    openai_voice_name: Optional[OpenAiTtsVoices] = OMIT,\n    openai_tts_model: Optional[OpenAiTtsModels] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; TextToSpeechPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.text_to_speech--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.text_to_speech(\n    text_prompt=\"text_prompt\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def text_to_speech(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    tts_provider: typing.Optional[TextToSpeechProviders] = OMIT,\n    uberduck_voice_name: typing.Optional[str] = OMIT,\n    uberduck_speaking_rate: typing.Optional[float] = OMIT,\n    google_voice_name: typing.Optional[str] = OMIT,\n    google_speaking_rate: typing.Optional[float] = OMIT,\n    google_pitch: typing.Optional[float] = OMIT,\n    bark_history_prompt: typing.Optional[str] = OMIT,\n    elevenlabs_voice_name: typing.Optional[str] = OMIT,\n    elevenlabs_api_key: typing.Optional[str] = OMIT,\n    elevenlabs_voice_id: typing.Optional[str] = OMIT,\n    elevenlabs_model: typing.Optional[str] = OMIT,\n    elevenlabs_stability: typing.Optional[float] = OMIT,\n    elevenlabs_similarity_boost: typing.Optional[float] = OMIT,\n    elevenlabs_style: typing.Optional[float] = OMIT,\n    elevenlabs_speaker_boost: typing.Optional[bool] = OMIT,\n    azure_voice_name: typing.Optional[str] = OMIT,\n    openai_voice_name: typing.Optional[OpenAiTtsVoices] = OMIT,\n    openai_tts_model: typing.Optional[OpenAiTtsModels] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; TextToSpeechPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.text_to_speech(\n        text_prompt=\"text_prompt\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/TextToSpeech/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"tts_provider\": tts_provider,\n            \"uberduck_voice_name\": uberduck_voice_name,\n            \"uberduck_speaking_rate\": uberduck_speaking_rate,\n            \"google_voice_name\": google_voice_name,\n            \"google_speaking_rate\": google_speaking_rate,\n            \"google_pitch\": google_pitch,\n            \"bark_history_prompt\": bark_history_prompt,\n            \"elevenlabs_voice_name\": elevenlabs_voice_name,\n            \"elevenlabs_api_key\": elevenlabs_api_key,\n            \"elevenlabs_voice_id\": elevenlabs_voice_id,\n            \"elevenlabs_model\": elevenlabs_model,\n            \"elevenlabs_stability\": elevenlabs_stability,\n            \"elevenlabs_similarity_boost\": elevenlabs_similarity_boost,\n            \"elevenlabs_style\": elevenlabs_style,\n            \"elevenlabs_speaker_boost\": elevenlabs_speaker_boost,\n            \"azure_voice_name\": azure_voice_name,\n            \"openai_voice_name\": openai_voice_name,\n            \"openai_tts_model\": openai_tts_model,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                TextToSpeechPageOutput,\n                parse_obj_as(\n                    type_=TextToSpeechPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.translate","title":"translate","text":"<pre><code>translate(\n    *,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    texts: Optional[List[str]] = OMIT,\n    selected_model: Optional[TranslationModels] = OMIT,\n    translation_source: Optional[str] = OMIT,\n    translation_target: Optional[str] = OMIT,\n    glossary_document: Optional[File] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; TranslationPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.translate--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.translate()\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def translate(\n    self,\n    *,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    texts: typing.Optional[typing.List[str]] = OMIT,\n    selected_model: typing.Optional[TranslationModels] = OMIT,\n    translation_source: typing.Optional[str] = OMIT,\n    translation_target: typing.Optional[str] = OMIT,\n    glossary_document: typing.Optional[core.File] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; TranslationPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.translate()\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/translate/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"texts\": texts,\n            \"selected_model\": selected_model,\n            \"translation_source\": translation_source,\n            \"translation_target\": translation_target,\n            \"settings\": settings,\n        },\n        files={\n            \"glossary_document\": glossary_document,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                TranslationPageOutput,\n                parse_obj_as(\n                    type_=TranslationPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.upscale","title":"upscale","text":"<pre><code>upscale(\n    *,\n    scale: int,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    input_image: Optional[File] = OMIT,\n    input_video: Optional[File] = OMIT,\n    selected_models: Optional[List[UpscalerModels]] = OMIT,\n    selected_bg_model: Optional[\n        Literal[\"real_esrgan_x2\"]\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; CompareUpscalerPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.upscale--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.upscale(\n    scale=1,\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def upscale(\n    self,\n    *,\n    scale: int,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    input_image: typing.Optional[core.File] = OMIT,\n    input_video: typing.Optional[core.File] = OMIT,\n    selected_models: typing.Optional[typing.List[UpscalerModels]] = OMIT,\n    selected_bg_model: typing.Optional[typing.Literal[\"real_esrgan_x2\"]] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; CompareUpscalerPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.upscale(\n        scale=1,\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/compare-ai-upscalers/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"scale\": scale,\n            \"selected_models\": selected_models,\n            \"selected_bg_model\": selected_bg_model,\n            \"settings\": settings,\n        },\n        files={\n            \"input_image\": input_image,\n            \"input_video\": input_video,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                CompareUpscalerPageOutput,\n                parse_obj_as(\n                    type_=CompareUpscalerPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.web_search_llm","title":"web_search_llm","text":"<pre><code>web_search_llm(\n    *,\n    search_query: str,\n    site_filter: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    query_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: Optional[int] = OMIT,\n    max_references: Optional[int] = OMIT,\n    max_context_words: Optional[int] = OMIT,\n    scroll_jump: Optional[int] = OMIT,\n    embedding_model: Optional[EmbeddingModels] = OMIT,\n    dense_weight: Optional[float] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    serp_search_location: Optional[\n        SerpSearchLocations\n    ] = OMIT,\n    scaleserp_locations: Optional[Sequence[str]] = OMIT,\n    serp_search_type: Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: Optional[str] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; GoogleGptPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.Gooey.web_search_llm--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.web_search_llm(\n    search_query=\"search_query\",\n    site_filter=\"site_filter\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def web_search_llm(\n    self,\n    *,\n    search_query: str,\n    site_filter: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    query_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: typing.Optional[int] = OMIT,\n    max_references: typing.Optional[int] = OMIT,\n    max_context_words: typing.Optional[int] = OMIT,\n    scroll_jump: typing.Optional[int] = OMIT,\n    embedding_model: typing.Optional[EmbeddingModels] = OMIT,\n    dense_weight: typing.Optional[float] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    serp_search_location: typing.Optional[SerpSearchLocations] = OMIT,\n    scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,\n    serp_search_type: typing.Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: typing.Optional[str] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; GoogleGptPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.web_search_llm(\n        search_query=\"search_query\",\n        site_filter=\"site_filter\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/google-gpt/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"search_query\": search_query,\n            \"site_filter\": site_filter,\n            \"task_instructions\": task_instructions,\n            \"query_instructions\": query_instructions,\n            \"selected_model\": selected_model,\n            \"max_search_urls\": max_search_urls,\n            \"max_references\": max_references,\n            \"max_context_words\": max_context_words,\n            \"scroll_jump\": scroll_jump,\n            \"embedding_model\": embedding_model,\n            \"dense_weight\": dense_weight,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"serp_search_location\": serp_search_location,\n            \"scaleserp_locations\": scaleserp_locations,\n            \"serp_search_type\": serp_search_type,\n            \"scaleserp_search_field\": scaleserp_search_field,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                GoogleGptPageOutput,\n                parse_obj_as(\n                    type_=GoogleGptPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey","title":"AsyncGooey","text":"<pre><code>AsyncGooey(\n    *,\n    base_url: Optional[str] = None,\n    environment: GooeyEnvironment = GooeyEnvironment.DEFAULT,\n    api_key: Optional[\n        Union[str, Callable[[], str]]\n    ] = os.getenv(\"GOOEY_API_KEY\"),\n    timeout: Optional[float] = None,\n    follow_redirects: Optional[bool] = True,\n    httpx_client: Optional[AsyncClient] = None\n)\n</code></pre> <p>Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.</p>"},{"location":"reference/gooey/#gooey.AsyncGooey--examples","title":"Examples","text":"<pre><code>from gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def __init__(\n    self,\n    *,\n    base_url: typing.Optional[str] = None,\n    environment: GooeyEnvironment = GooeyEnvironment.DEFAULT,\n    api_key: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv(\"GOOEY_API_KEY\"),\n    timeout: typing.Optional[float] = None,\n    follow_redirects: typing.Optional[bool] = True,\n    httpx_client: typing.Optional[httpx.AsyncClient] = None,\n):\n    _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None\n    if api_key is None:\n        raise ApiError(body=\"The client must be instantiated be either passing in api_key or setting GOOEY_API_KEY\")\n    self._client_wrapper = AsyncClientWrapper(\n        base_url=_get_base_url(base_url=base_url, environment=environment),\n        api_key=api_key,\n        httpx_client=(\n            httpx_client\n            if httpx_client is not None\n            else (\n                httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)\n                if follow_redirects is not None\n                else httpx.AsyncClient(timeout=_defaulted_timeout)\n            )\n        ),\n        timeout=_defaulted_timeout,\n    )\n    self.copilot = AsyncCopilotClient(client_wrapper=self._client_wrapper)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.animate","title":"animate  <code>async</code>","text":"<pre><code>animate(\n    *,\n    animation_prompts: Sequence[AnimationPrompt],\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    max_frames: Optional[int] = OMIT,\n    selected_model: Optional[AnimationModels] = OMIT,\n    animation_mode: Optional[str] = OMIT,\n    zoom: Optional[str] = OMIT,\n    translation_x: Optional[str] = OMIT,\n    translation_y: Optional[str] = OMIT,\n    rotation3d_x: Optional[str] = OMIT,\n    rotation3d_y: Optional[str] = OMIT,\n    rotation3d_z: Optional[str] = OMIT,\n    fps: Optional[int] = OMIT,\n    seed: Optional[int] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; DeforumSdPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.animate--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AnimationPrompt, AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.animate(\n        animation_prompts=[\n            AnimationPrompt(\n                frame=\"frame\",\n                prompt=\"prompt\",\n            )\n        ],\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def animate(\n    self,\n    *,\n    animation_prompts: typing.Sequence[AnimationPrompt],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    max_frames: typing.Optional[int] = OMIT,\n    selected_model: typing.Optional[AnimationModels] = OMIT,\n    animation_mode: typing.Optional[str] = OMIT,\n    zoom: typing.Optional[str] = OMIT,\n    translation_x: typing.Optional[str] = OMIT,\n    translation_y: typing.Optional[str] = OMIT,\n    rotation3d_x: typing.Optional[str] = OMIT,\n    rotation3d_y: typing.Optional[str] = OMIT,\n    rotation3d_z: typing.Optional[str] = OMIT,\n    fps: typing.Optional[int] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; DeforumSdPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AnimationPrompt, AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.animate(\n            animation_prompts=[\n                AnimationPrompt(\n                    frame=\"frame\",\n                    prompt=\"prompt\",\n                )\n            ],\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/DeforumSD/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"animation_prompts\": animation_prompts,\n            \"max_frames\": max_frames,\n            \"selected_model\": selected_model,\n            \"animation_mode\": animation_mode,\n            \"zoom\": zoom,\n            \"translation_x\": translation_x,\n            \"translation_y\": translation_y,\n            \"rotation_3d_x\": rotation3d_x,\n            \"rotation_3d_y\": rotation3d_y,\n            \"rotation_3d_z\": rotation3d_z,\n            \"fps\": fps,\n            \"seed\": seed,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                DeforumSdPageOutput,\n                parse_obj_as(\n                    type_=DeforumSdPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.bulk_run","title":"bulk_run  <code>async</code>","text":"<pre><code>bulk_run(\n    *,\n    documents: List[File],\n    run_urls: List[str],\n    input_columns: Dict[str, str],\n    output_columns: Dict[str, str],\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    eval_urls: Optional[List[str]] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; BulkRunnerPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.bulk_run--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.bulk_run(\n        run_urls=[\"run_urls\"],\n        input_columns={\"key\": \"value\"},\n        output_columns={\"key\": \"value\"},\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def bulk_run(\n    self,\n    *,\n    documents: typing.List[core.File],\n    run_urls: typing.List[str],\n    input_columns: typing.Dict[str, str],\n    output_columns: typing.Dict[str, str],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    eval_urls: typing.Optional[typing.List[str]] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; BulkRunnerPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.bulk_run(\n            run_urls=[\"run_urls\"],\n            input_columns={\"key\": \"value\"},\n            output_columns={\"key\": \"value\"},\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/bulk-runner/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"run_urls\": run_urls,\n            \"input_columns\": input_columns,\n            \"output_columns\": output_columns,\n            \"eval_urls\": eval_urls,\n            \"settings\": settings,\n        },\n        files={\n            \"documents\": documents,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                BulkRunnerPageOutput,\n                parse_obj_as(\n                    type_=BulkRunnerPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.doc_summary","title":"doc_summary  <code>async</code>","text":"<pre><code>doc_summary(\n    *,\n    documents: List[File],\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    merge_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    chain_type: Optional[CombineDocumentsChains] = OMIT,\n    selected_asr_model: Optional[AsrModels] = OMIT,\n    google_translate_target: Optional[str] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; DocSummaryPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.doc_summary--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.doc_summary()\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def doc_summary(\n    self,\n    *,\n    documents: typing.List[core.File],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    merge_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    chain_type: typing.Optional[CombineDocumentsChains] = OMIT,\n    selected_asr_model: typing.Optional[AsrModels] = OMIT,\n    google_translate_target: typing.Optional[str] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; DocSummaryPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.doc_summary()\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/doc-summary/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"task_instructions\": task_instructions,\n            \"merge_instructions\": merge_instructions,\n            \"selected_model\": selected_model,\n            \"chain_type\": chain_type,\n            \"selected_asr_model\": selected_asr_model,\n            \"google_translate_target\": google_translate_target,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        files={\n            \"documents\": documents,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                DocSummaryPageOutput,\n                parse_obj_as(\n                    type_=DocSummaryPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.embed","title":"embed  <code>async</code>","text":"<pre><code>embed(\n    *,\n    texts: Sequence[str],\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    selected_model: Optional[EmbeddingModels] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; EmbeddingsPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.embed--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.embed(\n        texts=[\"texts\"],\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def embed(\n    self,\n    *,\n    texts: typing.Sequence[str],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    selected_model: typing.Optional[EmbeddingModels] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; EmbeddingsPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.embed(\n            texts=[\"texts\"],\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/embeddings/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"texts\": texts,\n            \"selected_model\": selected_model,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                EmbeddingsPageOutput,\n                parse_obj_as(\n                    type_=EmbeddingsPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.eval","title":"eval  <code>async</code>","text":"<pre><code>eval(\n    *,\n    documents: Sequence[str],\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    eval_prompts: Optional[Sequence[EvalPrompt]] = OMIT,\n    agg_functions: Optional[Sequence[AggFunction]] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; BulkEvalPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.eval--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.eval(\n        documents=[\"documents\"],\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def eval(\n    self,\n    *,\n    documents: typing.Sequence[str],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    eval_prompts: typing.Optional[typing.Sequence[EvalPrompt]] = OMIT,\n    agg_functions: typing.Optional[typing.Sequence[AggFunction]] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; BulkEvalPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.eval(\n            documents=[\"documents\"],\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/bulk-eval/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"documents\": documents,\n            \"eval_prompts\": eval_prompts,\n            \"agg_functions\": agg_functions,\n            \"selected_model\": selected_model,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                BulkEvalPageOutput,\n                parse_obj_as(\n                    type_=BulkEvalPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.functions","title":"functions  <code>async</code>","text":"<pre><code>functions(\n    *,\n    example_id: Optional[str] = None,\n    code: Optional[str] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; FunctionsPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.functions--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.functions()\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def functions(\n    self,\n    *,\n    example_id: typing.Optional[str] = None,\n    code: typing.Optional[str] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; FunctionsPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.functions()\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/functions/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"code\": code,\n            \"variables\": variables,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                FunctionsPageOutput,\n                parse_obj_as(\n                    type_=FunctionsPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.get_balance","title":"get_balance  <code>async</code>","text":"<pre><code>get_balance(\n    *, request_options: Optional[RequestOptions] = None\n) -&gt; BalanceResponse\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.get_balance--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.get_balance()\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def get_balance(self, *, request_options: typing.Optional[RequestOptions] = None) -&gt; BalanceResponse:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.get_balance()\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v1/balance/\",\n        method=\"GET\",\n        request_options=request_options,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                BalanceResponse,\n                parse_obj_as(\n                    type_=BalanceResponse,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.image_from_email","title":"image_from_email  <code>async</code>","text":"<pre><code>image_from_email(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    email_address: Optional[str] = OMIT,\n    twitter_handle: Optional[str] = OMIT,\n    face_scale: Optional[float] = OMIT,\n    face_pos_x: Optional[float] = OMIT,\n    face_pos_y: Optional[float] = OMIT,\n    selected_model: Optional[InpaintingModels] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    upscale_factor: Optional[float] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    should_send_email: Optional[bool] = OMIT,\n    email_from: Optional[str] = OMIT,\n    email_cc: Optional[str] = OMIT,\n    email_bcc: Optional[str] = OMIT,\n    email_subject: Optional[str] = OMIT,\n    email_body: Optional[str] = OMIT,\n    email_body_enable_html: Optional[bool] = OMIT,\n    fallback_email_body: Optional[str] = OMIT,\n    seed: Optional[int] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; EmailFaceInpaintingPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.image_from_email--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.image_from_email(\n        email_address=\"sean@dara.network\",\n        text_prompt=\"winter's day in paris\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def image_from_email(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    email_address: typing.Optional[str] = OMIT,\n    twitter_handle: typing.Optional[str] = OMIT,\n    face_scale: typing.Optional[float] = OMIT,\n    face_pos_x: typing.Optional[float] = OMIT,\n    face_pos_y: typing.Optional[float] = OMIT,\n    selected_model: typing.Optional[InpaintingModels] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    upscale_factor: typing.Optional[float] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    should_send_email: typing.Optional[bool] = OMIT,\n    email_from: typing.Optional[str] = OMIT,\n    email_cc: typing.Optional[str] = OMIT,\n    email_bcc: typing.Optional[str] = OMIT,\n    email_subject: typing.Optional[str] = OMIT,\n    email_body: typing.Optional[str] = OMIT,\n    email_body_enable_html: typing.Optional[bool] = OMIT,\n    fallback_email_body: typing.Optional[str] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; EmailFaceInpaintingPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.image_from_email(\n            email_address=\"sean@dara.network\",\n            text_prompt=\"winter's day in paris\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/EmailFaceInpainting/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"email_address\": email_address,\n            \"twitter_handle\": twitter_handle,\n            \"text_prompt\": text_prompt,\n            \"face_scale\": face_scale,\n            \"face_pos_x\": face_pos_x,\n            \"face_pos_y\": face_pos_y,\n            \"selected_model\": selected_model,\n            \"negative_prompt\": negative_prompt,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"upscale_factor\": upscale_factor,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"guidance_scale\": guidance_scale,\n            \"should_send_email\": should_send_email,\n            \"email_from\": email_from,\n            \"email_cc\": email_cc,\n            \"email_bcc\": email_bcc,\n            \"email_subject\": email_subject,\n            \"email_body\": email_body,\n            \"email_body_enable_html\": email_body_enable_html,\n            \"fallback_email_body\": fallback_email_body,\n            \"seed\": seed,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                EmailFaceInpaintingPageOutput,\n                parse_obj_as(\n                    type_=EmailFaceInpaintingPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.image_from_web_search","title":"image_from_web_search  <code>async</code>","text":"<pre><code>image_from_web_search(\n    *,\n    search_query: str,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    serp_search_location: Optional[\n        SerpSearchLocations\n    ] = OMIT,\n    scaleserp_locations: Optional[Sequence[str]] = OMIT,\n    selected_model: Optional[ImageToImageModels] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    prompt_strength: Optional[float] = OMIT,\n    sd2upscaling: Optional[bool] = OMIT,\n    seed: Optional[int] = OMIT,\n    image_guidance_scale: Optional[float] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; GoogleImageGenPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.image_from_web_search--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.image_from_web_search(\n        search_query=\"search_query\",\n        text_prompt=\"text_prompt\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def image_from_web_search(\n    self,\n    *,\n    search_query: str,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    serp_search_location: typing.Optional[SerpSearchLocations] = OMIT,\n    scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,\n    selected_model: typing.Optional[ImageToImageModels] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    prompt_strength: typing.Optional[float] = OMIT,\n    sd2upscaling: typing.Optional[bool] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    image_guidance_scale: typing.Optional[float] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; GoogleImageGenPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.image_from_web_search(\n            search_query=\"search_query\",\n            text_prompt=\"text_prompt\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/GoogleImageGen/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"serp_search_location\": serp_search_location,\n            \"scaleserp_locations\": scaleserp_locations,\n            \"search_query\": search_query,\n            \"text_prompt\": text_prompt,\n            \"selected_model\": selected_model,\n            \"negative_prompt\": negative_prompt,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"guidance_scale\": guidance_scale,\n            \"prompt_strength\": prompt_strength,\n            \"sd_2_upscaling\": sd2upscaling,\n            \"seed\": seed,\n            \"image_guidance_scale\": image_guidance_scale,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                GoogleImageGenPageOutput,\n                parse_obj_as(\n                    type_=GoogleImageGenPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.lipsync","title":"lipsync  <code>async</code>","text":"<pre><code>lipsync(\n    *,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    input_face: Optional[File] = OMIT,\n    face_padding_top: Optional[int] = OMIT,\n    face_padding_bottom: Optional[int] = OMIT,\n    face_padding_left: Optional[int] = OMIT,\n    face_padding_right: Optional[int] = OMIT,\n    sadtalker_settings: Optional[SadTalkerSettings] = OMIT,\n    selected_model: Optional[LipsyncModels] = OMIT,\n    input_audio: Optional[File] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; LipsyncPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.lipsync--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.lipsync()\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def lipsync(\n    self,\n    *,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    input_face: typing.Optional[core.File] = OMIT,\n    face_padding_top: typing.Optional[int] = OMIT,\n    face_padding_bottom: typing.Optional[int] = OMIT,\n    face_padding_left: typing.Optional[int] = OMIT,\n    face_padding_right: typing.Optional[int] = OMIT,\n    sadtalker_settings: typing.Optional[SadTalkerSettings] = OMIT,\n    selected_model: typing.Optional[LipsyncModels] = OMIT,\n    input_audio: typing.Optional[core.File] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; LipsyncPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.lipsync()\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/Lipsync/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"face_padding_top\": face_padding_top,\n            \"face_padding_bottom\": face_padding_bottom,\n            \"face_padding_left\": face_padding_left,\n            \"face_padding_right\": face_padding_right,\n            \"sadtalker_settings\": sadtalker_settings,\n            \"selected_model\": selected_model,\n            \"settings\": settings,\n        },\n        files={\n            \"input_face\": input_face,\n            \"input_audio\": input_audio,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                LipsyncPageOutput,\n                parse_obj_as(\n                    type_=LipsyncPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.lipsync_tts","title":"lipsync_tts  <code>async</code>","text":"<pre><code>lipsync_tts(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    tts_provider: Optional[TextToSpeechProviders] = OMIT,\n    uberduck_voice_name: Optional[str] = OMIT,\n    uberduck_speaking_rate: Optional[float] = OMIT,\n    google_voice_name: Optional[str] = OMIT,\n    google_speaking_rate: Optional[float] = OMIT,\n    google_pitch: Optional[float] = OMIT,\n    bark_history_prompt: Optional[str] = OMIT,\n    elevenlabs_voice_name: Optional[str] = OMIT,\n    elevenlabs_api_key: Optional[str] = OMIT,\n    elevenlabs_voice_id: Optional[str] = OMIT,\n    elevenlabs_model: Optional[str] = OMIT,\n    elevenlabs_stability: Optional[float] = OMIT,\n    elevenlabs_similarity_boost: Optional[float] = OMIT,\n    elevenlabs_style: Optional[float] = OMIT,\n    elevenlabs_speaker_boost: Optional[bool] = OMIT,\n    azure_voice_name: Optional[str] = OMIT,\n    openai_voice_name: Optional[OpenAiTtsVoices] = OMIT,\n    openai_tts_model: Optional[OpenAiTtsModels] = OMIT,\n    input_face: Optional[File] = OMIT,\n    face_padding_top: Optional[int] = OMIT,\n    face_padding_bottom: Optional[int] = OMIT,\n    face_padding_left: Optional[int] = OMIT,\n    face_padding_right: Optional[int] = OMIT,\n    sadtalker_settings: Optional[SadTalkerSettings] = OMIT,\n    selected_model: Optional[LipsyncModels] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; LipsyncTtsPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.lipsync_tts--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.lipsync_tts(\n        text_prompt=\"text_prompt\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def lipsync_tts(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    tts_provider: typing.Optional[TextToSpeechProviders] = OMIT,\n    uberduck_voice_name: typing.Optional[str] = OMIT,\n    uberduck_speaking_rate: typing.Optional[float] = OMIT,\n    google_voice_name: typing.Optional[str] = OMIT,\n    google_speaking_rate: typing.Optional[float] = OMIT,\n    google_pitch: typing.Optional[float] = OMIT,\n    bark_history_prompt: typing.Optional[str] = OMIT,\n    elevenlabs_voice_name: typing.Optional[str] = OMIT,\n    elevenlabs_api_key: typing.Optional[str] = OMIT,\n    elevenlabs_voice_id: typing.Optional[str] = OMIT,\n    elevenlabs_model: typing.Optional[str] = OMIT,\n    elevenlabs_stability: typing.Optional[float] = OMIT,\n    elevenlabs_similarity_boost: typing.Optional[float] = OMIT,\n    elevenlabs_style: typing.Optional[float] = OMIT,\n    elevenlabs_speaker_boost: typing.Optional[bool] = OMIT,\n    azure_voice_name: typing.Optional[str] = OMIT,\n    openai_voice_name: typing.Optional[OpenAiTtsVoices] = OMIT,\n    openai_tts_model: typing.Optional[OpenAiTtsModels] = OMIT,\n    input_face: typing.Optional[core.File] = OMIT,\n    face_padding_top: typing.Optional[int] = OMIT,\n    face_padding_bottom: typing.Optional[int] = OMIT,\n    face_padding_left: typing.Optional[int] = OMIT,\n    face_padding_right: typing.Optional[int] = OMIT,\n    sadtalker_settings: typing.Optional[SadTalkerSettings] = OMIT,\n    selected_model: typing.Optional[LipsyncModels] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; LipsyncTtsPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.lipsync_tts(\n            text_prompt=\"text_prompt\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/LipsyncTTS/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"tts_provider\": tts_provider,\n            \"uberduck_voice_name\": uberduck_voice_name,\n            \"uberduck_speaking_rate\": uberduck_speaking_rate,\n            \"google_voice_name\": google_voice_name,\n            \"google_speaking_rate\": google_speaking_rate,\n            \"google_pitch\": google_pitch,\n            \"bark_history_prompt\": bark_history_prompt,\n            \"elevenlabs_voice_name\": elevenlabs_voice_name,\n            \"elevenlabs_api_key\": elevenlabs_api_key,\n            \"elevenlabs_voice_id\": elevenlabs_voice_id,\n            \"elevenlabs_model\": elevenlabs_model,\n            \"elevenlabs_stability\": elevenlabs_stability,\n            \"elevenlabs_similarity_boost\": elevenlabs_similarity_boost,\n            \"elevenlabs_style\": elevenlabs_style,\n            \"elevenlabs_speaker_boost\": elevenlabs_speaker_boost,\n            \"azure_voice_name\": azure_voice_name,\n            \"openai_voice_name\": openai_voice_name,\n            \"openai_tts_model\": openai_tts_model,\n            \"face_padding_top\": face_padding_top,\n            \"face_padding_bottom\": face_padding_bottom,\n            \"face_padding_left\": face_padding_left,\n            \"face_padding_right\": face_padding_right,\n            \"sadtalker_settings\": sadtalker_settings,\n            \"selected_model\": selected_model,\n            \"settings\": settings,\n        },\n        files={\n            \"input_face\": input_face,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                LipsyncTtsPageOutput,\n                parse_obj_as(\n                    type_=LipsyncTtsPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.llm","title":"llm  <code>async</code>","text":"<pre><code>llm(\n    *,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    input_prompt: Optional[str] = OMIT,\n    selected_models: Optional[\n        Sequence[LargeLanguageModels]\n    ] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; CompareLlmPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.llm--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.llm()\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def llm(\n    self,\n    *,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    input_prompt: typing.Optional[str] = OMIT,\n    selected_models: typing.Optional[typing.Sequence[LargeLanguageModels]] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; CompareLlmPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.llm()\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/CompareLLM/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"input_prompt\": input_prompt,\n            \"selected_models\": selected_models,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                CompareLlmPageOutput,\n                parse_obj_as(\n                    type_=CompareLlmPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.personalize_email","title":"personalize_email  <code>async</code>","text":"<pre><code>personalize_email(\n    *,\n    email_address: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    input_prompt: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; SocialLookupEmailPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.personalize_email--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.personalize_email(\n        email_address=\"email_address\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def personalize_email(\n    self,\n    *,\n    email_address: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    input_prompt: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; SocialLookupEmailPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.personalize_email(\n            email_address=\"email_address\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/SocialLookupEmail/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"email_address\": email_address,\n            \"input_prompt\": input_prompt,\n            \"selected_model\": selected_model,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                SocialLookupEmailPageOutput,\n                parse_obj_as(\n                    type_=SocialLookupEmailPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.portrait","title":"portrait  <code>async</code>","text":"<pre><code>portrait(\n    *,\n    input_image: File,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    face_scale: Optional[float] = OMIT,\n    face_pos_x: Optional[float] = OMIT,\n    face_pos_y: Optional[float] = OMIT,\n    selected_model: Optional[InpaintingModels] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    upscale_factor: Optional[float] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    seed: Optional[int] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; FaceInpaintingPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.portrait--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.portrait(\n        text_prompt=\"text_prompt\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def portrait(\n    self,\n    *,\n    input_image: core.File,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    face_scale: typing.Optional[float] = OMIT,\n    face_pos_x: typing.Optional[float] = OMIT,\n    face_pos_y: typing.Optional[float] = OMIT,\n    selected_model: typing.Optional[InpaintingModels] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    upscale_factor: typing.Optional[float] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; FaceInpaintingPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.portrait(\n            text_prompt=\"text_prompt\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/FaceInpainting/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"face_scale\": face_scale,\n            \"face_pos_x\": face_pos_x,\n            \"face_pos_y\": face_pos_y,\n            \"selected_model\": selected_model,\n            \"negative_prompt\": negative_prompt,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"upscale_factor\": upscale_factor,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"guidance_scale\": guidance_scale,\n            \"seed\": seed,\n            \"settings\": settings,\n        },\n        files={\n            \"input_image\": input_image,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                FaceInpaintingPageOutput,\n                parse_obj_as(\n                    type_=FaceInpaintingPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.product_image","title":"product_image  <code>async</code>","text":"<pre><code>product_image(\n    *,\n    input_image: File,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    obj_scale: Optional[float] = OMIT,\n    obj_pos_x: Optional[float] = OMIT,\n    obj_pos_y: Optional[float] = OMIT,\n    mask_threshold: Optional[float] = OMIT,\n    selected_model: Optional[InpaintingModels] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    sd2upscaling: Optional[bool] = OMIT,\n    seed: Optional[int] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; ObjectInpaintingPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.product_image--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.product_image(\n        text_prompt=\"text_prompt\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def product_image(\n    self,\n    *,\n    input_image: core.File,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    obj_scale: typing.Optional[float] = OMIT,\n    obj_pos_x: typing.Optional[float] = OMIT,\n    obj_pos_y: typing.Optional[float] = OMIT,\n    mask_threshold: typing.Optional[float] = OMIT,\n    selected_model: typing.Optional[InpaintingModels] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    sd2upscaling: typing.Optional[bool] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; ObjectInpaintingPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.product_image(\n            text_prompt=\"text_prompt\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/ObjectInpainting/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"obj_scale\": obj_scale,\n            \"obj_pos_x\": obj_pos_x,\n            \"obj_pos_y\": obj_pos_y,\n            \"mask_threshold\": mask_threshold,\n            \"selected_model\": selected_model,\n            \"negative_prompt\": negative_prompt,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"guidance_scale\": guidance_scale,\n            \"sd_2_upscaling\": sd2upscaling,\n            \"seed\": seed,\n            \"settings\": settings,\n        },\n        files={\n            \"input_image\": input_image,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                ObjectInpaintingPageOutput,\n                parse_obj_as(\n                    type_=ObjectInpaintingPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.qr_code","title":"qr_code  <code>async</code>","text":"<pre><code>qr_code(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    qr_code_data: Optional[str] = OMIT,\n    qr_code_input_image: Optional[File] = OMIT,\n    qr_code_vcard: Optional[Vcard] = OMIT,\n    qr_code_file: Optional[File] = OMIT,\n    use_url_shortener: Optional[bool] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    image_prompt: Optional[str] = OMIT,\n    image_prompt_controlnet_models: Optional[\n        List[ControlNetModels]\n    ] = OMIT,\n    image_prompt_strength: Optional[float] = OMIT,\n    image_prompt_scale: Optional[float] = OMIT,\n    image_prompt_pos_x: Optional[float] = OMIT,\n    image_prompt_pos_y: Optional[float] = OMIT,\n    selected_model: Optional[TextToImageModels] = OMIT,\n    selected_controlnet_model: Optional[\n        List[ControlNetModels]\n    ] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    controlnet_conditioning_scale: Optional[\n        List[float]\n    ] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    scheduler: Optional[Schedulers] = OMIT,\n    seed: Optional[int] = OMIT,\n    obj_scale: Optional[float] = OMIT,\n    obj_pos_x: Optional[float] = OMIT,\n    obj_pos_y: Optional[float] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; QrCodeGeneratorPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.qr_code--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.qr_code(\n        text_prompt=\"text_prompt\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def qr_code(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    qr_code_data: typing.Optional[str] = OMIT,\n    qr_code_input_image: typing.Optional[core.File] = OMIT,\n    qr_code_vcard: typing.Optional[Vcard] = OMIT,\n    qr_code_file: typing.Optional[core.File] = OMIT,\n    use_url_shortener: typing.Optional[bool] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    image_prompt: typing.Optional[str] = OMIT,\n    image_prompt_controlnet_models: typing.Optional[typing.List[ControlNetModels]] = OMIT,\n    image_prompt_strength: typing.Optional[float] = OMIT,\n    image_prompt_scale: typing.Optional[float] = OMIT,\n    image_prompt_pos_x: typing.Optional[float] = OMIT,\n    image_prompt_pos_y: typing.Optional[float] = OMIT,\n    selected_model: typing.Optional[TextToImageModels] = OMIT,\n    selected_controlnet_model: typing.Optional[typing.List[ControlNetModels]] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    controlnet_conditioning_scale: typing.Optional[typing.List[float]] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    scheduler: typing.Optional[Schedulers] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    obj_scale: typing.Optional[float] = OMIT,\n    obj_pos_x: typing.Optional[float] = OMIT,\n    obj_pos_y: typing.Optional[float] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; QrCodeGeneratorPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.qr_code(\n            text_prompt=\"text_prompt\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/art-qr-code/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"qr_code_data\": qr_code_data,\n            \"qr_code_vcard\": qr_code_vcard,\n            \"use_url_shortener\": use_url_shortener,\n            \"text_prompt\": text_prompt,\n            \"negative_prompt\": negative_prompt,\n            \"image_prompt\": image_prompt,\n            \"image_prompt_controlnet_models\": image_prompt_controlnet_models,\n            \"image_prompt_strength\": image_prompt_strength,\n            \"image_prompt_scale\": image_prompt_scale,\n            \"image_prompt_pos_x\": image_prompt_pos_x,\n            \"image_prompt_pos_y\": image_prompt_pos_y,\n            \"selected_model\": selected_model,\n            \"selected_controlnet_model\": selected_controlnet_model,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"guidance_scale\": guidance_scale,\n            \"controlnet_conditioning_scale\": controlnet_conditioning_scale,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"scheduler\": scheduler,\n            \"seed\": seed,\n            \"obj_scale\": obj_scale,\n            \"obj_pos_x\": obj_pos_x,\n            \"obj_pos_y\": obj_pos_y,\n            \"settings\": settings,\n        },\n        files={\n            \"qr_code_input_image\": qr_code_input_image,\n            \"qr_code_file\": qr_code_file,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                QrCodeGeneratorPageOutput,\n                parse_obj_as(\n                    type_=QrCodeGeneratorPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.rag","title":"rag  <code>async</code>","text":"<pre><code>rag(\n    *,\n    search_query: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    keyword_query: Optional[KeywordQuery] = OMIT,\n    documents: Optional[Sequence[str]] = OMIT,\n    max_references: Optional[int] = OMIT,\n    max_context_words: Optional[int] = OMIT,\n    scroll_jump: Optional[int] = OMIT,\n    doc_extract_url: Optional[str] = OMIT,\n    embedding_model: Optional[EmbeddingModels] = OMIT,\n    dense_weight: Optional[float] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    query_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    citation_style: Optional[CitationStyles] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; DocSearchPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.rag--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.rag(\n        search_query=\"search_query\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def rag(\n    self,\n    *,\n    search_query: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    keyword_query: typing.Optional[KeywordQuery] = OMIT,\n    documents: typing.Optional[typing.Sequence[str]] = OMIT,\n    max_references: typing.Optional[int] = OMIT,\n    max_context_words: typing.Optional[int] = OMIT,\n    scroll_jump: typing.Optional[int] = OMIT,\n    doc_extract_url: typing.Optional[str] = OMIT,\n    embedding_model: typing.Optional[EmbeddingModels] = OMIT,\n    dense_weight: typing.Optional[float] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    query_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    citation_style: typing.Optional[CitationStyles] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; DocSearchPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.rag(\n            search_query=\"search_query\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/doc-search/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"search_query\": search_query,\n            \"keyword_query\": keyword_query,\n            \"documents\": documents,\n            \"max_references\": max_references,\n            \"max_context_words\": max_context_words,\n            \"scroll_jump\": scroll_jump,\n            \"doc_extract_url\": doc_extract_url,\n            \"embedding_model\": embedding_model,\n            \"dense_weight\": dense_weight,\n            \"task_instructions\": task_instructions,\n            \"query_instructions\": query_instructions,\n            \"selected_model\": selected_model,\n            \"citation_style\": citation_style,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                DocSearchPageOutput,\n                parse_obj_as(\n                    type_=DocSearchPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.remix_image","title":"remix_image  <code>async</code>","text":"<pre><code>remix_image(\n    *,\n    input_image: File,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    text_prompt: Optional[str] = OMIT,\n    selected_model: Optional[ImageToImageModels] = OMIT,\n    selected_controlnet_model: Optional[\n        SelectedControlNetModels\n    ] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    prompt_strength: Optional[float] = OMIT,\n    controlnet_conditioning_scale: Optional[\n        List[float]\n    ] = OMIT,\n    seed: Optional[int] = OMIT,\n    image_guidance_scale: Optional[float] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; Img2ImgPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.remix_image--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.remix_image()\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def remix_image(\n    self,\n    *,\n    input_image: core.File,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    text_prompt: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[ImageToImageModels] = OMIT,\n    selected_controlnet_model: typing.Optional[SelectedControlNetModels] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    prompt_strength: typing.Optional[float] = OMIT,\n    controlnet_conditioning_scale: typing.Optional[typing.List[float]] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    image_guidance_scale: typing.Optional[float] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; Img2ImgPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.remix_image()\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/Img2Img/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"selected_model\": selected_model,\n            \"selected_controlnet_model\": selected_controlnet_model,\n            \"negative_prompt\": negative_prompt,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"guidance_scale\": guidance_scale,\n            \"prompt_strength\": prompt_strength,\n            \"controlnet_conditioning_scale\": controlnet_conditioning_scale,\n            \"seed\": seed,\n            \"image_guidance_scale\": image_guidance_scale,\n            \"settings\": settings,\n        },\n        files={\n            \"input_image\": input_image,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                Img2ImgPageOutput,\n                parse_obj_as(\n                    type_=Img2ImgPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.remove_background","title":"remove_background  <code>async</code>","text":"<pre><code>remove_background(\n    *,\n    input_image: File,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    selected_model: Optional[\n        ImageSegmentationModels\n    ] = OMIT,\n    mask_threshold: Optional[float] = OMIT,\n    rect_persepective_transform: Optional[bool] = OMIT,\n    reflection_opacity: Optional[float] = OMIT,\n    obj_scale: Optional[float] = OMIT,\n    obj_pos_x: Optional[float] = OMIT,\n    obj_pos_y: Optional[float] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; ImageSegmentationPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.remove_background--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.remove_background()\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def remove_background(\n    self,\n    *,\n    input_image: core.File,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    selected_model: typing.Optional[ImageSegmentationModels] = OMIT,\n    mask_threshold: typing.Optional[float] = OMIT,\n    rect_persepective_transform: typing.Optional[bool] = OMIT,\n    reflection_opacity: typing.Optional[float] = OMIT,\n    obj_scale: typing.Optional[float] = OMIT,\n    obj_pos_x: typing.Optional[float] = OMIT,\n    obj_pos_y: typing.Optional[float] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; ImageSegmentationPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.remove_background()\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/ImageSegmentation/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"selected_model\": selected_model,\n            \"mask_threshold\": mask_threshold,\n            \"rect_persepective_transform\": rect_persepective_transform,\n            \"reflection_opacity\": reflection_opacity,\n            \"obj_scale\": obj_scale,\n            \"obj_pos_x\": obj_pos_x,\n            \"obj_pos_y\": obj_pos_y,\n            \"settings\": settings,\n        },\n        files={\n            \"input_image\": input_image,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                ImageSegmentationPageOutput,\n                parse_obj_as(\n                    type_=ImageSegmentationPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.seo_content","title":"seo_content  <code>async</code>","text":"<pre><code>seo_content(\n    *,\n    search_query: str,\n    keywords: str,\n    title: str,\n    company_url: str,\n    example_id: Optional[str] = None,\n    task_instructions: Optional[str] = OMIT,\n    enable_html: Optional[bool] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: Optional[int] = OMIT,\n    enable_crosslinks: Optional[bool] = OMIT,\n    seed: Optional[int] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    serp_search_location: Optional[\n        SerpSearchLocations\n    ] = OMIT,\n    scaleserp_locations: Optional[Sequence[str]] = OMIT,\n    serp_search_type: Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: Optional[str] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; SeoSummaryPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.seo_content--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.seo_content(\n        search_query=\"search_query\",\n        keywords=\"keywords\",\n        title=\"title\",\n        company_url=\"company_url\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def seo_content(\n    self,\n    *,\n    search_query: str,\n    keywords: str,\n    title: str,\n    company_url: str,\n    example_id: typing.Optional[str] = None,\n    task_instructions: typing.Optional[str] = OMIT,\n    enable_html: typing.Optional[bool] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: typing.Optional[int] = OMIT,\n    enable_crosslinks: typing.Optional[bool] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    serp_search_location: typing.Optional[SerpSearchLocations] = OMIT,\n    scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,\n    serp_search_type: typing.Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: typing.Optional[str] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; SeoSummaryPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.seo_content(\n            search_query=\"search_query\",\n            keywords=\"keywords\",\n            title=\"title\",\n            company_url=\"company_url\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/SEOSummary/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"search_query\": search_query,\n            \"keywords\": keywords,\n            \"title\": title,\n            \"company_url\": company_url,\n            \"task_instructions\": task_instructions,\n            \"enable_html\": enable_html,\n            \"selected_model\": selected_model,\n            \"max_search_urls\": max_search_urls,\n            \"enable_crosslinks\": enable_crosslinks,\n            \"seed\": seed,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"serp_search_location\": serp_search_location,\n            \"scaleserp_locations\": scaleserp_locations,\n            \"serp_search_type\": serp_search_type,\n            \"scaleserp_search_field\": scaleserp_search_field,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                SeoSummaryPageOutput,\n                parse_obj_as(\n                    type_=SeoSummaryPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.seo_people_also_ask","title":"seo_people_also_ask  <code>async</code>","text":"<pre><code>seo_people_also_ask(\n    *,\n    search_query: str,\n    site_filter: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    query_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: Optional[int] = OMIT,\n    max_references: Optional[int] = OMIT,\n    max_context_words: Optional[int] = OMIT,\n    scroll_jump: Optional[int] = OMIT,\n    embedding_model: Optional[EmbeddingModels] = OMIT,\n    dense_weight: Optional[float] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    serp_search_location: Optional[\n        SerpSearchLocations\n    ] = OMIT,\n    scaleserp_locations: Optional[Sequence[str]] = OMIT,\n    serp_search_type: Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: Optional[str] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; RelatedQnAPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.seo_people_also_ask--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.seo_people_also_ask(\n        search_query=\"search_query\",\n        site_filter=\"site_filter\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def seo_people_also_ask(\n    self,\n    *,\n    search_query: str,\n    site_filter: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    query_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: typing.Optional[int] = OMIT,\n    max_references: typing.Optional[int] = OMIT,\n    max_context_words: typing.Optional[int] = OMIT,\n    scroll_jump: typing.Optional[int] = OMIT,\n    embedding_model: typing.Optional[EmbeddingModels] = OMIT,\n    dense_weight: typing.Optional[float] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    serp_search_location: typing.Optional[SerpSearchLocations] = OMIT,\n    scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,\n    serp_search_type: typing.Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: typing.Optional[str] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; RelatedQnAPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.seo_people_also_ask(\n            search_query=\"search_query\",\n            site_filter=\"site_filter\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/related-qna-maker/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"search_query\": search_query,\n            \"site_filter\": site_filter,\n            \"task_instructions\": task_instructions,\n            \"query_instructions\": query_instructions,\n            \"selected_model\": selected_model,\n            \"max_search_urls\": max_search_urls,\n            \"max_references\": max_references,\n            \"max_context_words\": max_context_words,\n            \"scroll_jump\": scroll_jump,\n            \"embedding_model\": embedding_model,\n            \"dense_weight\": dense_weight,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"serp_search_location\": serp_search_location,\n            \"scaleserp_locations\": scaleserp_locations,\n            \"serp_search_type\": serp_search_type,\n            \"scaleserp_search_field\": scaleserp_search_field,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                RelatedQnAPageOutput,\n                parse_obj_as(\n                    type_=RelatedQnAPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.seo_people_also_ask_doc","title":"seo_people_also_ask_doc  <code>async</code>","text":"<pre><code>seo_people_also_ask_doc(\n    *,\n    search_query: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    keyword_query: Optional[KeywordQuery] = OMIT,\n    documents: Optional[Sequence[str]] = OMIT,\n    max_references: Optional[int] = OMIT,\n    max_context_words: Optional[int] = OMIT,\n    scroll_jump: Optional[int] = OMIT,\n    doc_extract_url: Optional[str] = OMIT,\n    embedding_model: Optional[EmbeddingModels] = OMIT,\n    dense_weight: Optional[float] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    query_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    citation_style: Optional[CitationStyles] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    serp_search_location: Optional[\n        SerpSearchLocations\n    ] = OMIT,\n    scaleserp_locations: Optional[Sequence[str]] = OMIT,\n    serp_search_type: Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: Optional[str] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; RelatedQnADocPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.seo_people_also_ask_doc--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.seo_people_also_ask_doc(\n        search_query=\"search_query\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def seo_people_also_ask_doc(\n    self,\n    *,\n    search_query: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    keyword_query: typing.Optional[KeywordQuery] = OMIT,\n    documents: typing.Optional[typing.Sequence[str]] = OMIT,\n    max_references: typing.Optional[int] = OMIT,\n    max_context_words: typing.Optional[int] = OMIT,\n    scroll_jump: typing.Optional[int] = OMIT,\n    doc_extract_url: typing.Optional[str] = OMIT,\n    embedding_model: typing.Optional[EmbeddingModels] = OMIT,\n    dense_weight: typing.Optional[float] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    query_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    citation_style: typing.Optional[CitationStyles] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    serp_search_location: typing.Optional[SerpSearchLocations] = OMIT,\n    scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,\n    serp_search_type: typing.Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: typing.Optional[str] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; RelatedQnADocPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.seo_people_also_ask_doc(\n            search_query=\"search_query\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/related-qna-maker-doc/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"search_query\": search_query,\n            \"keyword_query\": keyword_query,\n            \"documents\": documents,\n            \"max_references\": max_references,\n            \"max_context_words\": max_context_words,\n            \"scroll_jump\": scroll_jump,\n            \"doc_extract_url\": doc_extract_url,\n            \"embedding_model\": embedding_model,\n            \"dense_weight\": dense_weight,\n            \"task_instructions\": task_instructions,\n            \"query_instructions\": query_instructions,\n            \"selected_model\": selected_model,\n            \"citation_style\": citation_style,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"serp_search_location\": serp_search_location,\n            \"scaleserp_locations\": scaleserp_locations,\n            \"serp_search_type\": serp_search_type,\n            \"scaleserp_search_field\": scaleserp_search_field,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                RelatedQnADocPageOutput,\n                parse_obj_as(\n                    type_=RelatedQnADocPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.smart_gpt","title":"smart_gpt  <code>async</code>","text":"<pre><code>smart_gpt(\n    *,\n    input_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    cot_prompt: Optional[str] = OMIT,\n    reflexion_prompt: Optional[str] = OMIT,\n    dera_prompt: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; SmartGptPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.smart_gpt--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.smart_gpt(\n        input_prompt=\"input_prompt\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def smart_gpt(\n    self,\n    *,\n    input_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    cot_prompt: typing.Optional[str] = OMIT,\n    reflexion_prompt: typing.Optional[str] = OMIT,\n    dera_prompt: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; SmartGptPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.smart_gpt(\n            input_prompt=\"input_prompt\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/SmartGPT/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"input_prompt\": input_prompt,\n            \"cot_prompt\": cot_prompt,\n            \"reflexion_prompt\": reflexion_prompt,\n            \"dera_prompt\": dera_prompt,\n            \"selected_model\": selected_model,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                SmartGptPageOutput,\n                parse_obj_as(\n                    type_=SmartGptPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.speech_recognition","title":"speech_recognition  <code>async</code>","text":"<pre><code>speech_recognition(\n    *,\n    documents: List[File],\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    selected_model: Optional[AsrModels] = OMIT,\n    language: Optional[str] = OMIT,\n    translation_model: Optional[TranslationModels] = OMIT,\n    output_format: Optional[AsrOutputFormat] = OMIT,\n    google_translate_target: Optional[str] = OMIT,\n    translation_source: Optional[str] = OMIT,\n    translation_target: Optional[str] = OMIT,\n    glossary_document: Optional[File] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; AsrPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.speech_recognition--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.speech_recognition()\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def speech_recognition(\n    self,\n    *,\n    documents: typing.List[core.File],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    selected_model: typing.Optional[AsrModels] = OMIT,\n    language: typing.Optional[str] = OMIT,\n    translation_model: typing.Optional[TranslationModels] = OMIT,\n    output_format: typing.Optional[AsrOutputFormat] = OMIT,\n    google_translate_target: typing.Optional[str] = OMIT,\n    translation_source: typing.Optional[str] = OMIT,\n    translation_target: typing.Optional[str] = OMIT,\n    glossary_document: typing.Optional[core.File] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; AsrPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.speech_recognition()\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/asr/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"selected_model\": selected_model,\n            \"language\": language,\n            \"translation_model\": translation_model,\n            \"output_format\": output_format,\n            \"google_translate_target\": google_translate_target,\n            \"translation_source\": translation_source,\n            \"translation_target\": translation_target,\n            \"settings\": settings,\n        },\n        files={\n            \"documents\": documents,\n            \"glossary_document\": glossary_document,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                AsrPageOutput,\n                parse_obj_as(\n                    type_=AsrPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.synthesize_data","title":"synthesize_data  <code>async</code>","text":"<pre><code>synthesize_data(\n    *,\n    documents: List[File],\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    sheet_url: Optional[File] = OMIT,\n    selected_asr_model: Optional[AsrModels] = OMIT,\n    google_translate_target: Optional[str] = OMIT,\n    glossary_document: Optional[File] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; DocExtractPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.synthesize_data--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.synthesize_data()\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def synthesize_data(\n    self,\n    *,\n    documents: typing.List[core.File],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    sheet_url: typing.Optional[core.File] = OMIT,\n    selected_asr_model: typing.Optional[AsrModels] = OMIT,\n    google_translate_target: typing.Optional[str] = OMIT,\n    glossary_document: typing.Optional[core.File] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; DocExtractPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.synthesize_data()\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/doc-extract/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"selected_asr_model\": selected_asr_model,\n            \"google_translate_target\": google_translate_target,\n            \"task_instructions\": task_instructions,\n            \"selected_model\": selected_model,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        files={\n            \"documents\": documents,\n            \"sheet_url\": sheet_url,\n            \"glossary_document\": glossary_document,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                DocExtractPageOutput,\n                parse_obj_as(\n                    type_=DocExtractPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.text_to_image","title":"text_to_image  <code>async</code>","text":"<pre><code>text_to_image(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    dall_e3quality: Optional[str] = OMIT,\n    dall_e3style: Optional[str] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    seed: Optional[int] = OMIT,\n    sd2upscaling: Optional[bool] = OMIT,\n    selected_models: Optional[\n        Sequence[TextToImageModels]\n    ] = OMIT,\n    scheduler: Optional[Schedulers] = OMIT,\n    edit_instruction: Optional[str] = OMIT,\n    image_guidance_scale: Optional[float] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; CompareText2ImgPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.text_to_image--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.text_to_image(\n        text_prompt=\"text_prompt\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def text_to_image(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    dall_e3quality: typing.Optional[str] = OMIT,\n    dall_e3style: typing.Optional[str] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    sd2upscaling: typing.Optional[bool] = OMIT,\n    selected_models: typing.Optional[typing.Sequence[TextToImageModels]] = OMIT,\n    scheduler: typing.Optional[Schedulers] = OMIT,\n    edit_instruction: typing.Optional[str] = OMIT,\n    image_guidance_scale: typing.Optional[float] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; CompareText2ImgPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.text_to_image(\n            text_prompt=\"text_prompt\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/CompareText2Img/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"negative_prompt\": negative_prompt,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"dall_e_3_quality\": dall_e3quality,\n            \"dall_e_3_style\": dall_e3style,\n            \"guidance_scale\": guidance_scale,\n            \"seed\": seed,\n            \"sd_2_upscaling\": sd2upscaling,\n            \"selected_models\": selected_models,\n            \"scheduler\": scheduler,\n            \"edit_instruction\": edit_instruction,\n            \"image_guidance_scale\": image_guidance_scale,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                CompareText2ImgPageOutput,\n                parse_obj_as(\n                    type_=CompareText2ImgPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.text_to_music","title":"text_to_music  <code>async</code>","text":"<pre><code>text_to_music(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    duration_sec: Optional[float] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    seed: Optional[int] = OMIT,\n    sd2upscaling: Optional[bool] = OMIT,\n    selected_models: Optional[\n        Sequence[Text2AudioModels]\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; Text2AudioPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.text_to_music--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.text_to_music(\n        text_prompt=\"text_prompt\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def text_to_music(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    duration_sec: typing.Optional[float] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    sd2upscaling: typing.Optional[bool] = OMIT,\n    selected_models: typing.Optional[typing.Sequence[Text2AudioModels]] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; Text2AudioPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.text_to_music(\n            text_prompt=\"text_prompt\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/text2audio/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"negative_prompt\": negative_prompt,\n            \"duration_sec\": duration_sec,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"guidance_scale\": guidance_scale,\n            \"seed\": seed,\n            \"sd_2_upscaling\": sd2upscaling,\n            \"selected_models\": selected_models,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                Text2AudioPageOutput,\n                parse_obj_as(\n                    type_=Text2AudioPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.text_to_speech","title":"text_to_speech  <code>async</code>","text":"<pre><code>text_to_speech(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    tts_provider: Optional[TextToSpeechProviders] = OMIT,\n    uberduck_voice_name: Optional[str] = OMIT,\n    uberduck_speaking_rate: Optional[float] = OMIT,\n    google_voice_name: Optional[str] = OMIT,\n    google_speaking_rate: Optional[float] = OMIT,\n    google_pitch: Optional[float] = OMIT,\n    bark_history_prompt: Optional[str] = OMIT,\n    elevenlabs_voice_name: Optional[str] = OMIT,\n    elevenlabs_api_key: Optional[str] = OMIT,\n    elevenlabs_voice_id: Optional[str] = OMIT,\n    elevenlabs_model: Optional[str] = OMIT,\n    elevenlabs_stability: Optional[float] = OMIT,\n    elevenlabs_similarity_boost: Optional[float] = OMIT,\n    elevenlabs_style: Optional[float] = OMIT,\n    elevenlabs_speaker_boost: Optional[bool] = OMIT,\n    azure_voice_name: Optional[str] = OMIT,\n    openai_voice_name: Optional[OpenAiTtsVoices] = OMIT,\n    openai_tts_model: Optional[OpenAiTtsModels] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; TextToSpeechPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.text_to_speech--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.text_to_speech(\n        text_prompt=\"text_prompt\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def text_to_speech(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    tts_provider: typing.Optional[TextToSpeechProviders] = OMIT,\n    uberduck_voice_name: typing.Optional[str] = OMIT,\n    uberduck_speaking_rate: typing.Optional[float] = OMIT,\n    google_voice_name: typing.Optional[str] = OMIT,\n    google_speaking_rate: typing.Optional[float] = OMIT,\n    google_pitch: typing.Optional[float] = OMIT,\n    bark_history_prompt: typing.Optional[str] = OMIT,\n    elevenlabs_voice_name: typing.Optional[str] = OMIT,\n    elevenlabs_api_key: typing.Optional[str] = OMIT,\n    elevenlabs_voice_id: typing.Optional[str] = OMIT,\n    elevenlabs_model: typing.Optional[str] = OMIT,\n    elevenlabs_stability: typing.Optional[float] = OMIT,\n    elevenlabs_similarity_boost: typing.Optional[float] = OMIT,\n    elevenlabs_style: typing.Optional[float] = OMIT,\n    elevenlabs_speaker_boost: typing.Optional[bool] = OMIT,\n    azure_voice_name: typing.Optional[str] = OMIT,\n    openai_voice_name: typing.Optional[OpenAiTtsVoices] = OMIT,\n    openai_tts_model: typing.Optional[OpenAiTtsModels] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; TextToSpeechPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.text_to_speech(\n            text_prompt=\"text_prompt\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/TextToSpeech/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"tts_provider\": tts_provider,\n            \"uberduck_voice_name\": uberduck_voice_name,\n            \"uberduck_speaking_rate\": uberduck_speaking_rate,\n            \"google_voice_name\": google_voice_name,\n            \"google_speaking_rate\": google_speaking_rate,\n            \"google_pitch\": google_pitch,\n            \"bark_history_prompt\": bark_history_prompt,\n            \"elevenlabs_voice_name\": elevenlabs_voice_name,\n            \"elevenlabs_api_key\": elevenlabs_api_key,\n            \"elevenlabs_voice_id\": elevenlabs_voice_id,\n            \"elevenlabs_model\": elevenlabs_model,\n            \"elevenlabs_stability\": elevenlabs_stability,\n            \"elevenlabs_similarity_boost\": elevenlabs_similarity_boost,\n            \"elevenlabs_style\": elevenlabs_style,\n            \"elevenlabs_speaker_boost\": elevenlabs_speaker_boost,\n            \"azure_voice_name\": azure_voice_name,\n            \"openai_voice_name\": openai_voice_name,\n            \"openai_tts_model\": openai_tts_model,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                TextToSpeechPageOutput,\n                parse_obj_as(\n                    type_=TextToSpeechPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.translate","title":"translate  <code>async</code>","text":"<pre><code>translate(\n    *,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    texts: Optional[List[str]] = OMIT,\n    selected_model: Optional[TranslationModels] = OMIT,\n    translation_source: Optional[str] = OMIT,\n    translation_target: Optional[str] = OMIT,\n    glossary_document: Optional[File] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; TranslationPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.translate--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.translate()\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def translate(\n    self,\n    *,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    texts: typing.Optional[typing.List[str]] = OMIT,\n    selected_model: typing.Optional[TranslationModels] = OMIT,\n    translation_source: typing.Optional[str] = OMIT,\n    translation_target: typing.Optional[str] = OMIT,\n    glossary_document: typing.Optional[core.File] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; TranslationPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.translate()\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/translate/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"texts\": texts,\n            \"selected_model\": selected_model,\n            \"translation_source\": translation_source,\n            \"translation_target\": translation_target,\n            \"settings\": settings,\n        },\n        files={\n            \"glossary_document\": glossary_document,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                TranslationPageOutput,\n                parse_obj_as(\n                    type_=TranslationPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.upscale","title":"upscale  <code>async</code>","text":"<pre><code>upscale(\n    *,\n    scale: int,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    input_image: Optional[File] = OMIT,\n    input_video: Optional[File] = OMIT,\n    selected_models: Optional[List[UpscalerModels]] = OMIT,\n    selected_bg_model: Optional[\n        Literal[\"real_esrgan_x2\"]\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; CompareUpscalerPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.upscale--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.upscale(\n        scale=1,\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def upscale(\n    self,\n    *,\n    scale: int,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    input_image: typing.Optional[core.File] = OMIT,\n    input_video: typing.Optional[core.File] = OMIT,\n    selected_models: typing.Optional[typing.List[UpscalerModels]] = OMIT,\n    selected_bg_model: typing.Optional[typing.Literal[\"real_esrgan_x2\"]] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; CompareUpscalerPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.upscale(\n            scale=1,\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/compare-ai-upscalers/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"scale\": scale,\n            \"selected_models\": selected_models,\n            \"selected_bg_model\": selected_bg_model,\n            \"settings\": settings,\n        },\n        files={\n            \"input_image\": input_image,\n            \"input_video\": input_video,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                CompareUpscalerPageOutput,\n                parse_obj_as(\n                    type_=CompareUpscalerPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.web_search_llm","title":"web_search_llm  <code>async</code>","text":"<pre><code>web_search_llm(\n    *,\n    search_query: str,\n    site_filter: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    query_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: Optional[int] = OMIT,\n    max_references: Optional[int] = OMIT,\n    max_context_words: Optional[int] = OMIT,\n    scroll_jump: Optional[int] = OMIT,\n    embedding_model: Optional[EmbeddingModels] = OMIT,\n    dense_weight: Optional[float] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    serp_search_location: Optional[\n        SerpSearchLocations\n    ] = OMIT,\n    scaleserp_locations: Optional[Sequence[str]] = OMIT,\n    serp_search_type: Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: Optional[str] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; GoogleGptPageOutput\n</code></pre>"},{"location":"reference/gooey/#gooey.AsyncGooey.web_search_llm--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.web_search_llm(\n        search_query=\"search_query\",\n        site_filter=\"site_filter\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def web_search_llm(\n    self,\n    *,\n    search_query: str,\n    site_filter: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    query_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: typing.Optional[int] = OMIT,\n    max_references: typing.Optional[int] = OMIT,\n    max_context_words: typing.Optional[int] = OMIT,\n    scroll_jump: typing.Optional[int] = OMIT,\n    embedding_model: typing.Optional[EmbeddingModels] = OMIT,\n    dense_weight: typing.Optional[float] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    serp_search_location: typing.Optional[SerpSearchLocations] = OMIT,\n    scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,\n    serp_search_type: typing.Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: typing.Optional[str] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; GoogleGptPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.web_search_llm(\n            search_query=\"search_query\",\n            site_filter=\"site_filter\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/google-gpt/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"search_query\": search_query,\n            \"site_filter\": site_filter,\n            \"task_instructions\": task_instructions,\n            \"query_instructions\": query_instructions,\n            \"selected_model\": selected_model,\n            \"max_search_urls\": max_search_urls,\n            \"max_references\": max_references,\n            \"max_context_words\": max_context_words,\n            \"scroll_jump\": scroll_jump,\n            \"embedding_model\": embedding_model,\n            \"dense_weight\": dense_weight,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"serp_search_location\": serp_search_location,\n            \"scaleserp_locations\": scaleserp_locations,\n            \"serp_search_type\": serp_search_type,\n            \"scaleserp_search_field\": scaleserp_search_field,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                GoogleGptPageOutput,\n                parse_obj_as(\n                    type_=GoogleGptPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/","title":"gooey.client","text":""},{"location":"reference/gooey/client/#gooey.client","title":"client","text":""},{"location":"reference/gooey/client/#gooey.client.AsyncGooey","title":"AsyncGooey","text":"<pre><code>AsyncGooey(\n    *,\n    base_url: Optional[str] = None,\n    environment: GooeyEnvironment = GooeyEnvironment.DEFAULT,\n    api_key: Optional[\n        Union[str, Callable[[], str]]\n    ] = os.getenv(\"GOOEY_API_KEY\"),\n    timeout: Optional[float] = None,\n    follow_redirects: Optional[bool] = True,\n    httpx_client: Optional[AsyncClient] = None\n)\n</code></pre> <p>Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.</p>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey--examples","title":"Examples","text":"<pre><code>from gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def __init__(\n    self,\n    *,\n    base_url: typing.Optional[str] = None,\n    environment: GooeyEnvironment = GooeyEnvironment.DEFAULT,\n    api_key: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv(\"GOOEY_API_KEY\"),\n    timeout: typing.Optional[float] = None,\n    follow_redirects: typing.Optional[bool] = True,\n    httpx_client: typing.Optional[httpx.AsyncClient] = None,\n):\n    _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None\n    if api_key is None:\n        raise ApiError(body=\"The client must be instantiated be either passing in api_key or setting GOOEY_API_KEY\")\n    self._client_wrapper = AsyncClientWrapper(\n        base_url=_get_base_url(base_url=base_url, environment=environment),\n        api_key=api_key,\n        httpx_client=(\n            httpx_client\n            if httpx_client is not None\n            else (\n                httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)\n                if follow_redirects is not None\n                else httpx.AsyncClient(timeout=_defaulted_timeout)\n            )\n        ),\n        timeout=_defaulted_timeout,\n    )\n    self.copilot = AsyncCopilotClient(client_wrapper=self._client_wrapper)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.animate","title":"animate  <code>async</code>","text":"<pre><code>animate(\n    *,\n    animation_prompts: Sequence[AnimationPrompt],\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    max_frames: Optional[int] = OMIT,\n    selected_model: Optional[AnimationModels] = OMIT,\n    animation_mode: Optional[str] = OMIT,\n    zoom: Optional[str] = OMIT,\n    translation_x: Optional[str] = OMIT,\n    translation_y: Optional[str] = OMIT,\n    rotation3d_x: Optional[str] = OMIT,\n    rotation3d_y: Optional[str] = OMIT,\n    rotation3d_z: Optional[str] = OMIT,\n    fps: Optional[int] = OMIT,\n    seed: Optional[int] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; DeforumSdPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.animate--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AnimationPrompt, AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.animate(\n        animation_prompts=[\n            AnimationPrompt(\n                frame=\"frame\",\n                prompt=\"prompt\",\n            )\n        ],\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def animate(\n    self,\n    *,\n    animation_prompts: typing.Sequence[AnimationPrompt],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    max_frames: typing.Optional[int] = OMIT,\n    selected_model: typing.Optional[AnimationModels] = OMIT,\n    animation_mode: typing.Optional[str] = OMIT,\n    zoom: typing.Optional[str] = OMIT,\n    translation_x: typing.Optional[str] = OMIT,\n    translation_y: typing.Optional[str] = OMIT,\n    rotation3d_x: typing.Optional[str] = OMIT,\n    rotation3d_y: typing.Optional[str] = OMIT,\n    rotation3d_z: typing.Optional[str] = OMIT,\n    fps: typing.Optional[int] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; DeforumSdPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AnimationPrompt, AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.animate(\n            animation_prompts=[\n                AnimationPrompt(\n                    frame=\"frame\",\n                    prompt=\"prompt\",\n                )\n            ],\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/DeforumSD/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"animation_prompts\": animation_prompts,\n            \"max_frames\": max_frames,\n            \"selected_model\": selected_model,\n            \"animation_mode\": animation_mode,\n            \"zoom\": zoom,\n            \"translation_x\": translation_x,\n            \"translation_y\": translation_y,\n            \"rotation_3d_x\": rotation3d_x,\n            \"rotation_3d_y\": rotation3d_y,\n            \"rotation_3d_z\": rotation3d_z,\n            \"fps\": fps,\n            \"seed\": seed,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                DeforumSdPageOutput,\n                parse_obj_as(\n                    type_=DeforumSdPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.bulk_run","title":"bulk_run  <code>async</code>","text":"<pre><code>bulk_run(\n    *,\n    documents: List[File],\n    run_urls: List[str],\n    input_columns: Dict[str, str],\n    output_columns: Dict[str, str],\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    eval_urls: Optional[List[str]] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; BulkRunnerPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.bulk_run--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.bulk_run(\n        run_urls=[\"run_urls\"],\n        input_columns={\"key\": \"value\"},\n        output_columns={\"key\": \"value\"},\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def bulk_run(\n    self,\n    *,\n    documents: typing.List[core.File],\n    run_urls: typing.List[str],\n    input_columns: typing.Dict[str, str],\n    output_columns: typing.Dict[str, str],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    eval_urls: typing.Optional[typing.List[str]] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; BulkRunnerPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.bulk_run(\n            run_urls=[\"run_urls\"],\n            input_columns={\"key\": \"value\"},\n            output_columns={\"key\": \"value\"},\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/bulk-runner/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"run_urls\": run_urls,\n            \"input_columns\": input_columns,\n            \"output_columns\": output_columns,\n            \"eval_urls\": eval_urls,\n            \"settings\": settings,\n        },\n        files={\n            \"documents\": documents,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                BulkRunnerPageOutput,\n                parse_obj_as(\n                    type_=BulkRunnerPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.doc_summary","title":"doc_summary  <code>async</code>","text":"<pre><code>doc_summary(\n    *,\n    documents: List[File],\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    merge_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    chain_type: Optional[CombineDocumentsChains] = OMIT,\n    selected_asr_model: Optional[AsrModels] = OMIT,\n    google_translate_target: Optional[str] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; DocSummaryPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.doc_summary--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.doc_summary()\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def doc_summary(\n    self,\n    *,\n    documents: typing.List[core.File],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    merge_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    chain_type: typing.Optional[CombineDocumentsChains] = OMIT,\n    selected_asr_model: typing.Optional[AsrModels] = OMIT,\n    google_translate_target: typing.Optional[str] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; DocSummaryPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.doc_summary()\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/doc-summary/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"task_instructions\": task_instructions,\n            \"merge_instructions\": merge_instructions,\n            \"selected_model\": selected_model,\n            \"chain_type\": chain_type,\n            \"selected_asr_model\": selected_asr_model,\n            \"google_translate_target\": google_translate_target,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        files={\n            \"documents\": documents,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                DocSummaryPageOutput,\n                parse_obj_as(\n                    type_=DocSummaryPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.embed","title":"embed  <code>async</code>","text":"<pre><code>embed(\n    *,\n    texts: Sequence[str],\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    selected_model: Optional[EmbeddingModels] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; EmbeddingsPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.embed--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.embed(\n        texts=[\"texts\"],\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def embed(\n    self,\n    *,\n    texts: typing.Sequence[str],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    selected_model: typing.Optional[EmbeddingModels] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; EmbeddingsPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.embed(\n            texts=[\"texts\"],\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/embeddings/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"texts\": texts,\n            \"selected_model\": selected_model,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                EmbeddingsPageOutput,\n                parse_obj_as(\n                    type_=EmbeddingsPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.eval","title":"eval  <code>async</code>","text":"<pre><code>eval(\n    *,\n    documents: Sequence[str],\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    eval_prompts: Optional[Sequence[EvalPrompt]] = OMIT,\n    agg_functions: Optional[Sequence[AggFunction]] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; BulkEvalPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.eval--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.eval(\n        documents=[\"documents\"],\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def eval(\n    self,\n    *,\n    documents: typing.Sequence[str],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    eval_prompts: typing.Optional[typing.Sequence[EvalPrompt]] = OMIT,\n    agg_functions: typing.Optional[typing.Sequence[AggFunction]] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; BulkEvalPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.eval(\n            documents=[\"documents\"],\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/bulk-eval/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"documents\": documents,\n            \"eval_prompts\": eval_prompts,\n            \"agg_functions\": agg_functions,\n            \"selected_model\": selected_model,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                BulkEvalPageOutput,\n                parse_obj_as(\n                    type_=BulkEvalPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.functions","title":"functions  <code>async</code>","text":"<pre><code>functions(\n    *,\n    example_id: Optional[str] = None,\n    code: Optional[str] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; FunctionsPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.functions--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.functions()\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def functions(\n    self,\n    *,\n    example_id: typing.Optional[str] = None,\n    code: typing.Optional[str] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; FunctionsPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.functions()\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/functions/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"code\": code,\n            \"variables\": variables,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                FunctionsPageOutput,\n                parse_obj_as(\n                    type_=FunctionsPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.get_balance","title":"get_balance  <code>async</code>","text":"<pre><code>get_balance(\n    *, request_options: Optional[RequestOptions] = None\n) -&gt; BalanceResponse\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.get_balance--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.get_balance()\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def get_balance(self, *, request_options: typing.Optional[RequestOptions] = None) -&gt; BalanceResponse:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.get_balance()\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v1/balance/\",\n        method=\"GET\",\n        request_options=request_options,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                BalanceResponse,\n                parse_obj_as(\n                    type_=BalanceResponse,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.image_from_email","title":"image_from_email  <code>async</code>","text":"<pre><code>image_from_email(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    email_address: Optional[str] = OMIT,\n    twitter_handle: Optional[str] = OMIT,\n    face_scale: Optional[float] = OMIT,\n    face_pos_x: Optional[float] = OMIT,\n    face_pos_y: Optional[float] = OMIT,\n    selected_model: Optional[InpaintingModels] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    upscale_factor: Optional[float] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    should_send_email: Optional[bool] = OMIT,\n    email_from: Optional[str] = OMIT,\n    email_cc: Optional[str] = OMIT,\n    email_bcc: Optional[str] = OMIT,\n    email_subject: Optional[str] = OMIT,\n    email_body: Optional[str] = OMIT,\n    email_body_enable_html: Optional[bool] = OMIT,\n    fallback_email_body: Optional[str] = OMIT,\n    seed: Optional[int] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; EmailFaceInpaintingPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.image_from_email--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.image_from_email(\n        email_address=\"sean@dara.network\",\n        text_prompt=\"winter's day in paris\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def image_from_email(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    email_address: typing.Optional[str] = OMIT,\n    twitter_handle: typing.Optional[str] = OMIT,\n    face_scale: typing.Optional[float] = OMIT,\n    face_pos_x: typing.Optional[float] = OMIT,\n    face_pos_y: typing.Optional[float] = OMIT,\n    selected_model: typing.Optional[InpaintingModels] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    upscale_factor: typing.Optional[float] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    should_send_email: typing.Optional[bool] = OMIT,\n    email_from: typing.Optional[str] = OMIT,\n    email_cc: typing.Optional[str] = OMIT,\n    email_bcc: typing.Optional[str] = OMIT,\n    email_subject: typing.Optional[str] = OMIT,\n    email_body: typing.Optional[str] = OMIT,\n    email_body_enable_html: typing.Optional[bool] = OMIT,\n    fallback_email_body: typing.Optional[str] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; EmailFaceInpaintingPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.image_from_email(\n            email_address=\"sean@dara.network\",\n            text_prompt=\"winter's day in paris\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/EmailFaceInpainting/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"email_address\": email_address,\n            \"twitter_handle\": twitter_handle,\n            \"text_prompt\": text_prompt,\n            \"face_scale\": face_scale,\n            \"face_pos_x\": face_pos_x,\n            \"face_pos_y\": face_pos_y,\n            \"selected_model\": selected_model,\n            \"negative_prompt\": negative_prompt,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"upscale_factor\": upscale_factor,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"guidance_scale\": guidance_scale,\n            \"should_send_email\": should_send_email,\n            \"email_from\": email_from,\n            \"email_cc\": email_cc,\n            \"email_bcc\": email_bcc,\n            \"email_subject\": email_subject,\n            \"email_body\": email_body,\n            \"email_body_enable_html\": email_body_enable_html,\n            \"fallback_email_body\": fallback_email_body,\n            \"seed\": seed,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                EmailFaceInpaintingPageOutput,\n                parse_obj_as(\n                    type_=EmailFaceInpaintingPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.image_from_web_search","title":"image_from_web_search  <code>async</code>","text":"<pre><code>image_from_web_search(\n    *,\n    search_query: str,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    serp_search_location: Optional[\n        SerpSearchLocations\n    ] = OMIT,\n    scaleserp_locations: Optional[Sequence[str]] = OMIT,\n    selected_model: Optional[ImageToImageModels] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    prompt_strength: Optional[float] = OMIT,\n    sd2upscaling: Optional[bool] = OMIT,\n    seed: Optional[int] = OMIT,\n    image_guidance_scale: Optional[float] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; GoogleImageGenPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.image_from_web_search--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.image_from_web_search(\n        search_query=\"search_query\",\n        text_prompt=\"text_prompt\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def image_from_web_search(\n    self,\n    *,\n    search_query: str,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    serp_search_location: typing.Optional[SerpSearchLocations] = OMIT,\n    scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,\n    selected_model: typing.Optional[ImageToImageModels] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    prompt_strength: typing.Optional[float] = OMIT,\n    sd2upscaling: typing.Optional[bool] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    image_guidance_scale: typing.Optional[float] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; GoogleImageGenPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.image_from_web_search(\n            search_query=\"search_query\",\n            text_prompt=\"text_prompt\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/GoogleImageGen/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"serp_search_location\": serp_search_location,\n            \"scaleserp_locations\": scaleserp_locations,\n            \"search_query\": search_query,\n            \"text_prompt\": text_prompt,\n            \"selected_model\": selected_model,\n            \"negative_prompt\": negative_prompt,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"guidance_scale\": guidance_scale,\n            \"prompt_strength\": prompt_strength,\n            \"sd_2_upscaling\": sd2upscaling,\n            \"seed\": seed,\n            \"image_guidance_scale\": image_guidance_scale,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                GoogleImageGenPageOutput,\n                parse_obj_as(\n                    type_=GoogleImageGenPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.lipsync","title":"lipsync  <code>async</code>","text":"<pre><code>lipsync(\n    *,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    input_face: Optional[File] = OMIT,\n    face_padding_top: Optional[int] = OMIT,\n    face_padding_bottom: Optional[int] = OMIT,\n    face_padding_left: Optional[int] = OMIT,\n    face_padding_right: Optional[int] = OMIT,\n    sadtalker_settings: Optional[SadTalkerSettings] = OMIT,\n    selected_model: Optional[LipsyncModels] = OMIT,\n    input_audio: Optional[File] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; LipsyncPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.lipsync--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.lipsync()\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def lipsync(\n    self,\n    *,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    input_face: typing.Optional[core.File] = OMIT,\n    face_padding_top: typing.Optional[int] = OMIT,\n    face_padding_bottom: typing.Optional[int] = OMIT,\n    face_padding_left: typing.Optional[int] = OMIT,\n    face_padding_right: typing.Optional[int] = OMIT,\n    sadtalker_settings: typing.Optional[SadTalkerSettings] = OMIT,\n    selected_model: typing.Optional[LipsyncModels] = OMIT,\n    input_audio: typing.Optional[core.File] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; LipsyncPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.lipsync()\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/Lipsync/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"face_padding_top\": face_padding_top,\n            \"face_padding_bottom\": face_padding_bottom,\n            \"face_padding_left\": face_padding_left,\n            \"face_padding_right\": face_padding_right,\n            \"sadtalker_settings\": sadtalker_settings,\n            \"selected_model\": selected_model,\n            \"settings\": settings,\n        },\n        files={\n            \"input_face\": input_face,\n            \"input_audio\": input_audio,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                LipsyncPageOutput,\n                parse_obj_as(\n                    type_=LipsyncPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.lipsync_tts","title":"lipsync_tts  <code>async</code>","text":"<pre><code>lipsync_tts(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    tts_provider: Optional[TextToSpeechProviders] = OMIT,\n    uberduck_voice_name: Optional[str] = OMIT,\n    uberduck_speaking_rate: Optional[float] = OMIT,\n    google_voice_name: Optional[str] = OMIT,\n    google_speaking_rate: Optional[float] = OMIT,\n    google_pitch: Optional[float] = OMIT,\n    bark_history_prompt: Optional[str] = OMIT,\n    elevenlabs_voice_name: Optional[str] = OMIT,\n    elevenlabs_api_key: Optional[str] = OMIT,\n    elevenlabs_voice_id: Optional[str] = OMIT,\n    elevenlabs_model: Optional[str] = OMIT,\n    elevenlabs_stability: Optional[float] = OMIT,\n    elevenlabs_similarity_boost: Optional[float] = OMIT,\n    elevenlabs_style: Optional[float] = OMIT,\n    elevenlabs_speaker_boost: Optional[bool] = OMIT,\n    azure_voice_name: Optional[str] = OMIT,\n    openai_voice_name: Optional[OpenAiTtsVoices] = OMIT,\n    openai_tts_model: Optional[OpenAiTtsModels] = OMIT,\n    input_face: Optional[File] = OMIT,\n    face_padding_top: Optional[int] = OMIT,\n    face_padding_bottom: Optional[int] = OMIT,\n    face_padding_left: Optional[int] = OMIT,\n    face_padding_right: Optional[int] = OMIT,\n    sadtalker_settings: Optional[SadTalkerSettings] = OMIT,\n    selected_model: Optional[LipsyncModels] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; LipsyncTtsPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.lipsync_tts--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.lipsync_tts(\n        text_prompt=\"text_prompt\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def lipsync_tts(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    tts_provider: typing.Optional[TextToSpeechProviders] = OMIT,\n    uberduck_voice_name: typing.Optional[str] = OMIT,\n    uberduck_speaking_rate: typing.Optional[float] = OMIT,\n    google_voice_name: typing.Optional[str] = OMIT,\n    google_speaking_rate: typing.Optional[float] = OMIT,\n    google_pitch: typing.Optional[float] = OMIT,\n    bark_history_prompt: typing.Optional[str] = OMIT,\n    elevenlabs_voice_name: typing.Optional[str] = OMIT,\n    elevenlabs_api_key: typing.Optional[str] = OMIT,\n    elevenlabs_voice_id: typing.Optional[str] = OMIT,\n    elevenlabs_model: typing.Optional[str] = OMIT,\n    elevenlabs_stability: typing.Optional[float] = OMIT,\n    elevenlabs_similarity_boost: typing.Optional[float] = OMIT,\n    elevenlabs_style: typing.Optional[float] = OMIT,\n    elevenlabs_speaker_boost: typing.Optional[bool] = OMIT,\n    azure_voice_name: typing.Optional[str] = OMIT,\n    openai_voice_name: typing.Optional[OpenAiTtsVoices] = OMIT,\n    openai_tts_model: typing.Optional[OpenAiTtsModels] = OMIT,\n    input_face: typing.Optional[core.File] = OMIT,\n    face_padding_top: typing.Optional[int] = OMIT,\n    face_padding_bottom: typing.Optional[int] = OMIT,\n    face_padding_left: typing.Optional[int] = OMIT,\n    face_padding_right: typing.Optional[int] = OMIT,\n    sadtalker_settings: typing.Optional[SadTalkerSettings] = OMIT,\n    selected_model: typing.Optional[LipsyncModels] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; LipsyncTtsPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.lipsync_tts(\n            text_prompt=\"text_prompt\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/LipsyncTTS/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"tts_provider\": tts_provider,\n            \"uberduck_voice_name\": uberduck_voice_name,\n            \"uberduck_speaking_rate\": uberduck_speaking_rate,\n            \"google_voice_name\": google_voice_name,\n            \"google_speaking_rate\": google_speaking_rate,\n            \"google_pitch\": google_pitch,\n            \"bark_history_prompt\": bark_history_prompt,\n            \"elevenlabs_voice_name\": elevenlabs_voice_name,\n            \"elevenlabs_api_key\": elevenlabs_api_key,\n            \"elevenlabs_voice_id\": elevenlabs_voice_id,\n            \"elevenlabs_model\": elevenlabs_model,\n            \"elevenlabs_stability\": elevenlabs_stability,\n            \"elevenlabs_similarity_boost\": elevenlabs_similarity_boost,\n            \"elevenlabs_style\": elevenlabs_style,\n            \"elevenlabs_speaker_boost\": elevenlabs_speaker_boost,\n            \"azure_voice_name\": azure_voice_name,\n            \"openai_voice_name\": openai_voice_name,\n            \"openai_tts_model\": openai_tts_model,\n            \"face_padding_top\": face_padding_top,\n            \"face_padding_bottom\": face_padding_bottom,\n            \"face_padding_left\": face_padding_left,\n            \"face_padding_right\": face_padding_right,\n            \"sadtalker_settings\": sadtalker_settings,\n            \"selected_model\": selected_model,\n            \"settings\": settings,\n        },\n        files={\n            \"input_face\": input_face,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                LipsyncTtsPageOutput,\n                parse_obj_as(\n                    type_=LipsyncTtsPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.llm","title":"llm  <code>async</code>","text":"<pre><code>llm(\n    *,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    input_prompt: Optional[str] = OMIT,\n    selected_models: Optional[\n        Sequence[LargeLanguageModels]\n    ] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; CompareLlmPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.llm--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.llm()\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def llm(\n    self,\n    *,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    input_prompt: typing.Optional[str] = OMIT,\n    selected_models: typing.Optional[typing.Sequence[LargeLanguageModels]] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; CompareLlmPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.llm()\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/CompareLLM/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"input_prompt\": input_prompt,\n            \"selected_models\": selected_models,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                CompareLlmPageOutput,\n                parse_obj_as(\n                    type_=CompareLlmPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.personalize_email","title":"personalize_email  <code>async</code>","text":"<pre><code>personalize_email(\n    *,\n    email_address: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    input_prompt: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; SocialLookupEmailPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.personalize_email--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.personalize_email(\n        email_address=\"email_address\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def personalize_email(\n    self,\n    *,\n    email_address: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    input_prompt: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; SocialLookupEmailPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.personalize_email(\n            email_address=\"email_address\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/SocialLookupEmail/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"email_address\": email_address,\n            \"input_prompt\": input_prompt,\n            \"selected_model\": selected_model,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                SocialLookupEmailPageOutput,\n                parse_obj_as(\n                    type_=SocialLookupEmailPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.portrait","title":"portrait  <code>async</code>","text":"<pre><code>portrait(\n    *,\n    input_image: File,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    face_scale: Optional[float] = OMIT,\n    face_pos_x: Optional[float] = OMIT,\n    face_pos_y: Optional[float] = OMIT,\n    selected_model: Optional[InpaintingModels] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    upscale_factor: Optional[float] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    seed: Optional[int] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; FaceInpaintingPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.portrait--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.portrait(\n        text_prompt=\"text_prompt\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def portrait(\n    self,\n    *,\n    input_image: core.File,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    face_scale: typing.Optional[float] = OMIT,\n    face_pos_x: typing.Optional[float] = OMIT,\n    face_pos_y: typing.Optional[float] = OMIT,\n    selected_model: typing.Optional[InpaintingModels] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    upscale_factor: typing.Optional[float] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; FaceInpaintingPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.portrait(\n            text_prompt=\"text_prompt\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/FaceInpainting/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"face_scale\": face_scale,\n            \"face_pos_x\": face_pos_x,\n            \"face_pos_y\": face_pos_y,\n            \"selected_model\": selected_model,\n            \"negative_prompt\": negative_prompt,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"upscale_factor\": upscale_factor,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"guidance_scale\": guidance_scale,\n            \"seed\": seed,\n            \"settings\": settings,\n        },\n        files={\n            \"input_image\": input_image,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                FaceInpaintingPageOutput,\n                parse_obj_as(\n                    type_=FaceInpaintingPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.product_image","title":"product_image  <code>async</code>","text":"<pre><code>product_image(\n    *,\n    input_image: File,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    obj_scale: Optional[float] = OMIT,\n    obj_pos_x: Optional[float] = OMIT,\n    obj_pos_y: Optional[float] = OMIT,\n    mask_threshold: Optional[float] = OMIT,\n    selected_model: Optional[InpaintingModels] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    sd2upscaling: Optional[bool] = OMIT,\n    seed: Optional[int] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; ObjectInpaintingPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.product_image--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.product_image(\n        text_prompt=\"text_prompt\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def product_image(\n    self,\n    *,\n    input_image: core.File,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    obj_scale: typing.Optional[float] = OMIT,\n    obj_pos_x: typing.Optional[float] = OMIT,\n    obj_pos_y: typing.Optional[float] = OMIT,\n    mask_threshold: typing.Optional[float] = OMIT,\n    selected_model: typing.Optional[InpaintingModels] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    sd2upscaling: typing.Optional[bool] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; ObjectInpaintingPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.product_image(\n            text_prompt=\"text_prompt\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/ObjectInpainting/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"obj_scale\": obj_scale,\n            \"obj_pos_x\": obj_pos_x,\n            \"obj_pos_y\": obj_pos_y,\n            \"mask_threshold\": mask_threshold,\n            \"selected_model\": selected_model,\n            \"negative_prompt\": negative_prompt,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"guidance_scale\": guidance_scale,\n            \"sd_2_upscaling\": sd2upscaling,\n            \"seed\": seed,\n            \"settings\": settings,\n        },\n        files={\n            \"input_image\": input_image,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                ObjectInpaintingPageOutput,\n                parse_obj_as(\n                    type_=ObjectInpaintingPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.qr_code","title":"qr_code  <code>async</code>","text":"<pre><code>qr_code(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    qr_code_data: Optional[str] = OMIT,\n    qr_code_input_image: Optional[File] = OMIT,\n    qr_code_vcard: Optional[Vcard] = OMIT,\n    qr_code_file: Optional[File] = OMIT,\n    use_url_shortener: Optional[bool] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    image_prompt: Optional[str] = OMIT,\n    image_prompt_controlnet_models: Optional[\n        List[ControlNetModels]\n    ] = OMIT,\n    image_prompt_strength: Optional[float] = OMIT,\n    image_prompt_scale: Optional[float] = OMIT,\n    image_prompt_pos_x: Optional[float] = OMIT,\n    image_prompt_pos_y: Optional[float] = OMIT,\n    selected_model: Optional[TextToImageModels] = OMIT,\n    selected_controlnet_model: Optional[\n        List[ControlNetModels]\n    ] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    controlnet_conditioning_scale: Optional[\n        List[float]\n    ] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    scheduler: Optional[Schedulers] = OMIT,\n    seed: Optional[int] = OMIT,\n    obj_scale: Optional[float] = OMIT,\n    obj_pos_x: Optional[float] = OMIT,\n    obj_pos_y: Optional[float] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; QrCodeGeneratorPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.qr_code--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.qr_code(\n        text_prompt=\"text_prompt\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def qr_code(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    qr_code_data: typing.Optional[str] = OMIT,\n    qr_code_input_image: typing.Optional[core.File] = OMIT,\n    qr_code_vcard: typing.Optional[Vcard] = OMIT,\n    qr_code_file: typing.Optional[core.File] = OMIT,\n    use_url_shortener: typing.Optional[bool] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    image_prompt: typing.Optional[str] = OMIT,\n    image_prompt_controlnet_models: typing.Optional[typing.List[ControlNetModels]] = OMIT,\n    image_prompt_strength: typing.Optional[float] = OMIT,\n    image_prompt_scale: typing.Optional[float] = OMIT,\n    image_prompt_pos_x: typing.Optional[float] = OMIT,\n    image_prompt_pos_y: typing.Optional[float] = OMIT,\n    selected_model: typing.Optional[TextToImageModels] = OMIT,\n    selected_controlnet_model: typing.Optional[typing.List[ControlNetModels]] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    controlnet_conditioning_scale: typing.Optional[typing.List[float]] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    scheduler: typing.Optional[Schedulers] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    obj_scale: typing.Optional[float] = OMIT,\n    obj_pos_x: typing.Optional[float] = OMIT,\n    obj_pos_y: typing.Optional[float] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; QrCodeGeneratorPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.qr_code(\n            text_prompt=\"text_prompt\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/art-qr-code/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"qr_code_data\": qr_code_data,\n            \"qr_code_vcard\": qr_code_vcard,\n            \"use_url_shortener\": use_url_shortener,\n            \"text_prompt\": text_prompt,\n            \"negative_prompt\": negative_prompt,\n            \"image_prompt\": image_prompt,\n            \"image_prompt_controlnet_models\": image_prompt_controlnet_models,\n            \"image_prompt_strength\": image_prompt_strength,\n            \"image_prompt_scale\": image_prompt_scale,\n            \"image_prompt_pos_x\": image_prompt_pos_x,\n            \"image_prompt_pos_y\": image_prompt_pos_y,\n            \"selected_model\": selected_model,\n            \"selected_controlnet_model\": selected_controlnet_model,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"guidance_scale\": guidance_scale,\n            \"controlnet_conditioning_scale\": controlnet_conditioning_scale,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"scheduler\": scheduler,\n            \"seed\": seed,\n            \"obj_scale\": obj_scale,\n            \"obj_pos_x\": obj_pos_x,\n            \"obj_pos_y\": obj_pos_y,\n            \"settings\": settings,\n        },\n        files={\n            \"qr_code_input_image\": qr_code_input_image,\n            \"qr_code_file\": qr_code_file,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                QrCodeGeneratorPageOutput,\n                parse_obj_as(\n                    type_=QrCodeGeneratorPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.rag","title":"rag  <code>async</code>","text":"<pre><code>rag(\n    *,\n    search_query: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    keyword_query: Optional[KeywordQuery] = OMIT,\n    documents: Optional[Sequence[str]] = OMIT,\n    max_references: Optional[int] = OMIT,\n    max_context_words: Optional[int] = OMIT,\n    scroll_jump: Optional[int] = OMIT,\n    doc_extract_url: Optional[str] = OMIT,\n    embedding_model: Optional[EmbeddingModels] = OMIT,\n    dense_weight: Optional[float] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    query_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    citation_style: Optional[CitationStyles] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; DocSearchPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.rag--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.rag(\n        search_query=\"search_query\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def rag(\n    self,\n    *,\n    search_query: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    keyword_query: typing.Optional[KeywordQuery] = OMIT,\n    documents: typing.Optional[typing.Sequence[str]] = OMIT,\n    max_references: typing.Optional[int] = OMIT,\n    max_context_words: typing.Optional[int] = OMIT,\n    scroll_jump: typing.Optional[int] = OMIT,\n    doc_extract_url: typing.Optional[str] = OMIT,\n    embedding_model: typing.Optional[EmbeddingModels] = OMIT,\n    dense_weight: typing.Optional[float] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    query_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    citation_style: typing.Optional[CitationStyles] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; DocSearchPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.rag(\n            search_query=\"search_query\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/doc-search/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"search_query\": search_query,\n            \"keyword_query\": keyword_query,\n            \"documents\": documents,\n            \"max_references\": max_references,\n            \"max_context_words\": max_context_words,\n            \"scroll_jump\": scroll_jump,\n            \"doc_extract_url\": doc_extract_url,\n            \"embedding_model\": embedding_model,\n            \"dense_weight\": dense_weight,\n            \"task_instructions\": task_instructions,\n            \"query_instructions\": query_instructions,\n            \"selected_model\": selected_model,\n            \"citation_style\": citation_style,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                DocSearchPageOutput,\n                parse_obj_as(\n                    type_=DocSearchPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.remix_image","title":"remix_image  <code>async</code>","text":"<pre><code>remix_image(\n    *,\n    input_image: File,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    text_prompt: Optional[str] = OMIT,\n    selected_model: Optional[ImageToImageModels] = OMIT,\n    selected_controlnet_model: Optional[\n        SelectedControlNetModels\n    ] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    prompt_strength: Optional[float] = OMIT,\n    controlnet_conditioning_scale: Optional[\n        List[float]\n    ] = OMIT,\n    seed: Optional[int] = OMIT,\n    image_guidance_scale: Optional[float] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; Img2ImgPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.remix_image--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.remix_image()\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def remix_image(\n    self,\n    *,\n    input_image: core.File,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    text_prompt: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[ImageToImageModels] = OMIT,\n    selected_controlnet_model: typing.Optional[SelectedControlNetModels] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    prompt_strength: typing.Optional[float] = OMIT,\n    controlnet_conditioning_scale: typing.Optional[typing.List[float]] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    image_guidance_scale: typing.Optional[float] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; Img2ImgPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.remix_image()\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/Img2Img/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"selected_model\": selected_model,\n            \"selected_controlnet_model\": selected_controlnet_model,\n            \"negative_prompt\": negative_prompt,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"guidance_scale\": guidance_scale,\n            \"prompt_strength\": prompt_strength,\n            \"controlnet_conditioning_scale\": controlnet_conditioning_scale,\n            \"seed\": seed,\n            \"image_guidance_scale\": image_guidance_scale,\n            \"settings\": settings,\n        },\n        files={\n            \"input_image\": input_image,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                Img2ImgPageOutput,\n                parse_obj_as(\n                    type_=Img2ImgPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.remove_background","title":"remove_background  <code>async</code>","text":"<pre><code>remove_background(\n    *,\n    input_image: File,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    selected_model: Optional[\n        ImageSegmentationModels\n    ] = OMIT,\n    mask_threshold: Optional[float] = OMIT,\n    rect_persepective_transform: Optional[bool] = OMIT,\n    reflection_opacity: Optional[float] = OMIT,\n    obj_scale: Optional[float] = OMIT,\n    obj_pos_x: Optional[float] = OMIT,\n    obj_pos_y: Optional[float] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; ImageSegmentationPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.remove_background--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.remove_background()\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def remove_background(\n    self,\n    *,\n    input_image: core.File,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    selected_model: typing.Optional[ImageSegmentationModels] = OMIT,\n    mask_threshold: typing.Optional[float] = OMIT,\n    rect_persepective_transform: typing.Optional[bool] = OMIT,\n    reflection_opacity: typing.Optional[float] = OMIT,\n    obj_scale: typing.Optional[float] = OMIT,\n    obj_pos_x: typing.Optional[float] = OMIT,\n    obj_pos_y: typing.Optional[float] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; ImageSegmentationPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.remove_background()\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/ImageSegmentation/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"selected_model\": selected_model,\n            \"mask_threshold\": mask_threshold,\n            \"rect_persepective_transform\": rect_persepective_transform,\n            \"reflection_opacity\": reflection_opacity,\n            \"obj_scale\": obj_scale,\n            \"obj_pos_x\": obj_pos_x,\n            \"obj_pos_y\": obj_pos_y,\n            \"settings\": settings,\n        },\n        files={\n            \"input_image\": input_image,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                ImageSegmentationPageOutput,\n                parse_obj_as(\n                    type_=ImageSegmentationPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.seo_content","title":"seo_content  <code>async</code>","text":"<pre><code>seo_content(\n    *,\n    search_query: str,\n    keywords: str,\n    title: str,\n    company_url: str,\n    example_id: Optional[str] = None,\n    task_instructions: Optional[str] = OMIT,\n    enable_html: Optional[bool] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: Optional[int] = OMIT,\n    enable_crosslinks: Optional[bool] = OMIT,\n    seed: Optional[int] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    serp_search_location: Optional[\n        SerpSearchLocations\n    ] = OMIT,\n    scaleserp_locations: Optional[Sequence[str]] = OMIT,\n    serp_search_type: Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: Optional[str] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; SeoSummaryPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.seo_content--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.seo_content(\n        search_query=\"search_query\",\n        keywords=\"keywords\",\n        title=\"title\",\n        company_url=\"company_url\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def seo_content(\n    self,\n    *,\n    search_query: str,\n    keywords: str,\n    title: str,\n    company_url: str,\n    example_id: typing.Optional[str] = None,\n    task_instructions: typing.Optional[str] = OMIT,\n    enable_html: typing.Optional[bool] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: typing.Optional[int] = OMIT,\n    enable_crosslinks: typing.Optional[bool] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    serp_search_location: typing.Optional[SerpSearchLocations] = OMIT,\n    scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,\n    serp_search_type: typing.Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: typing.Optional[str] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; SeoSummaryPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.seo_content(\n            search_query=\"search_query\",\n            keywords=\"keywords\",\n            title=\"title\",\n            company_url=\"company_url\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/SEOSummary/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"search_query\": search_query,\n            \"keywords\": keywords,\n            \"title\": title,\n            \"company_url\": company_url,\n            \"task_instructions\": task_instructions,\n            \"enable_html\": enable_html,\n            \"selected_model\": selected_model,\n            \"max_search_urls\": max_search_urls,\n            \"enable_crosslinks\": enable_crosslinks,\n            \"seed\": seed,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"serp_search_location\": serp_search_location,\n            \"scaleserp_locations\": scaleserp_locations,\n            \"serp_search_type\": serp_search_type,\n            \"scaleserp_search_field\": scaleserp_search_field,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                SeoSummaryPageOutput,\n                parse_obj_as(\n                    type_=SeoSummaryPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.seo_people_also_ask","title":"seo_people_also_ask  <code>async</code>","text":"<pre><code>seo_people_also_ask(\n    *,\n    search_query: str,\n    site_filter: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    query_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: Optional[int] = OMIT,\n    max_references: Optional[int] = OMIT,\n    max_context_words: Optional[int] = OMIT,\n    scroll_jump: Optional[int] = OMIT,\n    embedding_model: Optional[EmbeddingModels] = OMIT,\n    dense_weight: Optional[float] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    serp_search_location: Optional[\n        SerpSearchLocations\n    ] = OMIT,\n    scaleserp_locations: Optional[Sequence[str]] = OMIT,\n    serp_search_type: Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: Optional[str] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; RelatedQnAPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.seo_people_also_ask--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.seo_people_also_ask(\n        search_query=\"search_query\",\n        site_filter=\"site_filter\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def seo_people_also_ask(\n    self,\n    *,\n    search_query: str,\n    site_filter: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    query_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: typing.Optional[int] = OMIT,\n    max_references: typing.Optional[int] = OMIT,\n    max_context_words: typing.Optional[int] = OMIT,\n    scroll_jump: typing.Optional[int] = OMIT,\n    embedding_model: typing.Optional[EmbeddingModels] = OMIT,\n    dense_weight: typing.Optional[float] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    serp_search_location: typing.Optional[SerpSearchLocations] = OMIT,\n    scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,\n    serp_search_type: typing.Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: typing.Optional[str] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; RelatedQnAPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.seo_people_also_ask(\n            search_query=\"search_query\",\n            site_filter=\"site_filter\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/related-qna-maker/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"search_query\": search_query,\n            \"site_filter\": site_filter,\n            \"task_instructions\": task_instructions,\n            \"query_instructions\": query_instructions,\n            \"selected_model\": selected_model,\n            \"max_search_urls\": max_search_urls,\n            \"max_references\": max_references,\n            \"max_context_words\": max_context_words,\n            \"scroll_jump\": scroll_jump,\n            \"embedding_model\": embedding_model,\n            \"dense_weight\": dense_weight,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"serp_search_location\": serp_search_location,\n            \"scaleserp_locations\": scaleserp_locations,\n            \"serp_search_type\": serp_search_type,\n            \"scaleserp_search_field\": scaleserp_search_field,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                RelatedQnAPageOutput,\n                parse_obj_as(\n                    type_=RelatedQnAPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.seo_people_also_ask_doc","title":"seo_people_also_ask_doc  <code>async</code>","text":"<pre><code>seo_people_also_ask_doc(\n    *,\n    search_query: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    keyword_query: Optional[KeywordQuery] = OMIT,\n    documents: Optional[Sequence[str]] = OMIT,\n    max_references: Optional[int] = OMIT,\n    max_context_words: Optional[int] = OMIT,\n    scroll_jump: Optional[int] = OMIT,\n    doc_extract_url: Optional[str] = OMIT,\n    embedding_model: Optional[EmbeddingModels] = OMIT,\n    dense_weight: Optional[float] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    query_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    citation_style: Optional[CitationStyles] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    serp_search_location: Optional[\n        SerpSearchLocations\n    ] = OMIT,\n    scaleserp_locations: Optional[Sequence[str]] = OMIT,\n    serp_search_type: Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: Optional[str] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; RelatedQnADocPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.seo_people_also_ask_doc--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.seo_people_also_ask_doc(\n        search_query=\"search_query\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def seo_people_also_ask_doc(\n    self,\n    *,\n    search_query: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    keyword_query: typing.Optional[KeywordQuery] = OMIT,\n    documents: typing.Optional[typing.Sequence[str]] = OMIT,\n    max_references: typing.Optional[int] = OMIT,\n    max_context_words: typing.Optional[int] = OMIT,\n    scroll_jump: typing.Optional[int] = OMIT,\n    doc_extract_url: typing.Optional[str] = OMIT,\n    embedding_model: typing.Optional[EmbeddingModels] = OMIT,\n    dense_weight: typing.Optional[float] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    query_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    citation_style: typing.Optional[CitationStyles] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    serp_search_location: typing.Optional[SerpSearchLocations] = OMIT,\n    scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,\n    serp_search_type: typing.Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: typing.Optional[str] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; RelatedQnADocPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.seo_people_also_ask_doc(\n            search_query=\"search_query\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/related-qna-maker-doc/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"search_query\": search_query,\n            \"keyword_query\": keyword_query,\n            \"documents\": documents,\n            \"max_references\": max_references,\n            \"max_context_words\": max_context_words,\n            \"scroll_jump\": scroll_jump,\n            \"doc_extract_url\": doc_extract_url,\n            \"embedding_model\": embedding_model,\n            \"dense_weight\": dense_weight,\n            \"task_instructions\": task_instructions,\n            \"query_instructions\": query_instructions,\n            \"selected_model\": selected_model,\n            \"citation_style\": citation_style,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"serp_search_location\": serp_search_location,\n            \"scaleserp_locations\": scaleserp_locations,\n            \"serp_search_type\": serp_search_type,\n            \"scaleserp_search_field\": scaleserp_search_field,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                RelatedQnADocPageOutput,\n                parse_obj_as(\n                    type_=RelatedQnADocPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.smart_gpt","title":"smart_gpt  <code>async</code>","text":"<pre><code>smart_gpt(\n    *,\n    input_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    cot_prompt: Optional[str] = OMIT,\n    reflexion_prompt: Optional[str] = OMIT,\n    dera_prompt: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; SmartGptPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.smart_gpt--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.smart_gpt(\n        input_prompt=\"input_prompt\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def smart_gpt(\n    self,\n    *,\n    input_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    cot_prompt: typing.Optional[str] = OMIT,\n    reflexion_prompt: typing.Optional[str] = OMIT,\n    dera_prompt: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; SmartGptPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.smart_gpt(\n            input_prompt=\"input_prompt\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/SmartGPT/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"input_prompt\": input_prompt,\n            \"cot_prompt\": cot_prompt,\n            \"reflexion_prompt\": reflexion_prompt,\n            \"dera_prompt\": dera_prompt,\n            \"selected_model\": selected_model,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                SmartGptPageOutput,\n                parse_obj_as(\n                    type_=SmartGptPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.speech_recognition","title":"speech_recognition  <code>async</code>","text":"<pre><code>speech_recognition(\n    *,\n    documents: List[File],\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    selected_model: Optional[AsrModels] = OMIT,\n    language: Optional[str] = OMIT,\n    translation_model: Optional[TranslationModels] = OMIT,\n    output_format: Optional[AsrOutputFormat] = OMIT,\n    google_translate_target: Optional[str] = OMIT,\n    translation_source: Optional[str] = OMIT,\n    translation_target: Optional[str] = OMIT,\n    glossary_document: Optional[File] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; AsrPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.speech_recognition--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.speech_recognition()\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def speech_recognition(\n    self,\n    *,\n    documents: typing.List[core.File],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    selected_model: typing.Optional[AsrModels] = OMIT,\n    language: typing.Optional[str] = OMIT,\n    translation_model: typing.Optional[TranslationModels] = OMIT,\n    output_format: typing.Optional[AsrOutputFormat] = OMIT,\n    google_translate_target: typing.Optional[str] = OMIT,\n    translation_source: typing.Optional[str] = OMIT,\n    translation_target: typing.Optional[str] = OMIT,\n    glossary_document: typing.Optional[core.File] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; AsrPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.speech_recognition()\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/asr/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"selected_model\": selected_model,\n            \"language\": language,\n            \"translation_model\": translation_model,\n            \"output_format\": output_format,\n            \"google_translate_target\": google_translate_target,\n            \"translation_source\": translation_source,\n            \"translation_target\": translation_target,\n            \"settings\": settings,\n        },\n        files={\n            \"documents\": documents,\n            \"glossary_document\": glossary_document,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                AsrPageOutput,\n                parse_obj_as(\n                    type_=AsrPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.synthesize_data","title":"synthesize_data  <code>async</code>","text":"<pre><code>synthesize_data(\n    *,\n    documents: List[File],\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    sheet_url: Optional[File] = OMIT,\n    selected_asr_model: Optional[AsrModels] = OMIT,\n    google_translate_target: Optional[str] = OMIT,\n    glossary_document: Optional[File] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; DocExtractPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.synthesize_data--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.synthesize_data()\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def synthesize_data(\n    self,\n    *,\n    documents: typing.List[core.File],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    sheet_url: typing.Optional[core.File] = OMIT,\n    selected_asr_model: typing.Optional[AsrModels] = OMIT,\n    google_translate_target: typing.Optional[str] = OMIT,\n    glossary_document: typing.Optional[core.File] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; DocExtractPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.synthesize_data()\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/doc-extract/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"selected_asr_model\": selected_asr_model,\n            \"google_translate_target\": google_translate_target,\n            \"task_instructions\": task_instructions,\n            \"selected_model\": selected_model,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        files={\n            \"documents\": documents,\n            \"sheet_url\": sheet_url,\n            \"glossary_document\": glossary_document,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                DocExtractPageOutput,\n                parse_obj_as(\n                    type_=DocExtractPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.text_to_image","title":"text_to_image  <code>async</code>","text":"<pre><code>text_to_image(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    dall_e3quality: Optional[str] = OMIT,\n    dall_e3style: Optional[str] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    seed: Optional[int] = OMIT,\n    sd2upscaling: Optional[bool] = OMIT,\n    selected_models: Optional[\n        Sequence[TextToImageModels]\n    ] = OMIT,\n    scheduler: Optional[Schedulers] = OMIT,\n    edit_instruction: Optional[str] = OMIT,\n    image_guidance_scale: Optional[float] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; CompareText2ImgPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.text_to_image--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.text_to_image(\n        text_prompt=\"text_prompt\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def text_to_image(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    dall_e3quality: typing.Optional[str] = OMIT,\n    dall_e3style: typing.Optional[str] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    sd2upscaling: typing.Optional[bool] = OMIT,\n    selected_models: typing.Optional[typing.Sequence[TextToImageModels]] = OMIT,\n    scheduler: typing.Optional[Schedulers] = OMIT,\n    edit_instruction: typing.Optional[str] = OMIT,\n    image_guidance_scale: typing.Optional[float] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; CompareText2ImgPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.text_to_image(\n            text_prompt=\"text_prompt\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/CompareText2Img/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"negative_prompt\": negative_prompt,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"dall_e_3_quality\": dall_e3quality,\n            \"dall_e_3_style\": dall_e3style,\n            \"guidance_scale\": guidance_scale,\n            \"seed\": seed,\n            \"sd_2_upscaling\": sd2upscaling,\n            \"selected_models\": selected_models,\n            \"scheduler\": scheduler,\n            \"edit_instruction\": edit_instruction,\n            \"image_guidance_scale\": image_guidance_scale,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                CompareText2ImgPageOutput,\n                parse_obj_as(\n                    type_=CompareText2ImgPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.text_to_music","title":"text_to_music  <code>async</code>","text":"<pre><code>text_to_music(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    duration_sec: Optional[float] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    seed: Optional[int] = OMIT,\n    sd2upscaling: Optional[bool] = OMIT,\n    selected_models: Optional[\n        Sequence[Text2AudioModels]\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; Text2AudioPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.text_to_music--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.text_to_music(\n        text_prompt=\"text_prompt\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def text_to_music(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    duration_sec: typing.Optional[float] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    sd2upscaling: typing.Optional[bool] = OMIT,\n    selected_models: typing.Optional[typing.Sequence[Text2AudioModels]] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; Text2AudioPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.text_to_music(\n            text_prompt=\"text_prompt\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/text2audio/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"negative_prompt\": negative_prompt,\n            \"duration_sec\": duration_sec,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"guidance_scale\": guidance_scale,\n            \"seed\": seed,\n            \"sd_2_upscaling\": sd2upscaling,\n            \"selected_models\": selected_models,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                Text2AudioPageOutput,\n                parse_obj_as(\n                    type_=Text2AudioPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.text_to_speech","title":"text_to_speech  <code>async</code>","text":"<pre><code>text_to_speech(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    tts_provider: Optional[TextToSpeechProviders] = OMIT,\n    uberduck_voice_name: Optional[str] = OMIT,\n    uberduck_speaking_rate: Optional[float] = OMIT,\n    google_voice_name: Optional[str] = OMIT,\n    google_speaking_rate: Optional[float] = OMIT,\n    google_pitch: Optional[float] = OMIT,\n    bark_history_prompt: Optional[str] = OMIT,\n    elevenlabs_voice_name: Optional[str] = OMIT,\n    elevenlabs_api_key: Optional[str] = OMIT,\n    elevenlabs_voice_id: Optional[str] = OMIT,\n    elevenlabs_model: Optional[str] = OMIT,\n    elevenlabs_stability: Optional[float] = OMIT,\n    elevenlabs_similarity_boost: Optional[float] = OMIT,\n    elevenlabs_style: Optional[float] = OMIT,\n    elevenlabs_speaker_boost: Optional[bool] = OMIT,\n    azure_voice_name: Optional[str] = OMIT,\n    openai_voice_name: Optional[OpenAiTtsVoices] = OMIT,\n    openai_tts_model: Optional[OpenAiTtsModels] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; TextToSpeechPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.text_to_speech--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.text_to_speech(\n        text_prompt=\"text_prompt\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def text_to_speech(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    tts_provider: typing.Optional[TextToSpeechProviders] = OMIT,\n    uberduck_voice_name: typing.Optional[str] = OMIT,\n    uberduck_speaking_rate: typing.Optional[float] = OMIT,\n    google_voice_name: typing.Optional[str] = OMIT,\n    google_speaking_rate: typing.Optional[float] = OMIT,\n    google_pitch: typing.Optional[float] = OMIT,\n    bark_history_prompt: typing.Optional[str] = OMIT,\n    elevenlabs_voice_name: typing.Optional[str] = OMIT,\n    elevenlabs_api_key: typing.Optional[str] = OMIT,\n    elevenlabs_voice_id: typing.Optional[str] = OMIT,\n    elevenlabs_model: typing.Optional[str] = OMIT,\n    elevenlabs_stability: typing.Optional[float] = OMIT,\n    elevenlabs_similarity_boost: typing.Optional[float] = OMIT,\n    elevenlabs_style: typing.Optional[float] = OMIT,\n    elevenlabs_speaker_boost: typing.Optional[bool] = OMIT,\n    azure_voice_name: typing.Optional[str] = OMIT,\n    openai_voice_name: typing.Optional[OpenAiTtsVoices] = OMIT,\n    openai_tts_model: typing.Optional[OpenAiTtsModels] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; TextToSpeechPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.text_to_speech(\n            text_prompt=\"text_prompt\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/TextToSpeech/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"tts_provider\": tts_provider,\n            \"uberduck_voice_name\": uberduck_voice_name,\n            \"uberduck_speaking_rate\": uberduck_speaking_rate,\n            \"google_voice_name\": google_voice_name,\n            \"google_speaking_rate\": google_speaking_rate,\n            \"google_pitch\": google_pitch,\n            \"bark_history_prompt\": bark_history_prompt,\n            \"elevenlabs_voice_name\": elevenlabs_voice_name,\n            \"elevenlabs_api_key\": elevenlabs_api_key,\n            \"elevenlabs_voice_id\": elevenlabs_voice_id,\n            \"elevenlabs_model\": elevenlabs_model,\n            \"elevenlabs_stability\": elevenlabs_stability,\n            \"elevenlabs_similarity_boost\": elevenlabs_similarity_boost,\n            \"elevenlabs_style\": elevenlabs_style,\n            \"elevenlabs_speaker_boost\": elevenlabs_speaker_boost,\n            \"azure_voice_name\": azure_voice_name,\n            \"openai_voice_name\": openai_voice_name,\n            \"openai_tts_model\": openai_tts_model,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                TextToSpeechPageOutput,\n                parse_obj_as(\n                    type_=TextToSpeechPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.translate","title":"translate  <code>async</code>","text":"<pre><code>translate(\n    *,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    texts: Optional[List[str]] = OMIT,\n    selected_model: Optional[TranslationModels] = OMIT,\n    translation_source: Optional[str] = OMIT,\n    translation_target: Optional[str] = OMIT,\n    glossary_document: Optional[File] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; TranslationPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.translate--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.translate()\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def translate(\n    self,\n    *,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    texts: typing.Optional[typing.List[str]] = OMIT,\n    selected_model: typing.Optional[TranslationModels] = OMIT,\n    translation_source: typing.Optional[str] = OMIT,\n    translation_target: typing.Optional[str] = OMIT,\n    glossary_document: typing.Optional[core.File] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; TranslationPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.translate()\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/translate/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"texts\": texts,\n            \"selected_model\": selected_model,\n            \"translation_source\": translation_source,\n            \"translation_target\": translation_target,\n            \"settings\": settings,\n        },\n        files={\n            \"glossary_document\": glossary_document,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                TranslationPageOutput,\n                parse_obj_as(\n                    type_=TranslationPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.upscale","title":"upscale  <code>async</code>","text":"<pre><code>upscale(\n    *,\n    scale: int,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    input_image: Optional[File] = OMIT,\n    input_video: Optional[File] = OMIT,\n    selected_models: Optional[List[UpscalerModels]] = OMIT,\n    selected_bg_model: Optional[\n        Literal[\"real_esrgan_x2\"]\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; CompareUpscalerPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.upscale--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.upscale(\n        scale=1,\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def upscale(\n    self,\n    *,\n    scale: int,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    input_image: typing.Optional[core.File] = OMIT,\n    input_video: typing.Optional[core.File] = OMIT,\n    selected_models: typing.Optional[typing.List[UpscalerModels]] = OMIT,\n    selected_bg_model: typing.Optional[typing.Literal[\"real_esrgan_x2\"]] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; CompareUpscalerPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.upscale(\n            scale=1,\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/compare-ai-upscalers/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"scale\": scale,\n            \"selected_models\": selected_models,\n            \"selected_bg_model\": selected_bg_model,\n            \"settings\": settings,\n        },\n        files={\n            \"input_image\": input_image,\n            \"input_video\": input_video,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                CompareUpscalerPageOutput,\n                parse_obj_as(\n                    type_=CompareUpscalerPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.web_search_llm","title":"web_search_llm  <code>async</code>","text":"<pre><code>web_search_llm(\n    *,\n    search_query: str,\n    site_filter: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    query_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: Optional[int] = OMIT,\n    max_references: Optional[int] = OMIT,\n    max_context_words: Optional[int] = OMIT,\n    scroll_jump: Optional[int] = OMIT,\n    embedding_model: Optional[EmbeddingModels] = OMIT,\n    dense_weight: Optional[float] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    serp_search_location: Optional[\n        SerpSearchLocations\n    ] = OMIT,\n    scaleserp_locations: Optional[Sequence[str]] = OMIT,\n    serp_search_type: Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: Optional[str] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; GoogleGptPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.AsyncGooey.web_search_llm--examples","title":"Examples","text":"<pre><code>import asyncio\n\nfrom gooey import AsyncGooey\n\nclient = AsyncGooey(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -&gt; None:\n    await client.web_search_llm(\n        search_query=\"search_query\",\n        site_filter=\"site_filter\",\n    )\n\n\nasyncio.run(main())\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>async def web_search_llm(\n    self,\n    *,\n    search_query: str,\n    site_filter: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    query_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: typing.Optional[int] = OMIT,\n    max_references: typing.Optional[int] = OMIT,\n    max_context_words: typing.Optional[int] = OMIT,\n    scroll_jump: typing.Optional[int] = OMIT,\n    embedding_model: typing.Optional[EmbeddingModels] = OMIT,\n    dense_weight: typing.Optional[float] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    serp_search_location: typing.Optional[SerpSearchLocations] = OMIT,\n    scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,\n    serp_search_type: typing.Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: typing.Optional[str] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; GoogleGptPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.web_search_llm(\n            search_query=\"search_query\",\n            site_filter=\"site_filter\",\n        )\n\n\n    asyncio.run(main())\n    ```\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/google-gpt/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"search_query\": search_query,\n            \"site_filter\": site_filter,\n            \"task_instructions\": task_instructions,\n            \"query_instructions\": query_instructions,\n            \"selected_model\": selected_model,\n            \"max_search_urls\": max_search_urls,\n            \"max_references\": max_references,\n            \"max_context_words\": max_context_words,\n            \"scroll_jump\": scroll_jump,\n            \"embedding_model\": embedding_model,\n            \"dense_weight\": dense_weight,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"serp_search_location\": serp_search_location,\n            \"scaleserp_locations\": scaleserp_locations,\n            \"serp_search_type\": serp_search_type,\n            \"scaleserp_search_field\": scaleserp_search_field,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                GoogleGptPageOutput,\n                parse_obj_as(\n                    type_=GoogleGptPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey","title":"Gooey","text":"<pre><code>Gooey(\n    *,\n    base_url: Optional[str] = None,\n    environment: GooeyEnvironment = GooeyEnvironment.DEFAULT,\n    api_key: Optional[\n        Union[str, Callable[[], str]]\n    ] = os.getenv(\"GOOEY_API_KEY\"),\n    timeout: Optional[float] = None,\n    follow_redirects: Optional[bool] = True,\n    httpx_client: Optional[Client] = None\n)\n</code></pre> <p>Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.</p>"},{"location":"reference/gooey/client/#gooey.client.Gooey--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def __init__(\n    self,\n    *,\n    base_url: typing.Optional[str] = None,\n    environment: GooeyEnvironment = GooeyEnvironment.DEFAULT,\n    api_key: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv(\"GOOEY_API_KEY\"),\n    timeout: typing.Optional[float] = None,\n    follow_redirects: typing.Optional[bool] = True,\n    httpx_client: typing.Optional[httpx.Client] = None,\n):\n    _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None\n    if api_key is None:\n        raise ApiError(body=\"The client must be instantiated be either passing in api_key or setting GOOEY_API_KEY\")\n    self._client_wrapper = SyncClientWrapper(\n        base_url=_get_base_url(base_url=base_url, environment=environment),\n        api_key=api_key,\n        httpx_client=(\n            httpx_client\n            if httpx_client is not None\n            else (\n                httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)\n                if follow_redirects is not None\n                else httpx.Client(timeout=_defaulted_timeout)\n            )\n        ),\n        timeout=_defaulted_timeout,\n    )\n    self.copilot = CopilotClient(client_wrapper=self._client_wrapper)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.animate","title":"animate","text":"<pre><code>animate(\n    *,\n    animation_prompts: Sequence[AnimationPrompt],\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    max_frames: Optional[int] = OMIT,\n    selected_model: Optional[AnimationModels] = OMIT,\n    animation_mode: Optional[str] = OMIT,\n    zoom: Optional[str] = OMIT,\n    translation_x: Optional[str] = OMIT,\n    translation_y: Optional[str] = OMIT,\n    rotation3d_x: Optional[str] = OMIT,\n    rotation3d_y: Optional[str] = OMIT,\n    rotation3d_z: Optional[str] = OMIT,\n    fps: Optional[int] = OMIT,\n    seed: Optional[int] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; DeforumSdPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.animate--examples","title":"Examples","text":"<pre><code>from gooey import AnimationPrompt, Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.animate(\n    animation_prompts=[\n        AnimationPrompt(\n            frame=\"frame\",\n            prompt=\"prompt\",\n        )\n    ],\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def animate(\n    self,\n    *,\n    animation_prompts: typing.Sequence[AnimationPrompt],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    max_frames: typing.Optional[int] = OMIT,\n    selected_model: typing.Optional[AnimationModels] = OMIT,\n    animation_mode: typing.Optional[str] = OMIT,\n    zoom: typing.Optional[str] = OMIT,\n    translation_x: typing.Optional[str] = OMIT,\n    translation_y: typing.Optional[str] = OMIT,\n    rotation3d_x: typing.Optional[str] = OMIT,\n    rotation3d_y: typing.Optional[str] = OMIT,\n    rotation3d_z: typing.Optional[str] = OMIT,\n    fps: typing.Optional[int] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; DeforumSdPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import AnimationPrompt, Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.animate(\n        animation_prompts=[\n            AnimationPrompt(\n                frame=\"frame\",\n                prompt=\"prompt\",\n            )\n        ],\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/DeforumSD/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"animation_prompts\": animation_prompts,\n            \"max_frames\": max_frames,\n            \"selected_model\": selected_model,\n            \"animation_mode\": animation_mode,\n            \"zoom\": zoom,\n            \"translation_x\": translation_x,\n            \"translation_y\": translation_y,\n            \"rotation_3d_x\": rotation3d_x,\n            \"rotation_3d_y\": rotation3d_y,\n            \"rotation_3d_z\": rotation3d_z,\n            \"fps\": fps,\n            \"seed\": seed,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                DeforumSdPageOutput,\n                parse_obj_as(\n                    type_=DeforumSdPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.bulk_run","title":"bulk_run","text":"<pre><code>bulk_run(\n    *,\n    documents: List[File],\n    run_urls: List[str],\n    input_columns: Dict[str, str],\n    output_columns: Dict[str, str],\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    eval_urls: Optional[List[str]] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; BulkRunnerPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.bulk_run--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.bulk_run(\n    run_urls=[\"run_urls\"],\n    input_columns={\"key\": \"value\"},\n    output_columns={\"key\": \"value\"},\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def bulk_run(\n    self,\n    *,\n    documents: typing.List[core.File],\n    run_urls: typing.List[str],\n    input_columns: typing.Dict[str, str],\n    output_columns: typing.Dict[str, str],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    eval_urls: typing.Optional[typing.List[str]] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; BulkRunnerPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.bulk_run(\n        run_urls=[\"run_urls\"],\n        input_columns={\"key\": \"value\"},\n        output_columns={\"key\": \"value\"},\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/bulk-runner/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"run_urls\": run_urls,\n            \"input_columns\": input_columns,\n            \"output_columns\": output_columns,\n            \"eval_urls\": eval_urls,\n            \"settings\": settings,\n        },\n        files={\n            \"documents\": documents,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                BulkRunnerPageOutput,\n                parse_obj_as(\n                    type_=BulkRunnerPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.doc_summary","title":"doc_summary","text":"<pre><code>doc_summary(\n    *,\n    documents: List[File],\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    merge_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    chain_type: Optional[CombineDocumentsChains] = OMIT,\n    selected_asr_model: Optional[AsrModels] = OMIT,\n    google_translate_target: Optional[str] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; DocSummaryPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.doc_summary--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.doc_summary()\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def doc_summary(\n    self,\n    *,\n    documents: typing.List[core.File],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    merge_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    chain_type: typing.Optional[CombineDocumentsChains] = OMIT,\n    selected_asr_model: typing.Optional[AsrModels] = OMIT,\n    google_translate_target: typing.Optional[str] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; DocSummaryPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.doc_summary()\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/doc-summary/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"task_instructions\": task_instructions,\n            \"merge_instructions\": merge_instructions,\n            \"selected_model\": selected_model,\n            \"chain_type\": chain_type,\n            \"selected_asr_model\": selected_asr_model,\n            \"google_translate_target\": google_translate_target,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        files={\n            \"documents\": documents,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                DocSummaryPageOutput,\n                parse_obj_as(\n                    type_=DocSummaryPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.embed","title":"embed","text":"<pre><code>embed(\n    *,\n    texts: Sequence[str],\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    selected_model: Optional[EmbeddingModels] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; EmbeddingsPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.embed--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed(\n    texts=[\"texts\"],\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def embed(\n    self,\n    *,\n    texts: typing.Sequence[str],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    selected_model: typing.Optional[EmbeddingModels] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; EmbeddingsPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.embed(\n        texts=[\"texts\"],\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/embeddings/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"texts\": texts,\n            \"selected_model\": selected_model,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                EmbeddingsPageOutput,\n                parse_obj_as(\n                    type_=EmbeddingsPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.eval","title":"eval","text":"<pre><code>eval(\n    *,\n    documents: Sequence[str],\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    eval_prompts: Optional[Sequence[EvalPrompt]] = OMIT,\n    agg_functions: Optional[Sequence[AggFunction]] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; BulkEvalPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.eval--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.eval(\n    documents=[\"documents\"],\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def eval(\n    self,\n    *,\n    documents: typing.Sequence[str],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    eval_prompts: typing.Optional[typing.Sequence[EvalPrompt]] = OMIT,\n    agg_functions: typing.Optional[typing.Sequence[AggFunction]] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; BulkEvalPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.eval(\n        documents=[\"documents\"],\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/bulk-eval/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"documents\": documents,\n            \"eval_prompts\": eval_prompts,\n            \"agg_functions\": agg_functions,\n            \"selected_model\": selected_model,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                BulkEvalPageOutput,\n                parse_obj_as(\n                    type_=BulkEvalPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.functions","title":"functions","text":"<pre><code>functions(\n    *,\n    example_id: Optional[str] = None,\n    code: Optional[str] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; FunctionsPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.functions--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.functions()\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def functions(\n    self,\n    *,\n    example_id: typing.Optional[str] = None,\n    code: typing.Optional[str] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; FunctionsPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.functions()\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/functions/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"code\": code,\n            \"variables\": variables,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                FunctionsPageOutput,\n                parse_obj_as(\n                    type_=FunctionsPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.get_balance","title":"get_balance","text":"<pre><code>get_balance(\n    *, request_options: Optional[RequestOptions] = None\n) -&gt; BalanceResponse\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.get_balance--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.get_balance()\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def get_balance(self, *, request_options: typing.Optional[RequestOptions] = None) -&gt; BalanceResponse:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.get_balance()\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v1/balance/\",\n        method=\"GET\",\n        request_options=request_options,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                BalanceResponse,\n                parse_obj_as(\n                    type_=BalanceResponse,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.image_from_email","title":"image_from_email","text":"<pre><code>image_from_email(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    email_address: Optional[str] = OMIT,\n    twitter_handle: Optional[str] = OMIT,\n    face_scale: Optional[float] = OMIT,\n    face_pos_x: Optional[float] = OMIT,\n    face_pos_y: Optional[float] = OMIT,\n    selected_model: Optional[InpaintingModels] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    upscale_factor: Optional[float] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    should_send_email: Optional[bool] = OMIT,\n    email_from: Optional[str] = OMIT,\n    email_cc: Optional[str] = OMIT,\n    email_bcc: Optional[str] = OMIT,\n    email_subject: Optional[str] = OMIT,\n    email_body: Optional[str] = OMIT,\n    email_body_enable_html: Optional[bool] = OMIT,\n    fallback_email_body: Optional[str] = OMIT,\n    seed: Optional[int] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; EmailFaceInpaintingPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.image_from_email--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.image_from_email(\n    email_address=\"sean@dara.network\",\n    text_prompt=\"winter's day in paris\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def image_from_email(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    email_address: typing.Optional[str] = OMIT,\n    twitter_handle: typing.Optional[str] = OMIT,\n    face_scale: typing.Optional[float] = OMIT,\n    face_pos_x: typing.Optional[float] = OMIT,\n    face_pos_y: typing.Optional[float] = OMIT,\n    selected_model: typing.Optional[InpaintingModels] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    upscale_factor: typing.Optional[float] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    should_send_email: typing.Optional[bool] = OMIT,\n    email_from: typing.Optional[str] = OMIT,\n    email_cc: typing.Optional[str] = OMIT,\n    email_bcc: typing.Optional[str] = OMIT,\n    email_subject: typing.Optional[str] = OMIT,\n    email_body: typing.Optional[str] = OMIT,\n    email_body_enable_html: typing.Optional[bool] = OMIT,\n    fallback_email_body: typing.Optional[str] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; EmailFaceInpaintingPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.image_from_email(\n        email_address=\"sean@dara.network\",\n        text_prompt=\"winter's day in paris\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/EmailFaceInpainting/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"email_address\": email_address,\n            \"twitter_handle\": twitter_handle,\n            \"text_prompt\": text_prompt,\n            \"face_scale\": face_scale,\n            \"face_pos_x\": face_pos_x,\n            \"face_pos_y\": face_pos_y,\n            \"selected_model\": selected_model,\n            \"negative_prompt\": negative_prompt,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"upscale_factor\": upscale_factor,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"guidance_scale\": guidance_scale,\n            \"should_send_email\": should_send_email,\n            \"email_from\": email_from,\n            \"email_cc\": email_cc,\n            \"email_bcc\": email_bcc,\n            \"email_subject\": email_subject,\n            \"email_body\": email_body,\n            \"email_body_enable_html\": email_body_enable_html,\n            \"fallback_email_body\": fallback_email_body,\n            \"seed\": seed,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                EmailFaceInpaintingPageOutput,\n                parse_obj_as(\n                    type_=EmailFaceInpaintingPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.image_from_web_search","title":"image_from_web_search","text":"<pre><code>image_from_web_search(\n    *,\n    search_query: str,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    serp_search_location: Optional[\n        SerpSearchLocations\n    ] = OMIT,\n    scaleserp_locations: Optional[Sequence[str]] = OMIT,\n    selected_model: Optional[ImageToImageModels] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    prompt_strength: Optional[float] = OMIT,\n    sd2upscaling: Optional[bool] = OMIT,\n    seed: Optional[int] = OMIT,\n    image_guidance_scale: Optional[float] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; GoogleImageGenPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.image_from_web_search--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.image_from_web_search(\n    search_query=\"search_query\",\n    text_prompt=\"text_prompt\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def image_from_web_search(\n    self,\n    *,\n    search_query: str,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    serp_search_location: typing.Optional[SerpSearchLocations] = OMIT,\n    scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,\n    selected_model: typing.Optional[ImageToImageModels] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    prompt_strength: typing.Optional[float] = OMIT,\n    sd2upscaling: typing.Optional[bool] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    image_guidance_scale: typing.Optional[float] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; GoogleImageGenPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.image_from_web_search(\n        search_query=\"search_query\",\n        text_prompt=\"text_prompt\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/GoogleImageGen/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"serp_search_location\": serp_search_location,\n            \"scaleserp_locations\": scaleserp_locations,\n            \"search_query\": search_query,\n            \"text_prompt\": text_prompt,\n            \"selected_model\": selected_model,\n            \"negative_prompt\": negative_prompt,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"guidance_scale\": guidance_scale,\n            \"prompt_strength\": prompt_strength,\n            \"sd_2_upscaling\": sd2upscaling,\n            \"seed\": seed,\n            \"image_guidance_scale\": image_guidance_scale,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                GoogleImageGenPageOutput,\n                parse_obj_as(\n                    type_=GoogleImageGenPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.lipsync","title":"lipsync","text":"<pre><code>lipsync(\n    *,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    input_face: Optional[File] = OMIT,\n    face_padding_top: Optional[int] = OMIT,\n    face_padding_bottom: Optional[int] = OMIT,\n    face_padding_left: Optional[int] = OMIT,\n    face_padding_right: Optional[int] = OMIT,\n    sadtalker_settings: Optional[SadTalkerSettings] = OMIT,\n    selected_model: Optional[LipsyncModels] = OMIT,\n    input_audio: Optional[File] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; LipsyncPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.lipsync--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.lipsync()\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def lipsync(\n    self,\n    *,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    input_face: typing.Optional[core.File] = OMIT,\n    face_padding_top: typing.Optional[int] = OMIT,\n    face_padding_bottom: typing.Optional[int] = OMIT,\n    face_padding_left: typing.Optional[int] = OMIT,\n    face_padding_right: typing.Optional[int] = OMIT,\n    sadtalker_settings: typing.Optional[SadTalkerSettings] = OMIT,\n    selected_model: typing.Optional[LipsyncModels] = OMIT,\n    input_audio: typing.Optional[core.File] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; LipsyncPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.lipsync()\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/Lipsync/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"face_padding_top\": face_padding_top,\n            \"face_padding_bottom\": face_padding_bottom,\n            \"face_padding_left\": face_padding_left,\n            \"face_padding_right\": face_padding_right,\n            \"sadtalker_settings\": sadtalker_settings,\n            \"selected_model\": selected_model,\n            \"settings\": settings,\n        },\n        files={\n            \"input_face\": input_face,\n            \"input_audio\": input_audio,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                LipsyncPageOutput,\n                parse_obj_as(\n                    type_=LipsyncPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.lipsync_tts","title":"lipsync_tts","text":"<pre><code>lipsync_tts(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    tts_provider: Optional[TextToSpeechProviders] = OMIT,\n    uberduck_voice_name: Optional[str] = OMIT,\n    uberduck_speaking_rate: Optional[float] = OMIT,\n    google_voice_name: Optional[str] = OMIT,\n    google_speaking_rate: Optional[float] = OMIT,\n    google_pitch: Optional[float] = OMIT,\n    bark_history_prompt: Optional[str] = OMIT,\n    elevenlabs_voice_name: Optional[str] = OMIT,\n    elevenlabs_api_key: Optional[str] = OMIT,\n    elevenlabs_voice_id: Optional[str] = OMIT,\n    elevenlabs_model: Optional[str] = OMIT,\n    elevenlabs_stability: Optional[float] = OMIT,\n    elevenlabs_similarity_boost: Optional[float] = OMIT,\n    elevenlabs_style: Optional[float] = OMIT,\n    elevenlabs_speaker_boost: Optional[bool] = OMIT,\n    azure_voice_name: Optional[str] = OMIT,\n    openai_voice_name: Optional[OpenAiTtsVoices] = OMIT,\n    openai_tts_model: Optional[OpenAiTtsModels] = OMIT,\n    input_face: Optional[File] = OMIT,\n    face_padding_top: Optional[int] = OMIT,\n    face_padding_bottom: Optional[int] = OMIT,\n    face_padding_left: Optional[int] = OMIT,\n    face_padding_right: Optional[int] = OMIT,\n    sadtalker_settings: Optional[SadTalkerSettings] = OMIT,\n    selected_model: Optional[LipsyncModels] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; LipsyncTtsPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.lipsync_tts--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.lipsync_tts(\n    text_prompt=\"text_prompt\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def lipsync_tts(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    tts_provider: typing.Optional[TextToSpeechProviders] = OMIT,\n    uberduck_voice_name: typing.Optional[str] = OMIT,\n    uberduck_speaking_rate: typing.Optional[float] = OMIT,\n    google_voice_name: typing.Optional[str] = OMIT,\n    google_speaking_rate: typing.Optional[float] = OMIT,\n    google_pitch: typing.Optional[float] = OMIT,\n    bark_history_prompt: typing.Optional[str] = OMIT,\n    elevenlabs_voice_name: typing.Optional[str] = OMIT,\n    elevenlabs_api_key: typing.Optional[str] = OMIT,\n    elevenlabs_voice_id: typing.Optional[str] = OMIT,\n    elevenlabs_model: typing.Optional[str] = OMIT,\n    elevenlabs_stability: typing.Optional[float] = OMIT,\n    elevenlabs_similarity_boost: typing.Optional[float] = OMIT,\n    elevenlabs_style: typing.Optional[float] = OMIT,\n    elevenlabs_speaker_boost: typing.Optional[bool] = OMIT,\n    azure_voice_name: typing.Optional[str] = OMIT,\n    openai_voice_name: typing.Optional[OpenAiTtsVoices] = OMIT,\n    openai_tts_model: typing.Optional[OpenAiTtsModels] = OMIT,\n    input_face: typing.Optional[core.File] = OMIT,\n    face_padding_top: typing.Optional[int] = OMIT,\n    face_padding_bottom: typing.Optional[int] = OMIT,\n    face_padding_left: typing.Optional[int] = OMIT,\n    face_padding_right: typing.Optional[int] = OMIT,\n    sadtalker_settings: typing.Optional[SadTalkerSettings] = OMIT,\n    selected_model: typing.Optional[LipsyncModels] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; LipsyncTtsPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.lipsync_tts(\n        text_prompt=\"text_prompt\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/LipsyncTTS/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"tts_provider\": tts_provider,\n            \"uberduck_voice_name\": uberduck_voice_name,\n            \"uberduck_speaking_rate\": uberduck_speaking_rate,\n            \"google_voice_name\": google_voice_name,\n            \"google_speaking_rate\": google_speaking_rate,\n            \"google_pitch\": google_pitch,\n            \"bark_history_prompt\": bark_history_prompt,\n            \"elevenlabs_voice_name\": elevenlabs_voice_name,\n            \"elevenlabs_api_key\": elevenlabs_api_key,\n            \"elevenlabs_voice_id\": elevenlabs_voice_id,\n            \"elevenlabs_model\": elevenlabs_model,\n            \"elevenlabs_stability\": elevenlabs_stability,\n            \"elevenlabs_similarity_boost\": elevenlabs_similarity_boost,\n            \"elevenlabs_style\": elevenlabs_style,\n            \"elevenlabs_speaker_boost\": elevenlabs_speaker_boost,\n            \"azure_voice_name\": azure_voice_name,\n            \"openai_voice_name\": openai_voice_name,\n            \"openai_tts_model\": openai_tts_model,\n            \"face_padding_top\": face_padding_top,\n            \"face_padding_bottom\": face_padding_bottom,\n            \"face_padding_left\": face_padding_left,\n            \"face_padding_right\": face_padding_right,\n            \"sadtalker_settings\": sadtalker_settings,\n            \"selected_model\": selected_model,\n            \"settings\": settings,\n        },\n        files={\n            \"input_face\": input_face,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                LipsyncTtsPageOutput,\n                parse_obj_as(\n                    type_=LipsyncTtsPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.llm","title":"llm","text":"<pre><code>llm(\n    *,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    input_prompt: Optional[str] = OMIT,\n    selected_models: Optional[\n        Sequence[LargeLanguageModels]\n    ] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; CompareLlmPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.llm--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.llm()\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def llm(\n    self,\n    *,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    input_prompt: typing.Optional[str] = OMIT,\n    selected_models: typing.Optional[typing.Sequence[LargeLanguageModels]] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; CompareLlmPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.llm()\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/CompareLLM/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"input_prompt\": input_prompt,\n            \"selected_models\": selected_models,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                CompareLlmPageOutput,\n                parse_obj_as(\n                    type_=CompareLlmPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.personalize_email","title":"personalize_email","text":"<pre><code>personalize_email(\n    *,\n    email_address: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    input_prompt: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; SocialLookupEmailPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.personalize_email--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.personalize_email(\n    email_address=\"email_address\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def personalize_email(\n    self,\n    *,\n    email_address: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    input_prompt: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; SocialLookupEmailPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.personalize_email(\n        email_address=\"email_address\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/SocialLookupEmail/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"email_address\": email_address,\n            \"input_prompt\": input_prompt,\n            \"selected_model\": selected_model,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                SocialLookupEmailPageOutput,\n                parse_obj_as(\n                    type_=SocialLookupEmailPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.portrait","title":"portrait","text":"<pre><code>portrait(\n    *,\n    input_image: File,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    face_scale: Optional[float] = OMIT,\n    face_pos_x: Optional[float] = OMIT,\n    face_pos_y: Optional[float] = OMIT,\n    selected_model: Optional[InpaintingModels] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    upscale_factor: Optional[float] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    seed: Optional[int] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; FaceInpaintingPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.portrait--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.portrait(\n    text_prompt=\"text_prompt\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def portrait(\n    self,\n    *,\n    input_image: core.File,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    face_scale: typing.Optional[float] = OMIT,\n    face_pos_x: typing.Optional[float] = OMIT,\n    face_pos_y: typing.Optional[float] = OMIT,\n    selected_model: typing.Optional[InpaintingModels] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    upscale_factor: typing.Optional[float] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; FaceInpaintingPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.portrait(\n        text_prompt=\"text_prompt\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/FaceInpainting/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"face_scale\": face_scale,\n            \"face_pos_x\": face_pos_x,\n            \"face_pos_y\": face_pos_y,\n            \"selected_model\": selected_model,\n            \"negative_prompt\": negative_prompt,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"upscale_factor\": upscale_factor,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"guidance_scale\": guidance_scale,\n            \"seed\": seed,\n            \"settings\": settings,\n        },\n        files={\n            \"input_image\": input_image,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                FaceInpaintingPageOutput,\n                parse_obj_as(\n                    type_=FaceInpaintingPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.product_image","title":"product_image","text":"<pre><code>product_image(\n    *,\n    input_image: File,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    obj_scale: Optional[float] = OMIT,\n    obj_pos_x: Optional[float] = OMIT,\n    obj_pos_y: Optional[float] = OMIT,\n    mask_threshold: Optional[float] = OMIT,\n    selected_model: Optional[InpaintingModels] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    sd2upscaling: Optional[bool] = OMIT,\n    seed: Optional[int] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; ObjectInpaintingPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.product_image--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.product_image(\n    text_prompt=\"text_prompt\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def product_image(\n    self,\n    *,\n    input_image: core.File,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    obj_scale: typing.Optional[float] = OMIT,\n    obj_pos_x: typing.Optional[float] = OMIT,\n    obj_pos_y: typing.Optional[float] = OMIT,\n    mask_threshold: typing.Optional[float] = OMIT,\n    selected_model: typing.Optional[InpaintingModels] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    sd2upscaling: typing.Optional[bool] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; ObjectInpaintingPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.product_image(\n        text_prompt=\"text_prompt\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/ObjectInpainting/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"obj_scale\": obj_scale,\n            \"obj_pos_x\": obj_pos_x,\n            \"obj_pos_y\": obj_pos_y,\n            \"mask_threshold\": mask_threshold,\n            \"selected_model\": selected_model,\n            \"negative_prompt\": negative_prompt,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"guidance_scale\": guidance_scale,\n            \"sd_2_upscaling\": sd2upscaling,\n            \"seed\": seed,\n            \"settings\": settings,\n        },\n        files={\n            \"input_image\": input_image,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                ObjectInpaintingPageOutput,\n                parse_obj_as(\n                    type_=ObjectInpaintingPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.qr_code","title":"qr_code","text":"<pre><code>qr_code(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    qr_code_data: Optional[str] = OMIT,\n    qr_code_input_image: Optional[File] = OMIT,\n    qr_code_vcard: Optional[Vcard] = OMIT,\n    qr_code_file: Optional[File] = OMIT,\n    use_url_shortener: Optional[bool] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    image_prompt: Optional[str] = OMIT,\n    image_prompt_controlnet_models: Optional[\n        List[ControlNetModels]\n    ] = OMIT,\n    image_prompt_strength: Optional[float] = OMIT,\n    image_prompt_scale: Optional[float] = OMIT,\n    image_prompt_pos_x: Optional[float] = OMIT,\n    image_prompt_pos_y: Optional[float] = OMIT,\n    selected_model: Optional[TextToImageModels] = OMIT,\n    selected_controlnet_model: Optional[\n        List[ControlNetModels]\n    ] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    controlnet_conditioning_scale: Optional[\n        List[float]\n    ] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    scheduler: Optional[Schedulers] = OMIT,\n    seed: Optional[int] = OMIT,\n    obj_scale: Optional[float] = OMIT,\n    obj_pos_x: Optional[float] = OMIT,\n    obj_pos_y: Optional[float] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; QrCodeGeneratorPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.qr_code--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.qr_code(\n    text_prompt=\"text_prompt\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def qr_code(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    qr_code_data: typing.Optional[str] = OMIT,\n    qr_code_input_image: typing.Optional[core.File] = OMIT,\n    qr_code_vcard: typing.Optional[Vcard] = OMIT,\n    qr_code_file: typing.Optional[core.File] = OMIT,\n    use_url_shortener: typing.Optional[bool] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    image_prompt: typing.Optional[str] = OMIT,\n    image_prompt_controlnet_models: typing.Optional[typing.List[ControlNetModels]] = OMIT,\n    image_prompt_strength: typing.Optional[float] = OMIT,\n    image_prompt_scale: typing.Optional[float] = OMIT,\n    image_prompt_pos_x: typing.Optional[float] = OMIT,\n    image_prompt_pos_y: typing.Optional[float] = OMIT,\n    selected_model: typing.Optional[TextToImageModels] = OMIT,\n    selected_controlnet_model: typing.Optional[typing.List[ControlNetModels]] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    controlnet_conditioning_scale: typing.Optional[typing.List[float]] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    scheduler: typing.Optional[Schedulers] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    obj_scale: typing.Optional[float] = OMIT,\n    obj_pos_x: typing.Optional[float] = OMIT,\n    obj_pos_y: typing.Optional[float] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; QrCodeGeneratorPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.qr_code(\n        text_prompt=\"text_prompt\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/art-qr-code/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"qr_code_data\": qr_code_data,\n            \"qr_code_vcard\": qr_code_vcard,\n            \"use_url_shortener\": use_url_shortener,\n            \"text_prompt\": text_prompt,\n            \"negative_prompt\": negative_prompt,\n            \"image_prompt\": image_prompt,\n            \"image_prompt_controlnet_models\": image_prompt_controlnet_models,\n            \"image_prompt_strength\": image_prompt_strength,\n            \"image_prompt_scale\": image_prompt_scale,\n            \"image_prompt_pos_x\": image_prompt_pos_x,\n            \"image_prompt_pos_y\": image_prompt_pos_y,\n            \"selected_model\": selected_model,\n            \"selected_controlnet_model\": selected_controlnet_model,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"guidance_scale\": guidance_scale,\n            \"controlnet_conditioning_scale\": controlnet_conditioning_scale,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"scheduler\": scheduler,\n            \"seed\": seed,\n            \"obj_scale\": obj_scale,\n            \"obj_pos_x\": obj_pos_x,\n            \"obj_pos_y\": obj_pos_y,\n            \"settings\": settings,\n        },\n        files={\n            \"qr_code_input_image\": qr_code_input_image,\n            \"qr_code_file\": qr_code_file,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                QrCodeGeneratorPageOutput,\n                parse_obj_as(\n                    type_=QrCodeGeneratorPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.rag","title":"rag","text":"<pre><code>rag(\n    *,\n    search_query: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    keyword_query: Optional[KeywordQuery] = OMIT,\n    documents: Optional[Sequence[str]] = OMIT,\n    max_references: Optional[int] = OMIT,\n    max_context_words: Optional[int] = OMIT,\n    scroll_jump: Optional[int] = OMIT,\n    doc_extract_url: Optional[str] = OMIT,\n    embedding_model: Optional[EmbeddingModels] = OMIT,\n    dense_weight: Optional[float] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    query_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    citation_style: Optional[CitationStyles] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; DocSearchPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.rag--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.rag(\n    search_query=\"search_query\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def rag(\n    self,\n    *,\n    search_query: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    keyword_query: typing.Optional[KeywordQuery] = OMIT,\n    documents: typing.Optional[typing.Sequence[str]] = OMIT,\n    max_references: typing.Optional[int] = OMIT,\n    max_context_words: typing.Optional[int] = OMIT,\n    scroll_jump: typing.Optional[int] = OMIT,\n    doc_extract_url: typing.Optional[str] = OMIT,\n    embedding_model: typing.Optional[EmbeddingModels] = OMIT,\n    dense_weight: typing.Optional[float] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    query_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    citation_style: typing.Optional[CitationStyles] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; DocSearchPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.rag(\n        search_query=\"search_query\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/doc-search/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"search_query\": search_query,\n            \"keyword_query\": keyword_query,\n            \"documents\": documents,\n            \"max_references\": max_references,\n            \"max_context_words\": max_context_words,\n            \"scroll_jump\": scroll_jump,\n            \"doc_extract_url\": doc_extract_url,\n            \"embedding_model\": embedding_model,\n            \"dense_weight\": dense_weight,\n            \"task_instructions\": task_instructions,\n            \"query_instructions\": query_instructions,\n            \"selected_model\": selected_model,\n            \"citation_style\": citation_style,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                DocSearchPageOutput,\n                parse_obj_as(\n                    type_=DocSearchPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.remix_image","title":"remix_image","text":"<pre><code>remix_image(\n    *,\n    input_image: File,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    text_prompt: Optional[str] = OMIT,\n    selected_model: Optional[ImageToImageModels] = OMIT,\n    selected_controlnet_model: Optional[\n        SelectedControlNetModels\n    ] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    prompt_strength: Optional[float] = OMIT,\n    controlnet_conditioning_scale: Optional[\n        List[float]\n    ] = OMIT,\n    seed: Optional[int] = OMIT,\n    image_guidance_scale: Optional[float] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; Img2ImgPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.remix_image--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.remix_image()\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def remix_image(\n    self,\n    *,\n    input_image: core.File,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    text_prompt: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[ImageToImageModels] = OMIT,\n    selected_controlnet_model: typing.Optional[SelectedControlNetModels] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    prompt_strength: typing.Optional[float] = OMIT,\n    controlnet_conditioning_scale: typing.Optional[typing.List[float]] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    image_guidance_scale: typing.Optional[float] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; Img2ImgPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.remix_image()\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/Img2Img/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"selected_model\": selected_model,\n            \"selected_controlnet_model\": selected_controlnet_model,\n            \"negative_prompt\": negative_prompt,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"guidance_scale\": guidance_scale,\n            \"prompt_strength\": prompt_strength,\n            \"controlnet_conditioning_scale\": controlnet_conditioning_scale,\n            \"seed\": seed,\n            \"image_guidance_scale\": image_guidance_scale,\n            \"settings\": settings,\n        },\n        files={\n            \"input_image\": input_image,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                Img2ImgPageOutput,\n                parse_obj_as(\n                    type_=Img2ImgPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.remove_background","title":"remove_background","text":"<pre><code>remove_background(\n    *,\n    input_image: File,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    selected_model: Optional[\n        ImageSegmentationModels\n    ] = OMIT,\n    mask_threshold: Optional[float] = OMIT,\n    rect_persepective_transform: Optional[bool] = OMIT,\n    reflection_opacity: Optional[float] = OMIT,\n    obj_scale: Optional[float] = OMIT,\n    obj_pos_x: Optional[float] = OMIT,\n    obj_pos_y: Optional[float] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; ImageSegmentationPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.remove_background--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.remove_background()\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def remove_background(\n    self,\n    *,\n    input_image: core.File,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    selected_model: typing.Optional[ImageSegmentationModels] = OMIT,\n    mask_threshold: typing.Optional[float] = OMIT,\n    rect_persepective_transform: typing.Optional[bool] = OMIT,\n    reflection_opacity: typing.Optional[float] = OMIT,\n    obj_scale: typing.Optional[float] = OMIT,\n    obj_pos_x: typing.Optional[float] = OMIT,\n    obj_pos_y: typing.Optional[float] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; ImageSegmentationPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.remove_background()\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/ImageSegmentation/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"selected_model\": selected_model,\n            \"mask_threshold\": mask_threshold,\n            \"rect_persepective_transform\": rect_persepective_transform,\n            \"reflection_opacity\": reflection_opacity,\n            \"obj_scale\": obj_scale,\n            \"obj_pos_x\": obj_pos_x,\n            \"obj_pos_y\": obj_pos_y,\n            \"settings\": settings,\n        },\n        files={\n            \"input_image\": input_image,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                ImageSegmentationPageOutput,\n                parse_obj_as(\n                    type_=ImageSegmentationPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.seo_content","title":"seo_content","text":"<pre><code>seo_content(\n    *,\n    search_query: str,\n    keywords: str,\n    title: str,\n    company_url: str,\n    example_id: Optional[str] = None,\n    task_instructions: Optional[str] = OMIT,\n    enable_html: Optional[bool] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: Optional[int] = OMIT,\n    enable_crosslinks: Optional[bool] = OMIT,\n    seed: Optional[int] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    serp_search_location: Optional[\n        SerpSearchLocations\n    ] = OMIT,\n    scaleserp_locations: Optional[Sequence[str]] = OMIT,\n    serp_search_type: Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: Optional[str] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; SeoSummaryPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.seo_content--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.seo_content(\n    search_query=\"search_query\",\n    keywords=\"keywords\",\n    title=\"title\",\n    company_url=\"company_url\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def seo_content(\n    self,\n    *,\n    search_query: str,\n    keywords: str,\n    title: str,\n    company_url: str,\n    example_id: typing.Optional[str] = None,\n    task_instructions: typing.Optional[str] = OMIT,\n    enable_html: typing.Optional[bool] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: typing.Optional[int] = OMIT,\n    enable_crosslinks: typing.Optional[bool] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    serp_search_location: typing.Optional[SerpSearchLocations] = OMIT,\n    scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,\n    serp_search_type: typing.Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: typing.Optional[str] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; SeoSummaryPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.seo_content(\n        search_query=\"search_query\",\n        keywords=\"keywords\",\n        title=\"title\",\n        company_url=\"company_url\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/SEOSummary/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"search_query\": search_query,\n            \"keywords\": keywords,\n            \"title\": title,\n            \"company_url\": company_url,\n            \"task_instructions\": task_instructions,\n            \"enable_html\": enable_html,\n            \"selected_model\": selected_model,\n            \"max_search_urls\": max_search_urls,\n            \"enable_crosslinks\": enable_crosslinks,\n            \"seed\": seed,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"serp_search_location\": serp_search_location,\n            \"scaleserp_locations\": scaleserp_locations,\n            \"serp_search_type\": serp_search_type,\n            \"scaleserp_search_field\": scaleserp_search_field,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                SeoSummaryPageOutput,\n                parse_obj_as(\n                    type_=SeoSummaryPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.seo_people_also_ask","title":"seo_people_also_ask","text":"<pre><code>seo_people_also_ask(\n    *,\n    search_query: str,\n    site_filter: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    query_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: Optional[int] = OMIT,\n    max_references: Optional[int] = OMIT,\n    max_context_words: Optional[int] = OMIT,\n    scroll_jump: Optional[int] = OMIT,\n    embedding_model: Optional[EmbeddingModels] = OMIT,\n    dense_weight: Optional[float] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    serp_search_location: Optional[\n        SerpSearchLocations\n    ] = OMIT,\n    scaleserp_locations: Optional[Sequence[str]] = OMIT,\n    serp_search_type: Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: Optional[str] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; RelatedQnAPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.seo_people_also_ask--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.seo_people_also_ask(\n    search_query=\"search_query\",\n    site_filter=\"site_filter\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def seo_people_also_ask(\n    self,\n    *,\n    search_query: str,\n    site_filter: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    query_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: typing.Optional[int] = OMIT,\n    max_references: typing.Optional[int] = OMIT,\n    max_context_words: typing.Optional[int] = OMIT,\n    scroll_jump: typing.Optional[int] = OMIT,\n    embedding_model: typing.Optional[EmbeddingModels] = OMIT,\n    dense_weight: typing.Optional[float] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    serp_search_location: typing.Optional[SerpSearchLocations] = OMIT,\n    scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,\n    serp_search_type: typing.Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: typing.Optional[str] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; RelatedQnAPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.seo_people_also_ask(\n        search_query=\"search_query\",\n        site_filter=\"site_filter\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/related-qna-maker/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"search_query\": search_query,\n            \"site_filter\": site_filter,\n            \"task_instructions\": task_instructions,\n            \"query_instructions\": query_instructions,\n            \"selected_model\": selected_model,\n            \"max_search_urls\": max_search_urls,\n            \"max_references\": max_references,\n            \"max_context_words\": max_context_words,\n            \"scroll_jump\": scroll_jump,\n            \"embedding_model\": embedding_model,\n            \"dense_weight\": dense_weight,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"serp_search_location\": serp_search_location,\n            \"scaleserp_locations\": scaleserp_locations,\n            \"serp_search_type\": serp_search_type,\n            \"scaleserp_search_field\": scaleserp_search_field,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                RelatedQnAPageOutput,\n                parse_obj_as(\n                    type_=RelatedQnAPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.seo_people_also_ask_doc","title":"seo_people_also_ask_doc","text":"<pre><code>seo_people_also_ask_doc(\n    *,\n    search_query: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    keyword_query: Optional[KeywordQuery] = OMIT,\n    documents: Optional[Sequence[str]] = OMIT,\n    max_references: Optional[int] = OMIT,\n    max_context_words: Optional[int] = OMIT,\n    scroll_jump: Optional[int] = OMIT,\n    doc_extract_url: Optional[str] = OMIT,\n    embedding_model: Optional[EmbeddingModels] = OMIT,\n    dense_weight: Optional[float] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    query_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    citation_style: Optional[CitationStyles] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    serp_search_location: Optional[\n        SerpSearchLocations\n    ] = OMIT,\n    scaleserp_locations: Optional[Sequence[str]] = OMIT,\n    serp_search_type: Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: Optional[str] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; RelatedQnADocPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.seo_people_also_ask_doc--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.seo_people_also_ask_doc(\n    search_query=\"search_query\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def seo_people_also_ask_doc(\n    self,\n    *,\n    search_query: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    keyword_query: typing.Optional[KeywordQuery] = OMIT,\n    documents: typing.Optional[typing.Sequence[str]] = OMIT,\n    max_references: typing.Optional[int] = OMIT,\n    max_context_words: typing.Optional[int] = OMIT,\n    scroll_jump: typing.Optional[int] = OMIT,\n    doc_extract_url: typing.Optional[str] = OMIT,\n    embedding_model: typing.Optional[EmbeddingModels] = OMIT,\n    dense_weight: typing.Optional[float] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    query_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    citation_style: typing.Optional[CitationStyles] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    serp_search_location: typing.Optional[SerpSearchLocations] = OMIT,\n    scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,\n    serp_search_type: typing.Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: typing.Optional[str] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; RelatedQnADocPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.seo_people_also_ask_doc(\n        search_query=\"search_query\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/related-qna-maker-doc/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"search_query\": search_query,\n            \"keyword_query\": keyword_query,\n            \"documents\": documents,\n            \"max_references\": max_references,\n            \"max_context_words\": max_context_words,\n            \"scroll_jump\": scroll_jump,\n            \"doc_extract_url\": doc_extract_url,\n            \"embedding_model\": embedding_model,\n            \"dense_weight\": dense_weight,\n            \"task_instructions\": task_instructions,\n            \"query_instructions\": query_instructions,\n            \"selected_model\": selected_model,\n            \"citation_style\": citation_style,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"serp_search_location\": serp_search_location,\n            \"scaleserp_locations\": scaleserp_locations,\n            \"serp_search_type\": serp_search_type,\n            \"scaleserp_search_field\": scaleserp_search_field,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                RelatedQnADocPageOutput,\n                parse_obj_as(\n                    type_=RelatedQnADocPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.smart_gpt","title":"smart_gpt","text":"<pre><code>smart_gpt(\n    *,\n    input_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    cot_prompt: Optional[str] = OMIT,\n    reflexion_prompt: Optional[str] = OMIT,\n    dera_prompt: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; SmartGptPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.smart_gpt--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.smart_gpt(\n    input_prompt=\"input_prompt\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def smart_gpt(\n    self,\n    *,\n    input_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    cot_prompt: typing.Optional[str] = OMIT,\n    reflexion_prompt: typing.Optional[str] = OMIT,\n    dera_prompt: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; SmartGptPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.smart_gpt(\n        input_prompt=\"input_prompt\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/SmartGPT/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"input_prompt\": input_prompt,\n            \"cot_prompt\": cot_prompt,\n            \"reflexion_prompt\": reflexion_prompt,\n            \"dera_prompt\": dera_prompt,\n            \"selected_model\": selected_model,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                SmartGptPageOutput,\n                parse_obj_as(\n                    type_=SmartGptPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.speech_recognition","title":"speech_recognition","text":"<pre><code>speech_recognition(\n    *,\n    documents: List[File],\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    selected_model: Optional[AsrModels] = OMIT,\n    language: Optional[str] = OMIT,\n    translation_model: Optional[TranslationModels] = OMIT,\n    output_format: Optional[AsrOutputFormat] = OMIT,\n    google_translate_target: Optional[str] = OMIT,\n    translation_source: Optional[str] = OMIT,\n    translation_target: Optional[str] = OMIT,\n    glossary_document: Optional[File] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; AsrPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.speech_recognition--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.speech_recognition()\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def speech_recognition(\n    self,\n    *,\n    documents: typing.List[core.File],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    selected_model: typing.Optional[AsrModels] = OMIT,\n    language: typing.Optional[str] = OMIT,\n    translation_model: typing.Optional[TranslationModels] = OMIT,\n    output_format: typing.Optional[AsrOutputFormat] = OMIT,\n    google_translate_target: typing.Optional[str] = OMIT,\n    translation_source: typing.Optional[str] = OMIT,\n    translation_target: typing.Optional[str] = OMIT,\n    glossary_document: typing.Optional[core.File] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; AsrPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.speech_recognition()\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/asr/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"selected_model\": selected_model,\n            \"language\": language,\n            \"translation_model\": translation_model,\n            \"output_format\": output_format,\n            \"google_translate_target\": google_translate_target,\n            \"translation_source\": translation_source,\n            \"translation_target\": translation_target,\n            \"settings\": settings,\n        },\n        files={\n            \"documents\": documents,\n            \"glossary_document\": glossary_document,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                AsrPageOutput,\n                parse_obj_as(\n                    type_=AsrPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.synthesize_data","title":"synthesize_data","text":"<pre><code>synthesize_data(\n    *,\n    documents: List[File],\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    sheet_url: Optional[File] = OMIT,\n    selected_asr_model: Optional[AsrModels] = OMIT,\n    google_translate_target: Optional[str] = OMIT,\n    glossary_document: Optional[File] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; DocExtractPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.synthesize_data--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.synthesize_data()\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def synthesize_data(\n    self,\n    *,\n    documents: typing.List[core.File],\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    sheet_url: typing.Optional[core.File] = OMIT,\n    selected_asr_model: typing.Optional[AsrModels] = OMIT,\n    google_translate_target: typing.Optional[str] = OMIT,\n    glossary_document: typing.Optional[core.File] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; DocExtractPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.synthesize_data()\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/doc-extract/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"selected_asr_model\": selected_asr_model,\n            \"google_translate_target\": google_translate_target,\n            \"task_instructions\": task_instructions,\n            \"selected_model\": selected_model,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"settings\": settings,\n        },\n        files={\n            \"documents\": documents,\n            \"sheet_url\": sheet_url,\n            \"glossary_document\": glossary_document,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                DocExtractPageOutput,\n                parse_obj_as(\n                    type_=DocExtractPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.text_to_image","title":"text_to_image","text":"<pre><code>text_to_image(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    output_width: Optional[int] = OMIT,\n    output_height: Optional[int] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    dall_e3quality: Optional[str] = OMIT,\n    dall_e3style: Optional[str] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    seed: Optional[int] = OMIT,\n    sd2upscaling: Optional[bool] = OMIT,\n    selected_models: Optional[\n        Sequence[TextToImageModels]\n    ] = OMIT,\n    scheduler: Optional[Schedulers] = OMIT,\n    edit_instruction: Optional[str] = OMIT,\n    image_guidance_scale: Optional[float] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; CompareText2ImgPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.text_to_image--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.text_to_image(\n    text_prompt=\"text_prompt\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def text_to_image(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    output_width: typing.Optional[int] = OMIT,\n    output_height: typing.Optional[int] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    dall_e3quality: typing.Optional[str] = OMIT,\n    dall_e3style: typing.Optional[str] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    sd2upscaling: typing.Optional[bool] = OMIT,\n    selected_models: typing.Optional[typing.Sequence[TextToImageModels]] = OMIT,\n    scheduler: typing.Optional[Schedulers] = OMIT,\n    edit_instruction: typing.Optional[str] = OMIT,\n    image_guidance_scale: typing.Optional[float] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; CompareText2ImgPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.text_to_image(\n        text_prompt=\"text_prompt\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/CompareText2Img/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"negative_prompt\": negative_prompt,\n            \"output_width\": output_width,\n            \"output_height\": output_height,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"dall_e_3_quality\": dall_e3quality,\n            \"dall_e_3_style\": dall_e3style,\n            \"guidance_scale\": guidance_scale,\n            \"seed\": seed,\n            \"sd_2_upscaling\": sd2upscaling,\n            \"selected_models\": selected_models,\n            \"scheduler\": scheduler,\n            \"edit_instruction\": edit_instruction,\n            \"image_guidance_scale\": image_guidance_scale,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                CompareText2ImgPageOutput,\n                parse_obj_as(\n                    type_=CompareText2ImgPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.text_to_music","title":"text_to_music","text":"<pre><code>text_to_music(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    negative_prompt: Optional[str] = OMIT,\n    duration_sec: Optional[float] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[int] = OMIT,\n    guidance_scale: Optional[float] = OMIT,\n    seed: Optional[int] = OMIT,\n    sd2upscaling: Optional[bool] = OMIT,\n    selected_models: Optional[\n        Sequence[Text2AudioModels]\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; Text2AudioPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.text_to_music--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.text_to_music(\n    text_prompt=\"text_prompt\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def text_to_music(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    negative_prompt: typing.Optional[str] = OMIT,\n    duration_sec: typing.Optional[float] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[int] = OMIT,\n    guidance_scale: typing.Optional[float] = OMIT,\n    seed: typing.Optional[int] = OMIT,\n    sd2upscaling: typing.Optional[bool] = OMIT,\n    selected_models: typing.Optional[typing.Sequence[Text2AudioModels]] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; Text2AudioPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.text_to_music(\n        text_prompt=\"text_prompt\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/text2audio/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"negative_prompt\": negative_prompt,\n            \"duration_sec\": duration_sec,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"guidance_scale\": guidance_scale,\n            \"seed\": seed,\n            \"sd_2_upscaling\": sd2upscaling,\n            \"selected_models\": selected_models,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                Text2AudioPageOutput,\n                parse_obj_as(\n                    type_=Text2AudioPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.text_to_speech","title":"text_to_speech","text":"<pre><code>text_to_speech(\n    *,\n    text_prompt: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    tts_provider: Optional[TextToSpeechProviders] = OMIT,\n    uberduck_voice_name: Optional[str] = OMIT,\n    uberduck_speaking_rate: Optional[float] = OMIT,\n    google_voice_name: Optional[str] = OMIT,\n    google_speaking_rate: Optional[float] = OMIT,\n    google_pitch: Optional[float] = OMIT,\n    bark_history_prompt: Optional[str] = OMIT,\n    elevenlabs_voice_name: Optional[str] = OMIT,\n    elevenlabs_api_key: Optional[str] = OMIT,\n    elevenlabs_voice_id: Optional[str] = OMIT,\n    elevenlabs_model: Optional[str] = OMIT,\n    elevenlabs_stability: Optional[float] = OMIT,\n    elevenlabs_similarity_boost: Optional[float] = OMIT,\n    elevenlabs_style: Optional[float] = OMIT,\n    elevenlabs_speaker_boost: Optional[bool] = OMIT,\n    azure_voice_name: Optional[str] = OMIT,\n    openai_voice_name: Optional[OpenAiTtsVoices] = OMIT,\n    openai_tts_model: Optional[OpenAiTtsModels] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; TextToSpeechPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.text_to_speech--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.text_to_speech(\n    text_prompt=\"text_prompt\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def text_to_speech(\n    self,\n    *,\n    text_prompt: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    tts_provider: typing.Optional[TextToSpeechProviders] = OMIT,\n    uberduck_voice_name: typing.Optional[str] = OMIT,\n    uberduck_speaking_rate: typing.Optional[float] = OMIT,\n    google_voice_name: typing.Optional[str] = OMIT,\n    google_speaking_rate: typing.Optional[float] = OMIT,\n    google_pitch: typing.Optional[float] = OMIT,\n    bark_history_prompt: typing.Optional[str] = OMIT,\n    elevenlabs_voice_name: typing.Optional[str] = OMIT,\n    elevenlabs_api_key: typing.Optional[str] = OMIT,\n    elevenlabs_voice_id: typing.Optional[str] = OMIT,\n    elevenlabs_model: typing.Optional[str] = OMIT,\n    elevenlabs_stability: typing.Optional[float] = OMIT,\n    elevenlabs_similarity_boost: typing.Optional[float] = OMIT,\n    elevenlabs_style: typing.Optional[float] = OMIT,\n    elevenlabs_speaker_boost: typing.Optional[bool] = OMIT,\n    azure_voice_name: typing.Optional[str] = OMIT,\n    openai_voice_name: typing.Optional[OpenAiTtsVoices] = OMIT,\n    openai_tts_model: typing.Optional[OpenAiTtsModels] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; TextToSpeechPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.text_to_speech(\n        text_prompt=\"text_prompt\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/TextToSpeech/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"text_prompt\": text_prompt,\n            \"tts_provider\": tts_provider,\n            \"uberduck_voice_name\": uberduck_voice_name,\n            \"uberduck_speaking_rate\": uberduck_speaking_rate,\n            \"google_voice_name\": google_voice_name,\n            \"google_speaking_rate\": google_speaking_rate,\n            \"google_pitch\": google_pitch,\n            \"bark_history_prompt\": bark_history_prompt,\n            \"elevenlabs_voice_name\": elevenlabs_voice_name,\n            \"elevenlabs_api_key\": elevenlabs_api_key,\n            \"elevenlabs_voice_id\": elevenlabs_voice_id,\n            \"elevenlabs_model\": elevenlabs_model,\n            \"elevenlabs_stability\": elevenlabs_stability,\n            \"elevenlabs_similarity_boost\": elevenlabs_similarity_boost,\n            \"elevenlabs_style\": elevenlabs_style,\n            \"elevenlabs_speaker_boost\": elevenlabs_speaker_boost,\n            \"azure_voice_name\": azure_voice_name,\n            \"openai_voice_name\": openai_voice_name,\n            \"openai_tts_model\": openai_tts_model,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                TextToSpeechPageOutput,\n                parse_obj_as(\n                    type_=TextToSpeechPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.translate","title":"translate","text":"<pre><code>translate(\n    *,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    texts: Optional[List[str]] = OMIT,\n    selected_model: Optional[TranslationModels] = OMIT,\n    translation_source: Optional[str] = OMIT,\n    translation_target: Optional[str] = OMIT,\n    glossary_document: Optional[File] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; TranslationPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.translate--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.translate()\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def translate(\n    self,\n    *,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    texts: typing.Optional[typing.List[str]] = OMIT,\n    selected_model: typing.Optional[TranslationModels] = OMIT,\n    translation_source: typing.Optional[str] = OMIT,\n    translation_target: typing.Optional[str] = OMIT,\n    glossary_document: typing.Optional[core.File] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; TranslationPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.translate()\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/translate/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"texts\": texts,\n            \"selected_model\": selected_model,\n            \"translation_source\": translation_source,\n            \"translation_target\": translation_target,\n            \"settings\": settings,\n        },\n        files={\n            \"glossary_document\": glossary_document,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                TranslationPageOutput,\n                parse_obj_as(\n                    type_=TranslationPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.upscale","title":"upscale","text":"<pre><code>upscale(\n    *,\n    scale: int,\n    example_id: Optional[str] = None,\n    functions: Optional[List[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    input_image: Optional[File] = OMIT,\n    input_video: Optional[File] = OMIT,\n    selected_models: Optional[List[UpscalerModels]] = OMIT,\n    selected_bg_model: Optional[\n        Literal[\"real_esrgan_x2\"]\n    ] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; CompareUpscalerPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.upscale--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.upscale(\n    scale=1,\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def upscale(\n    self,\n    *,\n    scale: int,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    input_image: typing.Optional[core.File] = OMIT,\n    input_video: typing.Optional[core.File] = OMIT,\n    selected_models: typing.Optional[typing.List[UpscalerModels]] = OMIT,\n    selected_bg_model: typing.Optional[typing.Literal[\"real_esrgan_x2\"]] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; CompareUpscalerPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.upscale(\n        scale=1,\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/compare-ai-upscalers/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"scale\": scale,\n            \"selected_models\": selected_models,\n            \"selected_bg_model\": selected_bg_model,\n            \"settings\": settings,\n        },\n        files={\n            \"input_image\": input_image,\n            \"input_video\": input_video,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                CompareUpscalerPageOutput,\n                parse_obj_as(\n                    type_=CompareUpscalerPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.web_search_llm","title":"web_search_llm","text":"<pre><code>web_search_llm(\n    *,\n    search_query: str,\n    site_filter: str,\n    example_id: Optional[str] = None,\n    functions: Optional[Sequence[RecipeFunction]] = OMIT,\n    variables: Optional[Dict[str, Optional[Any]]] = OMIT,\n    task_instructions: Optional[str] = OMIT,\n    query_instructions: Optional[str] = OMIT,\n    selected_model: Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: Optional[int] = OMIT,\n    max_references: Optional[int] = OMIT,\n    max_context_words: Optional[int] = OMIT,\n    scroll_jump: Optional[int] = OMIT,\n    embedding_model: Optional[EmbeddingModels] = OMIT,\n    dense_weight: Optional[float] = OMIT,\n    avoid_repetition: Optional[bool] = OMIT,\n    num_outputs: Optional[int] = OMIT,\n    quality: Optional[float] = OMIT,\n    max_tokens: Optional[int] = OMIT,\n    sampling_temperature: Optional[float] = OMIT,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = OMIT,\n    serp_search_location: Optional[\n        SerpSearchLocations\n    ] = OMIT,\n    scaleserp_locations: Optional[Sequence[str]] = OMIT,\n    serp_search_type: Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: Optional[str] = OMIT,\n    settings: Optional[RunSettings] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -&gt; GoogleGptPageOutput\n</code></pre>"},{"location":"reference/gooey/client/#gooey.client.Gooey.web_search_llm--examples","title":"Examples","text":"<pre><code>from gooey import Gooey\n\nclient = Gooey(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.web_search_llm(\n    search_query=\"search_query\",\n    site_filter=\"site_filter\",\n)\n</code></pre> Source code in <code>src/gooey/client.py</code> <pre><code>def web_search_llm(\n    self,\n    *,\n    search_query: str,\n    site_filter: str,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,\n    task_instructions: typing.Optional[str] = OMIT,\n    query_instructions: typing.Optional[str] = OMIT,\n    selected_model: typing.Optional[LargeLanguageModels] = OMIT,\n    max_search_urls: typing.Optional[int] = OMIT,\n    max_references: typing.Optional[int] = OMIT,\n    max_context_words: typing.Optional[int] = OMIT,\n    scroll_jump: typing.Optional[int] = OMIT,\n    embedding_model: typing.Optional[EmbeddingModels] = OMIT,\n    dense_weight: typing.Optional[float] = OMIT,\n    avoid_repetition: typing.Optional[bool] = OMIT,\n    num_outputs: typing.Optional[int] = OMIT,\n    quality: typing.Optional[float] = OMIT,\n    max_tokens: typing.Optional[int] = OMIT,\n    sampling_temperature: typing.Optional[float] = OMIT,\n    response_format_type: typing.Optional[ResponseFormatType] = OMIT,\n    serp_search_location: typing.Optional[SerpSearchLocations] = OMIT,\n    scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,\n    serp_search_type: typing.Optional[SerpSearchType] = OMIT,\n    scaleserp_search_field: typing.Optional[str] = OMIT,\n    settings: typing.Optional[RunSettings] = OMIT,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; GoogleGptPageOutput:\n    \"\"\"\n    Examples\n    --------\n    ```python\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.web_search_llm(\n        search_query=\"search_query\",\n        site_filter=\"site_filter\",\n    )\n    ```\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/google-gpt/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        json={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"search_query\": search_query,\n            \"site_filter\": site_filter,\n            \"task_instructions\": task_instructions,\n            \"query_instructions\": query_instructions,\n            \"selected_model\": selected_model,\n            \"max_search_urls\": max_search_urls,\n            \"max_references\": max_references,\n            \"max_context_words\": max_context_words,\n            \"scroll_jump\": scroll_jump,\n            \"embedding_model\": embedding_model,\n            \"dense_weight\": dense_weight,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"serp_search_location\": serp_search_location,\n            \"scaleserp_locations\": scaleserp_locations,\n            \"serp_search_type\": serp_search_type,\n            \"scaleserp_search_field\": scaleserp_search_field,\n            \"settings\": settings,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                GoogleGptPageOutput,\n                parse_obj_as(\n                    type_=GoogleGptPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/environment/","title":"gooey.environment","text":""},{"location":"reference/gooey/environment/#gooey.environment","title":"environment","text":""},{"location":"reference/gooey/version/","title":"gooey.version","text":""},{"location":"reference/gooey/version/#gooey.version","title":"version","text":""},{"location":"reference/gooey/copilot/","title":"gooey.copilot","text":""},{"location":"reference/gooey/copilot/#gooey.copilot","title":"copilot","text":""},{"location":"reference/gooey/copilot/#gooey.copilot.CopilotCompletionRequestFunctionsItem","title":"CopilotCompletionRequestFunctionsItem","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/copilot/#gooey.copilot.CopilotCompletionRequestFunctionsItem.trigger","title":"trigger  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trigger: FunctionTrigger = Field()\n</code></pre> <p>When to run this function. <code>pre</code> runs before the recipe, <code>post</code> runs after the recipe.</p>"},{"location":"reference/gooey/copilot/#gooey.copilot.CopilotCompletionRequestSadtalkerSettings","title":"CopilotCompletionRequestSadtalkerSettings","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/copilot/#gooey.copilot.CopilotCompletionRequestSadtalkerSettings.expression_scale","title":"expression_scale  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>expression_scale: Optional[float] = Field(default=None)\n</code></pre> <p>Scale the amount of expression motion. 1.0 is normal, 0.5 is very reduced, and 2.0 is quite a lot.</p>"},{"location":"reference/gooey/copilot/#gooey.copilot.CopilotCompletionRequestSadtalkerSettings.pose_style","title":"pose_style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pose_style: Optional[int] = Field(default=None)\n</code></pre> <p>Random seed 0-45 inclusive that affects how the pose is animated.</p>"},{"location":"reference/gooey/copilot/#gooey.copilot.CopilotCompletionRequestSadtalkerSettings.preprocess","title":"preprocess  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>preprocess: Optional[\n    CopilotCompletionRequestSadtalkerSettingsPreprocess\n] = Field(default=None)\n</code></pre> <p>SadTalker only generates 512x512 output. 'crop' handles this by cropping the input to 512x512. 'resize' scales down the input to fit 512x512 and scales it back up after lipsyncing (does not work well for full person images, better for portraits). 'full' processes the cropped region and pastes it back into the original input. 'extcrop' and 'extfull' are similar to 'crop' and 'full' but with extended cropping.</p>"},{"location":"reference/gooey/copilot/client/","title":"gooey.copilot.client","text":""},{"location":"reference/gooey/copilot/client/#gooey.copilot.client","title":"client","text":""},{"location":"reference/gooey/copilot/client/#gooey.copilot.client.AsyncCopilotClient","title":"AsyncCopilotClient","text":"<pre><code>AsyncCopilotClient(*, client_wrapper: AsyncClientWrapper)\n</code></pre> Source code in <code>src/gooey/copilot/client.py</code> <pre><code>def __init__(self, *, client_wrapper: AsyncClientWrapper):\n    self._client_wrapper = client_wrapper\n</code></pre>"},{"location":"reference/gooey/copilot/client/#gooey.copilot.client.AsyncCopilotClient.completion","title":"completion  <code>async</code>","text":"<pre><code>completion(\n    *,\n    example_id: Optional[str] = None,\n    functions: Optional[\n        List[CopilotCompletionRequestFunctionsItem]\n    ] = None,\n    variables: Optional[Dict[str, Optional[Any]]] = None,\n    input_prompt: Optional[str] = None,\n    input_audio: Optional[str] = None,\n    input_images: Optional[List[File]] = None,\n    input_documents: Optional[List[File]] = None,\n    doc_extract_url: Optional[str] = None,\n    messages: Optional[List[ConversationEntry]] = None,\n    bot_script: Optional[str] = None,\n    selected_model: Optional[LargeLanguageModels] = None,\n    document_model: Optional[str] = None,\n    task_instructions: Optional[str] = None,\n    query_instructions: Optional[str] = None,\n    keyword_instructions: Optional[str] = None,\n    documents: Optional[List[File]] = None,\n    max_references: Optional[int] = None,\n    max_context_words: Optional[int] = None,\n    scroll_jump: Optional[int] = None,\n    embedding_model: Optional[EmbeddingModels] = None,\n    dense_weight: Optional[float] = None,\n    citation_style: Optional[CitationStyles] = None,\n    use_url_shortener: Optional[bool] = None,\n    asr_model: Optional[AsrModels] = None,\n    asr_language: Optional[str] = None,\n    translation_model: Optional[TranslationModels] = None,\n    user_language: Optional[str] = None,\n    input_glossary_document: Optional[File] = None,\n    output_glossary_document: Optional[File] = None,\n    lipsync_model: Optional[LipsyncModels] = None,\n    tools: Optional[List[LlmTools]] = None,\n    avoid_repetition: Optional[bool] = None,\n    num_outputs: Optional[int] = None,\n    quality: Optional[float] = None,\n    max_tokens: Optional[int] = None,\n    sampling_temperature: Optional[float] = None,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = None,\n    tts_provider: Optional[TextToSpeechProviders] = None,\n    uberduck_voice_name: Optional[str] = None,\n    uberduck_speaking_rate: Optional[float] = None,\n    google_voice_name: Optional[str] = None,\n    google_speaking_rate: Optional[float] = None,\n    google_pitch: Optional[float] = None,\n    bark_history_prompt: Optional[str] = None,\n    elevenlabs_voice_name: Optional[str] = None,\n    elevenlabs_api_key: Optional[str] = None,\n    elevenlabs_voice_id: Optional[str] = None,\n    elevenlabs_model: Optional[str] = None,\n    elevenlabs_stability: Optional[float] = None,\n    elevenlabs_similarity_boost: Optional[float] = None,\n    elevenlabs_style: Optional[float] = None,\n    elevenlabs_speaker_boost: Optional[bool] = None,\n    azure_voice_name: Optional[str] = None,\n    openai_voice_name: Optional[OpenAiTtsVoices] = None,\n    openai_tts_model: Optional[OpenAiTtsModels] = None,\n    input_face: Optional[File] = None,\n    face_padding_top: Optional[int] = None,\n    face_padding_bottom: Optional[int] = None,\n    face_padding_left: Optional[int] = None,\n    face_padding_right: Optional[int] = None,\n    sadtalker_settings: Optional[\n        CopilotCompletionRequestSadtalkerSettings\n    ] = None,\n    settings: Optional[RunSettings] = None,\n    request_options: Optional[RequestOptions] = None\n) -&gt; VideoBotsPageOutput\n</code></pre>"},{"location":"reference/gooey/copilot/client/#gooey.copilot.client.AsyncCopilotClient.completion--parameters","title":"Parameters","text":"<p>example_id : typing.Optional[str]</p> <p>functions : typing.Optional[typing.List[CopilotCompletionRequestFunctionsItem]]</p> typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] <p>Variables to be used as Jinja prompt templates and in functions as arguments</p> <p>input_prompt : typing.Optional[str]</p> <p>input_audio : typing.Optional[str]</p> typing.Optional[typing.List[core.File]] <p>See core.File for more documentation</p> typing.Optional[typing.List[core.File]] <p>See core.File for more documentation</p> typing.Optional[str] <p>Select a workflow to extract text from documents and images.</p> <p>messages : typing.Optional[typing.List[ConversationEntry]]</p> <p>bot_script : typing.Optional[str]</p> <p>selected_model : typing.Optional[LargeLanguageModels]</p> typing.Optional[str] <p>When your copilot users upload a photo or pdf, what kind of document are they mostly likely to upload? (via Azure)</p> <p>task_instructions : typing.Optional[str]</p> <p>query_instructions : typing.Optional[str]</p> <p>keyword_instructions : typing.Optional[str]</p> typing.Optional[typing.List[core.File]] <p>See core.File for more documentation</p> <p>max_references : typing.Optional[int]</p> <p>max_context_words : typing.Optional[int]</p> <p>scroll_jump : typing.Optional[int]</p> <p>embedding_model : typing.Optional[EmbeddingModels]</p> <p>dense_weight : typing.Optional[float]</p> <pre><code>Weightage for dense vs sparse embeddings. `0` for sparse, `1` for dense, `0.5` for equal weight.\nGenerally speaking, dense embeddings excel at understanding the context of the query, whereas sparse vectors excel at keyword matches.\n</code></pre> <p>citation_style : typing.Optional[CitationStyles]</p> <p>use_url_shortener : typing.Optional[bool]</p> typing.Optional[AsrModels] <p>Choose a model to transcribe incoming audio messages to text.</p> typing.Optional[str] <p>Choose a language to transcribe incoming audio messages to text.</p> <p>translation_model : typing.Optional[TranslationModels]</p> typing.Optional[str] <p>Choose a language to translate incoming text &amp; audio messages to English and responses back to your selected language. Useful for low-resource languages.</p> typing.Optional[core.File] <p>See core.File for more documentation</p> typing.Optional[core.File] <p>See core.File for more documentation</p> <p>lipsync_model : typing.Optional[LipsyncModels]</p> typing.Optional[typing.List[LlmTools]] <p>Give your copilot superpowers by giving it access to tools. Powered by Function calling.</p> <p>avoid_repetition : typing.Optional[bool]</p> <p>num_outputs : typing.Optional[int]</p> <p>quality : typing.Optional[float]</p> <p>max_tokens : typing.Optional[int]</p> <p>sampling_temperature : typing.Optional[float]</p> <p>response_format_type : typing.Optional[ResponseFormatType]</p> <p>tts_provider : typing.Optional[TextToSpeechProviders]</p> <p>uberduck_voice_name : typing.Optional[str]</p> <p>uberduck_speaking_rate : typing.Optional[float]</p> <p>google_voice_name : typing.Optional[str]</p> <p>google_speaking_rate : typing.Optional[float]</p> <p>google_pitch : typing.Optional[float]</p> <p>bark_history_prompt : typing.Optional[str]</p> typing.Optional[str] <p>Use <code>elevenlabs_voice_id</code> instead</p> <p>elevenlabs_api_key : typing.Optional[str]</p> <p>elevenlabs_voice_id : typing.Optional[str]</p> <p>elevenlabs_model : typing.Optional[str]</p> <p>elevenlabs_stability : typing.Optional[float]</p> <p>elevenlabs_similarity_boost : typing.Optional[float]</p> <p>elevenlabs_style : typing.Optional[float]</p> <p>elevenlabs_speaker_boost : typing.Optional[bool]</p> <p>azure_voice_name : typing.Optional[str]</p> <p>openai_voice_name : typing.Optional[OpenAiTtsVoices]</p> <p>openai_tts_model : typing.Optional[OpenAiTtsModels]</p> typing.Optional[core.File] <p>See core.File for more documentation</p> <p>face_padding_top : typing.Optional[int]</p> <p>face_padding_bottom : typing.Optional[int]</p> <p>face_padding_left : typing.Optional[int]</p> <p>face_padding_right : typing.Optional[int]</p> <p>sadtalker_settings : typing.Optional[CopilotCompletionRequestSadtalkerSettings]</p> <p>settings : typing.Optional[RunSettings]</p> typing.Optional[RequestOptions] <p>Request-specific configuration.</p>"},{"location":"reference/gooey/copilot/client/#gooey.copilot.client.AsyncCopilotClient.completion--returns","title":"Returns","text":"<p>VideoBotsPageOutput     Successful Response</p>"},{"location":"reference/gooey/copilot/client/#gooey.copilot.client.AsyncCopilotClient.completion--examples","title":"Examples","text":"<p>import asyncio</p> <p>from gooey import AsyncGooey</p> <p>client = AsyncGooey(     api_key=\"YOUR_API_KEY\", )</p> <p>async def main() -&gt; None:     await client.copilot.completion()</p> <p>asyncio.run(main())</p> Source code in <code>src/gooey/copilot/client.py</code> <pre><code>async def completion(\n    self,\n    *,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[CopilotCompletionRequestFunctionsItem]] = None,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None,\n    input_prompt: typing.Optional[str] = None,\n    input_audio: typing.Optional[str] = None,\n    input_images: typing.Optional[typing.List[core.File]] = None,\n    input_documents: typing.Optional[typing.List[core.File]] = None,\n    doc_extract_url: typing.Optional[str] = None,\n    messages: typing.Optional[typing.List[ConversationEntry]] = None,\n    bot_script: typing.Optional[str] = None,\n    selected_model: typing.Optional[LargeLanguageModels] = None,\n    document_model: typing.Optional[str] = None,\n    task_instructions: typing.Optional[str] = None,\n    query_instructions: typing.Optional[str] = None,\n    keyword_instructions: typing.Optional[str] = None,\n    documents: typing.Optional[typing.List[core.File]] = None,\n    max_references: typing.Optional[int] = None,\n    max_context_words: typing.Optional[int] = None,\n    scroll_jump: typing.Optional[int] = None,\n    embedding_model: typing.Optional[EmbeddingModels] = None,\n    dense_weight: typing.Optional[float] = None,\n    citation_style: typing.Optional[CitationStyles] = None,\n    use_url_shortener: typing.Optional[bool] = None,\n    asr_model: typing.Optional[AsrModels] = None,\n    asr_language: typing.Optional[str] = None,\n    translation_model: typing.Optional[TranslationModels] = None,\n    user_language: typing.Optional[str] = None,\n    input_glossary_document: typing.Optional[core.File] = None,\n    output_glossary_document: typing.Optional[core.File] = None,\n    lipsync_model: typing.Optional[LipsyncModels] = None,\n    tools: typing.Optional[typing.List[LlmTools]] = None,\n    avoid_repetition: typing.Optional[bool] = None,\n    num_outputs: typing.Optional[int] = None,\n    quality: typing.Optional[float] = None,\n    max_tokens: typing.Optional[int] = None,\n    sampling_temperature: typing.Optional[float] = None,\n    response_format_type: typing.Optional[ResponseFormatType] = None,\n    tts_provider: typing.Optional[TextToSpeechProviders] = None,\n    uberduck_voice_name: typing.Optional[str] = None,\n    uberduck_speaking_rate: typing.Optional[float] = None,\n    google_voice_name: typing.Optional[str] = None,\n    google_speaking_rate: typing.Optional[float] = None,\n    google_pitch: typing.Optional[float] = None,\n    bark_history_prompt: typing.Optional[str] = None,\n    elevenlabs_voice_name: typing.Optional[str] = None,\n    elevenlabs_api_key: typing.Optional[str] = None,\n    elevenlabs_voice_id: typing.Optional[str] = None,\n    elevenlabs_model: typing.Optional[str] = None,\n    elevenlabs_stability: typing.Optional[float] = None,\n    elevenlabs_similarity_boost: typing.Optional[float] = None,\n    elevenlabs_style: typing.Optional[float] = None,\n    elevenlabs_speaker_boost: typing.Optional[bool] = None,\n    azure_voice_name: typing.Optional[str] = None,\n    openai_voice_name: typing.Optional[OpenAiTtsVoices] = None,\n    openai_tts_model: typing.Optional[OpenAiTtsModels] = None,\n    input_face: typing.Optional[core.File] = None,\n    face_padding_top: typing.Optional[int] = None,\n    face_padding_bottom: typing.Optional[int] = None,\n    face_padding_left: typing.Optional[int] = None,\n    face_padding_right: typing.Optional[int] = None,\n    sadtalker_settings: typing.Optional[CopilotCompletionRequestSadtalkerSettings] = None,\n    settings: typing.Optional[RunSettings] = None,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; VideoBotsPageOutput:\n    \"\"\"\n    Parameters\n    ----------\n    example_id : typing.Optional[str]\n\n    functions : typing.Optional[typing.List[CopilotCompletionRequestFunctionsItem]]\n\n    variables : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]\n        Variables to be used as Jinja prompt templates and in functions as arguments\n\n    input_prompt : typing.Optional[str]\n\n    input_audio : typing.Optional[str]\n\n    input_images : typing.Optional[typing.List[core.File]]\n        See core.File for more documentation\n\n    input_documents : typing.Optional[typing.List[core.File]]\n        See core.File for more documentation\n\n    doc_extract_url : typing.Optional[str]\n        Select a workflow to extract text from documents and images.\n\n    messages : typing.Optional[typing.List[ConversationEntry]]\n\n    bot_script : typing.Optional[str]\n\n    selected_model : typing.Optional[LargeLanguageModels]\n\n    document_model : typing.Optional[str]\n        When your copilot users upload a photo or pdf, what kind of document are they mostly likely to upload? (via [Azure](https://learn.microsoft.com/en-us/azure/ai-services/document-intelligence/how-to-guides/use-sdk-rest-api?view=doc-intel-3.1.0&amp;tabs=linux&amp;pivots=programming-language-rest-api))\n\n    task_instructions : typing.Optional[str]\n\n    query_instructions : typing.Optional[str]\n\n    keyword_instructions : typing.Optional[str]\n\n    documents : typing.Optional[typing.List[core.File]]\n        See core.File for more documentation\n\n    max_references : typing.Optional[int]\n\n    max_context_words : typing.Optional[int]\n\n    scroll_jump : typing.Optional[int]\n\n    embedding_model : typing.Optional[EmbeddingModels]\n\n    dense_weight : typing.Optional[float]\n\n        Weightage for dense vs sparse embeddings. `0` for sparse, `1` for dense, `0.5` for equal weight.\n        Generally speaking, dense embeddings excel at understanding the context of the query, whereas sparse vectors excel at keyword matches.\n\n\n    citation_style : typing.Optional[CitationStyles]\n\n    use_url_shortener : typing.Optional[bool]\n\n    asr_model : typing.Optional[AsrModels]\n        Choose a model to transcribe incoming audio messages to text.\n\n    asr_language : typing.Optional[str]\n        Choose a language to transcribe incoming audio messages to text.\n\n    translation_model : typing.Optional[TranslationModels]\n\n    user_language : typing.Optional[str]\n        Choose a language to translate incoming text &amp; audio messages to English and responses back to your selected language. Useful for low-resource languages.\n\n    input_glossary_document : typing.Optional[core.File]\n        See core.File for more documentation\n\n    output_glossary_document : typing.Optional[core.File]\n        See core.File for more documentation\n\n    lipsync_model : typing.Optional[LipsyncModels]\n\n    tools : typing.Optional[typing.List[LlmTools]]\n        Give your copilot superpowers by giving it access to tools. Powered by [Function calling](https://platform.openai.com/docs/guides/function-calling).\n\n    avoid_repetition : typing.Optional[bool]\n\n    num_outputs : typing.Optional[int]\n\n    quality : typing.Optional[float]\n\n    max_tokens : typing.Optional[int]\n\n    sampling_temperature : typing.Optional[float]\n\n    response_format_type : typing.Optional[ResponseFormatType]\n\n    tts_provider : typing.Optional[TextToSpeechProviders]\n\n    uberduck_voice_name : typing.Optional[str]\n\n    uberduck_speaking_rate : typing.Optional[float]\n\n    google_voice_name : typing.Optional[str]\n\n    google_speaking_rate : typing.Optional[float]\n\n    google_pitch : typing.Optional[float]\n\n    bark_history_prompt : typing.Optional[str]\n\n    elevenlabs_voice_name : typing.Optional[str]\n        Use `elevenlabs_voice_id` instead\n\n    elevenlabs_api_key : typing.Optional[str]\n\n    elevenlabs_voice_id : typing.Optional[str]\n\n    elevenlabs_model : typing.Optional[str]\n\n    elevenlabs_stability : typing.Optional[float]\n\n    elevenlabs_similarity_boost : typing.Optional[float]\n\n    elevenlabs_style : typing.Optional[float]\n\n    elevenlabs_speaker_boost : typing.Optional[bool]\n\n    azure_voice_name : typing.Optional[str]\n\n    openai_voice_name : typing.Optional[OpenAiTtsVoices]\n\n    openai_tts_model : typing.Optional[OpenAiTtsModels]\n\n    input_face : typing.Optional[core.File]\n        See core.File for more documentation\n\n    face_padding_top : typing.Optional[int]\n\n    face_padding_bottom : typing.Optional[int]\n\n    face_padding_left : typing.Optional[int]\n\n    face_padding_right : typing.Optional[int]\n\n    sadtalker_settings : typing.Optional[CopilotCompletionRequestSadtalkerSettings]\n\n    settings : typing.Optional[RunSettings]\n\n    request_options : typing.Optional[RequestOptions]\n        Request-specific configuration.\n\n    Returns\n    -------\n    VideoBotsPageOutput\n        Successful Response\n\n    Examples\n    --------\n    import asyncio\n\n    from gooey import AsyncGooey\n\n    client = AsyncGooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n\n\n    async def main() -&gt; None:\n        await client.copilot.completion()\n\n\n    asyncio.run(main())\n    \"\"\"\n    _response = await self._client_wrapper.httpx_client.request(\n        \"v3/video-bots/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"input_prompt\": input_prompt,\n            \"input_audio\": input_audio,\n            \"doc_extract_url\": doc_extract_url,\n            \"messages\": messages,\n            \"bot_script\": bot_script,\n            \"selected_model\": selected_model,\n            \"document_model\": document_model,\n            \"task_instructions\": task_instructions,\n            \"query_instructions\": query_instructions,\n            \"keyword_instructions\": keyword_instructions,\n            \"max_references\": max_references,\n            \"max_context_words\": max_context_words,\n            \"scroll_jump\": scroll_jump,\n            \"embedding_model\": embedding_model,\n            \"dense_weight\": dense_weight,\n            \"citation_style\": citation_style,\n            \"use_url_shortener\": use_url_shortener,\n            \"asr_model\": asr_model,\n            \"asr_language\": asr_language,\n            \"translation_model\": translation_model,\n            \"user_language\": user_language,\n            \"lipsync_model\": lipsync_model,\n            \"tools\": tools,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"tts_provider\": tts_provider,\n            \"uberduck_voice_name\": uberduck_voice_name,\n            \"uberduck_speaking_rate\": uberduck_speaking_rate,\n            \"google_voice_name\": google_voice_name,\n            \"google_speaking_rate\": google_speaking_rate,\n            \"google_pitch\": google_pitch,\n            \"bark_history_prompt\": bark_history_prompt,\n            \"elevenlabs_voice_name\": elevenlabs_voice_name,\n            \"elevenlabs_api_key\": elevenlabs_api_key,\n            \"elevenlabs_voice_id\": elevenlabs_voice_id,\n            \"elevenlabs_model\": elevenlabs_model,\n            \"elevenlabs_stability\": elevenlabs_stability,\n            \"elevenlabs_similarity_boost\": elevenlabs_similarity_boost,\n            \"elevenlabs_style\": elevenlabs_style,\n            \"elevenlabs_speaker_boost\": elevenlabs_speaker_boost,\n            \"azure_voice_name\": azure_voice_name,\n            \"openai_voice_name\": openai_voice_name,\n            \"openai_tts_model\": openai_tts_model,\n            \"face_padding_top\": face_padding_top,\n            \"face_padding_bottom\": face_padding_bottom,\n            \"face_padding_left\": face_padding_left,\n            \"face_padding_right\": face_padding_right,\n            \"sadtalker_settings\": sadtalker_settings,\n            \"settings\": settings,\n        },\n        files={\n            \"input_images\": input_images,\n            \"input_documents\": input_documents,\n            \"documents\": documents,\n            \"input_glossary_document\": input_glossary_document,\n            \"output_glossary_document\": output_glossary_document,\n            \"input_face\": input_face,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                VideoBotsPageOutput,\n                parse_obj_as(\n                    type_=VideoBotsPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/copilot/client/#gooey.copilot.client.CopilotClient","title":"CopilotClient","text":"<pre><code>CopilotClient(*, client_wrapper: SyncClientWrapper)\n</code></pre> Source code in <code>src/gooey/copilot/client.py</code> <pre><code>def __init__(self, *, client_wrapper: SyncClientWrapper):\n    self._client_wrapper = client_wrapper\n</code></pre>"},{"location":"reference/gooey/copilot/client/#gooey.copilot.client.CopilotClient.completion","title":"completion","text":"<pre><code>completion(\n    *,\n    example_id: Optional[str] = None,\n    functions: Optional[\n        List[CopilotCompletionRequestFunctionsItem]\n    ] = None,\n    variables: Optional[Dict[str, Optional[Any]]] = None,\n    input_prompt: Optional[str] = None,\n    input_audio: Optional[str] = None,\n    input_images: Optional[List[File]] = None,\n    input_documents: Optional[List[File]] = None,\n    doc_extract_url: Optional[str] = None,\n    messages: Optional[List[ConversationEntry]] = None,\n    bot_script: Optional[str] = None,\n    selected_model: Optional[LargeLanguageModels] = None,\n    document_model: Optional[str] = None,\n    task_instructions: Optional[str] = None,\n    query_instructions: Optional[str] = None,\n    keyword_instructions: Optional[str] = None,\n    documents: Optional[List[File]] = None,\n    max_references: Optional[int] = None,\n    max_context_words: Optional[int] = None,\n    scroll_jump: Optional[int] = None,\n    embedding_model: Optional[EmbeddingModels] = None,\n    dense_weight: Optional[float] = None,\n    citation_style: Optional[CitationStyles] = None,\n    use_url_shortener: Optional[bool] = None,\n    asr_model: Optional[AsrModels] = None,\n    asr_language: Optional[str] = None,\n    translation_model: Optional[TranslationModels] = None,\n    user_language: Optional[str] = None,\n    input_glossary_document: Optional[File] = None,\n    output_glossary_document: Optional[File] = None,\n    lipsync_model: Optional[LipsyncModels] = None,\n    tools: Optional[List[LlmTools]] = None,\n    avoid_repetition: Optional[bool] = None,\n    num_outputs: Optional[int] = None,\n    quality: Optional[float] = None,\n    max_tokens: Optional[int] = None,\n    sampling_temperature: Optional[float] = None,\n    response_format_type: Optional[\n        ResponseFormatType\n    ] = None,\n    tts_provider: Optional[TextToSpeechProviders] = None,\n    uberduck_voice_name: Optional[str] = None,\n    uberduck_speaking_rate: Optional[float] = None,\n    google_voice_name: Optional[str] = None,\n    google_speaking_rate: Optional[float] = None,\n    google_pitch: Optional[float] = None,\n    bark_history_prompt: Optional[str] = None,\n    elevenlabs_voice_name: Optional[str] = None,\n    elevenlabs_api_key: Optional[str] = None,\n    elevenlabs_voice_id: Optional[str] = None,\n    elevenlabs_model: Optional[str] = None,\n    elevenlabs_stability: Optional[float] = None,\n    elevenlabs_similarity_boost: Optional[float] = None,\n    elevenlabs_style: Optional[float] = None,\n    elevenlabs_speaker_boost: Optional[bool] = None,\n    azure_voice_name: Optional[str] = None,\n    openai_voice_name: Optional[OpenAiTtsVoices] = None,\n    openai_tts_model: Optional[OpenAiTtsModels] = None,\n    input_face: Optional[File] = None,\n    face_padding_top: Optional[int] = None,\n    face_padding_bottom: Optional[int] = None,\n    face_padding_left: Optional[int] = None,\n    face_padding_right: Optional[int] = None,\n    sadtalker_settings: Optional[\n        CopilotCompletionRequestSadtalkerSettings\n    ] = None,\n    settings: Optional[RunSettings] = None,\n    request_options: Optional[RequestOptions] = None\n) -&gt; VideoBotsPageOutput\n</code></pre>"},{"location":"reference/gooey/copilot/client/#gooey.copilot.client.CopilotClient.completion--parameters","title":"Parameters","text":"<p>example_id : typing.Optional[str]</p> <p>functions : typing.Optional[typing.List[CopilotCompletionRequestFunctionsItem]]</p> typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] <p>Variables to be used as Jinja prompt templates and in functions as arguments</p> <p>input_prompt : typing.Optional[str]</p> <p>input_audio : typing.Optional[str]</p> typing.Optional[typing.List[core.File]] <p>See core.File for more documentation</p> typing.Optional[typing.List[core.File]] <p>See core.File for more documentation</p> typing.Optional[str] <p>Select a workflow to extract text from documents and images.</p> <p>messages : typing.Optional[typing.List[ConversationEntry]]</p> <p>bot_script : typing.Optional[str]</p> <p>selected_model : typing.Optional[LargeLanguageModels]</p> typing.Optional[str] <p>When your copilot users upload a photo or pdf, what kind of document are they mostly likely to upload? (via Azure)</p> <p>task_instructions : typing.Optional[str]</p> <p>query_instructions : typing.Optional[str]</p> <p>keyword_instructions : typing.Optional[str]</p> typing.Optional[typing.List[core.File]] <p>See core.File for more documentation</p> <p>max_references : typing.Optional[int]</p> <p>max_context_words : typing.Optional[int]</p> <p>scroll_jump : typing.Optional[int]</p> <p>embedding_model : typing.Optional[EmbeddingModels]</p> <p>dense_weight : typing.Optional[float]</p> <pre><code>Weightage for dense vs sparse embeddings. `0` for sparse, `1` for dense, `0.5` for equal weight.\nGenerally speaking, dense embeddings excel at understanding the context of the query, whereas sparse vectors excel at keyword matches.\n</code></pre> <p>citation_style : typing.Optional[CitationStyles]</p> <p>use_url_shortener : typing.Optional[bool]</p> typing.Optional[AsrModels] <p>Choose a model to transcribe incoming audio messages to text.</p> typing.Optional[str] <p>Choose a language to transcribe incoming audio messages to text.</p> <p>translation_model : typing.Optional[TranslationModels]</p> typing.Optional[str] <p>Choose a language to translate incoming text &amp; audio messages to English and responses back to your selected language. Useful for low-resource languages.</p> typing.Optional[core.File] <p>See core.File for more documentation</p> typing.Optional[core.File] <p>See core.File for more documentation</p> <p>lipsync_model : typing.Optional[LipsyncModels]</p> typing.Optional[typing.List[LlmTools]] <p>Give your copilot superpowers by giving it access to tools. Powered by Function calling.</p> <p>avoid_repetition : typing.Optional[bool]</p> <p>num_outputs : typing.Optional[int]</p> <p>quality : typing.Optional[float]</p> <p>max_tokens : typing.Optional[int]</p> <p>sampling_temperature : typing.Optional[float]</p> <p>response_format_type : typing.Optional[ResponseFormatType]</p> <p>tts_provider : typing.Optional[TextToSpeechProviders]</p> <p>uberduck_voice_name : typing.Optional[str]</p> <p>uberduck_speaking_rate : typing.Optional[float]</p> <p>google_voice_name : typing.Optional[str]</p> <p>google_speaking_rate : typing.Optional[float]</p> <p>google_pitch : typing.Optional[float]</p> <p>bark_history_prompt : typing.Optional[str]</p> typing.Optional[str] <p>Use <code>elevenlabs_voice_id</code> instead</p> <p>elevenlabs_api_key : typing.Optional[str]</p> <p>elevenlabs_voice_id : typing.Optional[str]</p> <p>elevenlabs_model : typing.Optional[str]</p> <p>elevenlabs_stability : typing.Optional[float]</p> <p>elevenlabs_similarity_boost : typing.Optional[float]</p> <p>elevenlabs_style : typing.Optional[float]</p> <p>elevenlabs_speaker_boost : typing.Optional[bool]</p> <p>azure_voice_name : typing.Optional[str]</p> <p>openai_voice_name : typing.Optional[OpenAiTtsVoices]</p> <p>openai_tts_model : typing.Optional[OpenAiTtsModels]</p> typing.Optional[core.File] <p>See core.File for more documentation</p> <p>face_padding_top : typing.Optional[int]</p> <p>face_padding_bottom : typing.Optional[int]</p> <p>face_padding_left : typing.Optional[int]</p> <p>face_padding_right : typing.Optional[int]</p> <p>sadtalker_settings : typing.Optional[CopilotCompletionRequestSadtalkerSettings]</p> <p>settings : typing.Optional[RunSettings]</p> typing.Optional[RequestOptions] <p>Request-specific configuration.</p>"},{"location":"reference/gooey/copilot/client/#gooey.copilot.client.CopilotClient.completion--returns","title":"Returns","text":"<p>VideoBotsPageOutput     Successful Response</p>"},{"location":"reference/gooey/copilot/client/#gooey.copilot.client.CopilotClient.completion--examples","title":"Examples","text":"<p>from gooey import Gooey</p> <p>client = Gooey(     api_key=\"YOUR_API_KEY\", ) client.copilot.completion()</p> Source code in <code>src/gooey/copilot/client.py</code> <pre><code>def completion(\n    self,\n    *,\n    example_id: typing.Optional[str] = None,\n    functions: typing.Optional[typing.List[CopilotCompletionRequestFunctionsItem]] = None,\n    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None,\n    input_prompt: typing.Optional[str] = None,\n    input_audio: typing.Optional[str] = None,\n    input_images: typing.Optional[typing.List[core.File]] = None,\n    input_documents: typing.Optional[typing.List[core.File]] = None,\n    doc_extract_url: typing.Optional[str] = None,\n    messages: typing.Optional[typing.List[ConversationEntry]] = None,\n    bot_script: typing.Optional[str] = None,\n    selected_model: typing.Optional[LargeLanguageModels] = None,\n    document_model: typing.Optional[str] = None,\n    task_instructions: typing.Optional[str] = None,\n    query_instructions: typing.Optional[str] = None,\n    keyword_instructions: typing.Optional[str] = None,\n    documents: typing.Optional[typing.List[core.File]] = None,\n    max_references: typing.Optional[int] = None,\n    max_context_words: typing.Optional[int] = None,\n    scroll_jump: typing.Optional[int] = None,\n    embedding_model: typing.Optional[EmbeddingModels] = None,\n    dense_weight: typing.Optional[float] = None,\n    citation_style: typing.Optional[CitationStyles] = None,\n    use_url_shortener: typing.Optional[bool] = None,\n    asr_model: typing.Optional[AsrModels] = None,\n    asr_language: typing.Optional[str] = None,\n    translation_model: typing.Optional[TranslationModels] = None,\n    user_language: typing.Optional[str] = None,\n    input_glossary_document: typing.Optional[core.File] = None,\n    output_glossary_document: typing.Optional[core.File] = None,\n    lipsync_model: typing.Optional[LipsyncModels] = None,\n    tools: typing.Optional[typing.List[LlmTools]] = None,\n    avoid_repetition: typing.Optional[bool] = None,\n    num_outputs: typing.Optional[int] = None,\n    quality: typing.Optional[float] = None,\n    max_tokens: typing.Optional[int] = None,\n    sampling_temperature: typing.Optional[float] = None,\n    response_format_type: typing.Optional[ResponseFormatType] = None,\n    tts_provider: typing.Optional[TextToSpeechProviders] = None,\n    uberduck_voice_name: typing.Optional[str] = None,\n    uberduck_speaking_rate: typing.Optional[float] = None,\n    google_voice_name: typing.Optional[str] = None,\n    google_speaking_rate: typing.Optional[float] = None,\n    google_pitch: typing.Optional[float] = None,\n    bark_history_prompt: typing.Optional[str] = None,\n    elevenlabs_voice_name: typing.Optional[str] = None,\n    elevenlabs_api_key: typing.Optional[str] = None,\n    elevenlabs_voice_id: typing.Optional[str] = None,\n    elevenlabs_model: typing.Optional[str] = None,\n    elevenlabs_stability: typing.Optional[float] = None,\n    elevenlabs_similarity_boost: typing.Optional[float] = None,\n    elevenlabs_style: typing.Optional[float] = None,\n    elevenlabs_speaker_boost: typing.Optional[bool] = None,\n    azure_voice_name: typing.Optional[str] = None,\n    openai_voice_name: typing.Optional[OpenAiTtsVoices] = None,\n    openai_tts_model: typing.Optional[OpenAiTtsModels] = None,\n    input_face: typing.Optional[core.File] = None,\n    face_padding_top: typing.Optional[int] = None,\n    face_padding_bottom: typing.Optional[int] = None,\n    face_padding_left: typing.Optional[int] = None,\n    face_padding_right: typing.Optional[int] = None,\n    sadtalker_settings: typing.Optional[CopilotCompletionRequestSadtalkerSettings] = None,\n    settings: typing.Optional[RunSettings] = None,\n    request_options: typing.Optional[RequestOptions] = None,\n) -&gt; VideoBotsPageOutput:\n    \"\"\"\n    Parameters\n    ----------\n    example_id : typing.Optional[str]\n\n    functions : typing.Optional[typing.List[CopilotCompletionRequestFunctionsItem]]\n\n    variables : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]\n        Variables to be used as Jinja prompt templates and in functions as arguments\n\n    input_prompt : typing.Optional[str]\n\n    input_audio : typing.Optional[str]\n\n    input_images : typing.Optional[typing.List[core.File]]\n        See core.File for more documentation\n\n    input_documents : typing.Optional[typing.List[core.File]]\n        See core.File for more documentation\n\n    doc_extract_url : typing.Optional[str]\n        Select a workflow to extract text from documents and images.\n\n    messages : typing.Optional[typing.List[ConversationEntry]]\n\n    bot_script : typing.Optional[str]\n\n    selected_model : typing.Optional[LargeLanguageModels]\n\n    document_model : typing.Optional[str]\n        When your copilot users upload a photo or pdf, what kind of document are they mostly likely to upload? (via [Azure](https://learn.microsoft.com/en-us/azure/ai-services/document-intelligence/how-to-guides/use-sdk-rest-api?view=doc-intel-3.1.0&amp;tabs=linux&amp;pivots=programming-language-rest-api))\n\n    task_instructions : typing.Optional[str]\n\n    query_instructions : typing.Optional[str]\n\n    keyword_instructions : typing.Optional[str]\n\n    documents : typing.Optional[typing.List[core.File]]\n        See core.File for more documentation\n\n    max_references : typing.Optional[int]\n\n    max_context_words : typing.Optional[int]\n\n    scroll_jump : typing.Optional[int]\n\n    embedding_model : typing.Optional[EmbeddingModels]\n\n    dense_weight : typing.Optional[float]\n\n        Weightage for dense vs sparse embeddings. `0` for sparse, `1` for dense, `0.5` for equal weight.\n        Generally speaking, dense embeddings excel at understanding the context of the query, whereas sparse vectors excel at keyword matches.\n\n\n    citation_style : typing.Optional[CitationStyles]\n\n    use_url_shortener : typing.Optional[bool]\n\n    asr_model : typing.Optional[AsrModels]\n        Choose a model to transcribe incoming audio messages to text.\n\n    asr_language : typing.Optional[str]\n        Choose a language to transcribe incoming audio messages to text.\n\n    translation_model : typing.Optional[TranslationModels]\n\n    user_language : typing.Optional[str]\n        Choose a language to translate incoming text &amp; audio messages to English and responses back to your selected language. Useful for low-resource languages.\n\n    input_glossary_document : typing.Optional[core.File]\n        See core.File for more documentation\n\n    output_glossary_document : typing.Optional[core.File]\n        See core.File for more documentation\n\n    lipsync_model : typing.Optional[LipsyncModels]\n\n    tools : typing.Optional[typing.List[LlmTools]]\n        Give your copilot superpowers by giving it access to tools. Powered by [Function calling](https://platform.openai.com/docs/guides/function-calling).\n\n    avoid_repetition : typing.Optional[bool]\n\n    num_outputs : typing.Optional[int]\n\n    quality : typing.Optional[float]\n\n    max_tokens : typing.Optional[int]\n\n    sampling_temperature : typing.Optional[float]\n\n    response_format_type : typing.Optional[ResponseFormatType]\n\n    tts_provider : typing.Optional[TextToSpeechProviders]\n\n    uberduck_voice_name : typing.Optional[str]\n\n    uberduck_speaking_rate : typing.Optional[float]\n\n    google_voice_name : typing.Optional[str]\n\n    google_speaking_rate : typing.Optional[float]\n\n    google_pitch : typing.Optional[float]\n\n    bark_history_prompt : typing.Optional[str]\n\n    elevenlabs_voice_name : typing.Optional[str]\n        Use `elevenlabs_voice_id` instead\n\n    elevenlabs_api_key : typing.Optional[str]\n\n    elevenlabs_voice_id : typing.Optional[str]\n\n    elevenlabs_model : typing.Optional[str]\n\n    elevenlabs_stability : typing.Optional[float]\n\n    elevenlabs_similarity_boost : typing.Optional[float]\n\n    elevenlabs_style : typing.Optional[float]\n\n    elevenlabs_speaker_boost : typing.Optional[bool]\n\n    azure_voice_name : typing.Optional[str]\n\n    openai_voice_name : typing.Optional[OpenAiTtsVoices]\n\n    openai_tts_model : typing.Optional[OpenAiTtsModels]\n\n    input_face : typing.Optional[core.File]\n        See core.File for more documentation\n\n    face_padding_top : typing.Optional[int]\n\n    face_padding_bottom : typing.Optional[int]\n\n    face_padding_left : typing.Optional[int]\n\n    face_padding_right : typing.Optional[int]\n\n    sadtalker_settings : typing.Optional[CopilotCompletionRequestSadtalkerSettings]\n\n    settings : typing.Optional[RunSettings]\n\n    request_options : typing.Optional[RequestOptions]\n        Request-specific configuration.\n\n    Returns\n    -------\n    VideoBotsPageOutput\n        Successful Response\n\n    Examples\n    --------\n    from gooey import Gooey\n\n    client = Gooey(\n        api_key=\"YOUR_API_KEY\",\n    )\n    client.copilot.completion()\n    \"\"\"\n    _response = self._client_wrapper.httpx_client.request(\n        \"v3/video-bots/async\",\n        method=\"POST\",\n        params={\n            \"example_id\": example_id,\n        },\n        data={\n            \"functions\": functions,\n            \"variables\": variables,\n            \"input_prompt\": input_prompt,\n            \"input_audio\": input_audio,\n            \"doc_extract_url\": doc_extract_url,\n            \"messages\": messages,\n            \"bot_script\": bot_script,\n            \"selected_model\": selected_model,\n            \"document_model\": document_model,\n            \"task_instructions\": task_instructions,\n            \"query_instructions\": query_instructions,\n            \"keyword_instructions\": keyword_instructions,\n            \"max_references\": max_references,\n            \"max_context_words\": max_context_words,\n            \"scroll_jump\": scroll_jump,\n            \"embedding_model\": embedding_model,\n            \"dense_weight\": dense_weight,\n            \"citation_style\": citation_style,\n            \"use_url_shortener\": use_url_shortener,\n            \"asr_model\": asr_model,\n            \"asr_language\": asr_language,\n            \"translation_model\": translation_model,\n            \"user_language\": user_language,\n            \"lipsync_model\": lipsync_model,\n            \"tools\": tools,\n            \"avoid_repetition\": avoid_repetition,\n            \"num_outputs\": num_outputs,\n            \"quality\": quality,\n            \"max_tokens\": max_tokens,\n            \"sampling_temperature\": sampling_temperature,\n            \"response_format_type\": response_format_type,\n            \"tts_provider\": tts_provider,\n            \"uberduck_voice_name\": uberduck_voice_name,\n            \"uberduck_speaking_rate\": uberduck_speaking_rate,\n            \"google_voice_name\": google_voice_name,\n            \"google_speaking_rate\": google_speaking_rate,\n            \"google_pitch\": google_pitch,\n            \"bark_history_prompt\": bark_history_prompt,\n            \"elevenlabs_voice_name\": elevenlabs_voice_name,\n            \"elevenlabs_api_key\": elevenlabs_api_key,\n            \"elevenlabs_voice_id\": elevenlabs_voice_id,\n            \"elevenlabs_model\": elevenlabs_model,\n            \"elevenlabs_stability\": elevenlabs_stability,\n            \"elevenlabs_similarity_boost\": elevenlabs_similarity_boost,\n            \"elevenlabs_style\": elevenlabs_style,\n            \"elevenlabs_speaker_boost\": elevenlabs_speaker_boost,\n            \"azure_voice_name\": azure_voice_name,\n            \"openai_voice_name\": openai_voice_name,\n            \"openai_tts_model\": openai_tts_model,\n            \"face_padding_top\": face_padding_top,\n            \"face_padding_bottom\": face_padding_bottom,\n            \"face_padding_left\": face_padding_left,\n            \"face_padding_right\": face_padding_right,\n            \"sadtalker_settings\": sadtalker_settings,\n            \"settings\": settings,\n        },\n        files={\n            \"input_images\": input_images,\n            \"input_documents\": input_documents,\n            \"documents\": documents,\n            \"input_glossary_document\": input_glossary_document,\n            \"output_glossary_document\": output_glossary_document,\n            \"input_face\": input_face,\n        },\n        request_options=request_options,\n        omit=OMIT,\n    )\n    try:\n        if 200 &lt;= _response.status_code &lt; 300:\n            return typing.cast(\n                VideoBotsPageOutput,\n                parse_obj_as(\n                    type_=VideoBotsPageOutput,  # type: ignore\n                    object_=_response.json(),\n                ),\n            )\n        if _response.status_code == 402:\n            raise PaymentRequiredError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 422:\n            raise UnprocessableEntityError(\n                typing.cast(\n                    HttpValidationError,\n                    parse_obj_as(\n                        type_=HttpValidationError,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        if _response.status_code == 429:\n            raise TooManyRequestsError(\n                typing.cast(\n                    GenericErrorResponse,\n                    parse_obj_as(\n                        type_=GenericErrorResponse,  # type: ignore\n                        object_=_response.json(),\n                    ),\n                )\n            )\n        _response_json = _response.json()\n    except JSONDecodeError:\n        raise ApiError(status_code=_response.status_code, body=_response.text)\n    raise ApiError(status_code=_response.status_code, body=_response_json)\n</code></pre>"},{"location":"reference/gooey/copilot/types/","title":"gooey.copilot.types","text":""},{"location":"reference/gooey/copilot/types/#gooey.copilot.types","title":"types","text":""},{"location":"reference/gooey/copilot/types/#gooey.copilot.types.CopilotCompletionRequestFunctionsItem","title":"CopilotCompletionRequestFunctionsItem","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/copilot/types/#gooey.copilot.types.CopilotCompletionRequestFunctionsItem.trigger","title":"trigger  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trigger: FunctionTrigger = Field()\n</code></pre> <p>When to run this function. <code>pre</code> runs before the recipe, <code>post</code> runs after the recipe.</p>"},{"location":"reference/gooey/copilot/types/#gooey.copilot.types.CopilotCompletionRequestSadtalkerSettings","title":"CopilotCompletionRequestSadtalkerSettings","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/copilot/types/#gooey.copilot.types.CopilotCompletionRequestSadtalkerSettings.expression_scale","title":"expression_scale  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>expression_scale: Optional[float] = Field(default=None)\n</code></pre> <p>Scale the amount of expression motion. 1.0 is normal, 0.5 is very reduced, and 2.0 is quite a lot.</p>"},{"location":"reference/gooey/copilot/types/#gooey.copilot.types.CopilotCompletionRequestSadtalkerSettings.pose_style","title":"pose_style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pose_style: Optional[int] = Field(default=None)\n</code></pre> <p>Random seed 0-45 inclusive that affects how the pose is animated.</p>"},{"location":"reference/gooey/copilot/types/#gooey.copilot.types.CopilotCompletionRequestSadtalkerSettings.preprocess","title":"preprocess  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>preprocess: Optional[\n    CopilotCompletionRequestSadtalkerSettingsPreprocess\n] = Field(default=None)\n</code></pre> <p>SadTalker only generates 512x512 output. 'crop' handles this by cropping the input to 512x512. 'resize' scales down the input to fit 512x512 and scales it back up after lipsyncing (does not work well for full person images, better for portraits). 'full' processes the cropped region and pastes it back into the original input. 'extcrop' and 'extfull' are similar to 'crop' and 'full' but with extended cropping.</p>"},{"location":"reference/gooey/copilot/types/copilot_completion_request_functions_item/","title":"gooey.copilot.types.copilot_completion_request_functions_item","text":""},{"location":"reference/gooey/copilot/types/copilot_completion_request_functions_item/#gooey.copilot.types.copilot_completion_request_functions_item","title":"copilot_completion_request_functions_item","text":""},{"location":"reference/gooey/copilot/types/copilot_completion_request_functions_item/#gooey.copilot.types.copilot_completion_request_functions_item.CopilotCompletionRequestFunctionsItem","title":"CopilotCompletionRequestFunctionsItem","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/copilot/types/copilot_completion_request_functions_item/#gooey.copilot.types.copilot_completion_request_functions_item.CopilotCompletionRequestFunctionsItem.trigger","title":"trigger  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trigger: FunctionTrigger = Field()\n</code></pre> <p>When to run this function. <code>pre</code> runs before the recipe, <code>post</code> runs after the recipe.</p>"},{"location":"reference/gooey/copilot/types/copilot_completion_request_sadtalker_settings/","title":"gooey.copilot.types.copilot_completion_request_sadtalker_settings","text":""},{"location":"reference/gooey/copilot/types/copilot_completion_request_sadtalker_settings/#gooey.copilot.types.copilot_completion_request_sadtalker_settings","title":"copilot_completion_request_sadtalker_settings","text":""},{"location":"reference/gooey/copilot/types/copilot_completion_request_sadtalker_settings/#gooey.copilot.types.copilot_completion_request_sadtalker_settings.CopilotCompletionRequestSadtalkerSettings","title":"CopilotCompletionRequestSadtalkerSettings","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/copilot/types/copilot_completion_request_sadtalker_settings/#gooey.copilot.types.copilot_completion_request_sadtalker_settings.CopilotCompletionRequestSadtalkerSettings.expression_scale","title":"expression_scale  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>expression_scale: Optional[float] = Field(default=None)\n</code></pre> <p>Scale the amount of expression motion. 1.0 is normal, 0.5 is very reduced, and 2.0 is quite a lot.</p>"},{"location":"reference/gooey/copilot/types/copilot_completion_request_sadtalker_settings/#gooey.copilot.types.copilot_completion_request_sadtalker_settings.CopilotCompletionRequestSadtalkerSettings.pose_style","title":"pose_style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pose_style: Optional[int] = Field(default=None)\n</code></pre> <p>Random seed 0-45 inclusive that affects how the pose is animated.</p>"},{"location":"reference/gooey/copilot/types/copilot_completion_request_sadtalker_settings/#gooey.copilot.types.copilot_completion_request_sadtalker_settings.CopilotCompletionRequestSadtalkerSettings.preprocess","title":"preprocess  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>preprocess: Optional[\n    CopilotCompletionRequestSadtalkerSettingsPreprocess\n] = Field(default=None)\n</code></pre> <p>SadTalker only generates 512x512 output. 'crop' handles this by cropping the input to 512x512. 'resize' scales down the input to fit 512x512 and scales it back up after lipsyncing (does not work well for full person images, better for portraits). 'full' processes the cropped region and pastes it back into the original input. 'extcrop' and 'extfull' are similar to 'crop' and 'full' but with extended cropping.</p>"},{"location":"reference/gooey/copilot/types/copilot_completion_request_sadtalker_settings_preprocess/","title":"gooey.copilot.types.copilot_completion_request_sadtalker_settings_preprocess","text":""},{"location":"reference/gooey/copilot/types/copilot_completion_request_sadtalker_settings_preprocess/#gooey.copilot.types.copilot_completion_request_sadtalker_settings_preprocess","title":"copilot_completion_request_sadtalker_settings_preprocess","text":""},{"location":"reference/gooey/core/","title":"gooey.core","text":""},{"location":"reference/gooey/core/#gooey.core","title":"core","text":""},{"location":"reference/gooey/core/#gooey.core.FieldMetadata","title":"FieldMetadata","text":"<pre><code>FieldMetadata(*, alias: str)\n</code></pre> <p>Metadata class used to annotate fields to provide additional information.</p> <p>Example: class MyDict(TypedDict):     field: typing.Annotated[str, FieldMetadata(alias=\"field_name\")]</p> <p>Will serialize: <code>{\"field\": \"value\"}</code> To: <code>{\"field_name\": \"value\"}</code></p> Source code in <code>src/gooey/core/serialization.py</code> <pre><code>def __init__(self, *, alias: str) -&gt; None:\n    self.alias = alias\n</code></pre>"},{"location":"reference/gooey/core/#gooey.core.RequestOptions","title":"RequestOptions","text":"<p>               Bases: <code>TypedDict</code></p> <p>Additional options for request-specific configuration when calling APIs via the SDK. This is used primarily as an optional final parameter for service functions.</p> <p>Attributes:</p> Name Type Description <code>-</code> <code>timeout_in_seconds</code> <p>int. The number of seconds to await an API call before timing out.</p> <code>-</code> <code>max_retries</code> <p>int. The max number of retries to attempt if the API call fails.</p> <code>-</code> <code>additional_headers</code> <p>typing.Dict[str, typing.Any]. A dictionary containing additional parameters to spread into the request's header dict</p> <code>-</code> <code>additional_query_parameters</code> <p>typing.Dict[str, typing.Any]. A dictionary containing additional parameters to spread into the request's query parameters dict</p> <code>-</code> <code>additional_body_parameters</code> <p>typing.Dict[str, typing.Any]. A dictionary containing additional parameters to spread into the request's body parameters dict</p>"},{"location":"reference/gooey/core/#gooey.core.UniversalBaseModel","title":"UniversalBaseModel","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/gooey/core/#gooey.core.UniversalBaseModel.dict","title":"dict","text":"<pre><code>dict(**kwargs: Any) -&gt; Dict[str, Any]\n</code></pre> <p>Override the default dict method to <code>exclude_unset</code> by default. This function patches <code>exclude_unset</code> to work include fields within non-None default values.</p> Source code in <code>src/gooey/core/pydantic_utilities.py</code> <pre><code>def dict(self, **kwargs: typing.Any) -&gt; typing.Dict[str, typing.Any]:\n    \"\"\"\n    Override the default dict method to `exclude_unset` by default. This function patches\n    `exclude_unset` to work include fields within non-None default values.\n    \"\"\"\n    _fields_set = self.__fields_set__\n\n    fields = _get_model_fields(self.__class__)\n    for name, field in fields.items():\n        if name not in _fields_set:\n            default = _get_field_default(field)\n\n            # If the default values are non-null act like they've been set\n            # This effectively allows exclude_unset to work like exclude_none where\n            # the latter passes through intentionally set none values.\n            if default != None:\n                _fields_set.add(name)\n\n    kwargs_with_defaults_exclude_unset: typing.Any = {\n        \"by_alias\": True,\n        \"exclude_unset\": True,\n        \"include\": _fields_set,\n        **kwargs,\n    }\n\n    if IS_PYDANTIC_V2:\n        return super().model_dump(**kwargs_with_defaults_exclude_unset)  # type: ignore # Pydantic v2\n    else:\n        return super().dict(**kwargs_with_defaults_exclude_unset)\n</code></pre>"},{"location":"reference/gooey/core/#gooey.core.convert_and_respect_annotation_metadata","title":"convert_and_respect_annotation_metadata","text":"<pre><code>convert_and_respect_annotation_metadata(\n    *,\n    object_: Any,\n    annotation: Any,\n    inner_type: Optional[Any] = None\n) -&gt; Any\n</code></pre> <p>Respect the metadata annotations on a field, such as aliasing. This function effectively manipulates the dict-form of an object to respect the metadata annotations. This is primarily used for TypedDicts, which cannot support aliasing out of the box, and can be extended for additional utilities, such as defaults.</p>"},{"location":"reference/gooey/core/#gooey.core.convert_and_respect_annotation_metadata--parameters","title":"Parameters","text":"<p>object_ : typing.Any</p> type <p>The type we're looking to apply typing annotations from</p> <p>inner_type : typing.Optional[type]</p>"},{"location":"reference/gooey/core/#gooey.core.convert_and_respect_annotation_metadata--returns","title":"Returns","text":"<p>typing.Any</p> Source code in <code>src/gooey/core/serialization.py</code> <pre><code>def convert_and_respect_annotation_metadata(\n    *,\n    object_: typing.Any,\n    annotation: typing.Any,\n    inner_type: typing.Optional[typing.Any] = None,\n) -&gt; typing.Any:\n    \"\"\"\n    Respect the metadata annotations on a field, such as aliasing. This function effectively\n    manipulates the dict-form of an object to respect the metadata annotations. This is primarily used for\n    TypedDicts, which cannot support aliasing out of the box, and can be extended for additional\n    utilities, such as defaults.\n\n    Parameters\n    ----------\n    object_ : typing.Any\n\n    annotation : type\n        The type we're looking to apply typing annotations from\n\n    inner_type : typing.Optional[type]\n\n    Returns\n    -------\n    typing.Any\n    \"\"\"\n\n    if object_ is None:\n        return None\n    if inner_type is None:\n        inner_type = annotation\n\n    clean_type = _remove_annotations(inner_type)\n    if typing_extensions.is_typeddict(clean_type) and isinstance(object_, typing.Mapping):\n        return _convert_typeddict(object_, clean_type)\n\n    if (\n        # If you're iterating on a string, do not bother to coerce it to a sequence.\n        (not isinstance(object_, str))\n        and (\n            (\n                (\n                    typing_extensions.get_origin(clean_type) == typing.List\n                    or typing_extensions.get_origin(clean_type) == list\n                    or clean_type == typing.List\n                )\n                and isinstance(object_, typing.List)\n            )\n            or (\n                (\n                    typing_extensions.get_origin(clean_type) == typing.Set\n                    or typing_extensions.get_origin(clean_type) == set\n                    or clean_type == typing.Set\n                )\n                and isinstance(object_, typing.Set)\n            )\n            or (\n                (\n                    typing_extensions.get_origin(clean_type) == typing.Sequence\n                    or typing_extensions.get_origin(clean_type) == collections.abc.Sequence\n                    or clean_type == typing.Sequence\n                )\n                and isinstance(object_, typing.Sequence)\n            )\n        )\n    ):\n        inner_type = typing_extensions.get_args(clean_type)[0]\n        return [\n            convert_and_respect_annotation_metadata(object_=item, annotation=annotation, inner_type=inner_type)\n            for item in object_\n        ]\n\n    if typing_extensions.get_origin(clean_type) == typing.Union:\n        # We should be able to ~relatively~ safely try to convert keys against all\n        # member types in the union, the edge case here is if one member aliases a field\n        # of the same name to a different name from another member\n        # Or if another member aliases a field of the same name that another member does not.\n        for member in typing_extensions.get_args(clean_type):\n            object_ = convert_and_respect_annotation_metadata(object_=object_, annotation=annotation, inner_type=member)\n        return object_\n\n    annotated_type = _get_annotation(annotation)\n    if annotated_type is None:\n        return object_\n\n    # If the object is not a TypedDict, a Union, or other container (list, set, sequence, etc.)\n    # Then we can safely call it on the recursive conversion.\n    return object_\n</code></pre>"},{"location":"reference/gooey/core/#gooey.core.convert_file_dict_to_httpx_tuples","title":"convert_file_dict_to_httpx_tuples","text":"<pre><code>convert_file_dict_to_httpx_tuples(\n    d: Dict[str, Union[File, List[File]]]\n) -&gt; List[Tuple[str, File]]\n</code></pre> <p>The format we use is a list of tuples, where the first element is the name of the file and the second is the file object. Typically HTTPX wants a dict, but to be able to send lists of files, you have to use the list approach (which also works for non-lists) https://github.com/encode/httpx/pull/1032</p> Source code in <code>src/gooey/core/file.py</code> <pre><code>def convert_file_dict_to_httpx_tuples(\n    d: typing.Dict[str, typing.Union[File, typing.List[File]]],\n) -&gt; typing.List[typing.Tuple[str, File]]:\n    \"\"\"\n    The format we use is a list of tuples, where the first element is the\n    name of the file and the second is the file object. Typically HTTPX wants\n    a dict, but to be able to send lists of files, you have to use the list\n    approach (which also works for non-lists)\n    https://github.com/encode/httpx/pull/1032\n    \"\"\"\n\n    httpx_tuples = []\n    for key, file_like in d.items():\n        if isinstance(file_like, list):\n            for file_like_item in file_like:\n                httpx_tuples.append((key, file_like_item))\n        else:\n            httpx_tuples.append((key, file_like))\n    return httpx_tuples\n</code></pre>"},{"location":"reference/gooey/core/#gooey.core.serialize_datetime","title":"serialize_datetime","text":"<pre><code>serialize_datetime(v: datetime) -&gt; str\n</code></pre> <p>Serialize a datetime including timezone info.</p> <p>Uses the timezone info provided if present, otherwise uses the current runtime's timezone info.</p> <p>UTC datetimes end in \"Z\" while all other timezones are represented as offset from UTC, e.g. +05:00.</p> Source code in <code>src/gooey/core/datetime_utils.py</code> <pre><code>def serialize_datetime(v: dt.datetime) -&gt; str:\n    \"\"\"\n    Serialize a datetime including timezone info.\n\n    Uses the timezone info provided if present, otherwise uses the current runtime's timezone info.\n\n    UTC datetimes end in \"Z\" while all other timezones are represented as offset from UTC, e.g. +05:00.\n    \"\"\"\n\n    def _serialize_zoned_datetime(v: dt.datetime) -&gt; str:\n        if v.tzinfo is not None and v.tzinfo.tzname(None) == dt.timezone.utc.tzname(None):\n            # UTC is a special case where we use \"Z\" at the end instead of \"+00:00\"\n            return v.isoformat().replace(\"+00:00\", \"Z\")\n        else:\n            # Delegate to the typical +/- offset format\n            return v.isoformat()\n\n    if v.tzinfo is not None:\n        return _serialize_zoned_datetime(v)\n    else:\n        local_tz = dt.datetime.now().astimezone().tzinfo\n        localized_dt = v.replace(tzinfo=local_tz)\n        return _serialize_zoned_datetime(localized_dt)\n</code></pre>"},{"location":"reference/gooey/core/api_error/","title":"gooey.core.api_error","text":""},{"location":"reference/gooey/core/api_error/#gooey.core.api_error","title":"api_error","text":""},{"location":"reference/gooey/core/client_wrapper/","title":"gooey.core.client_wrapper","text":""},{"location":"reference/gooey/core/client_wrapper/#gooey.core.client_wrapper","title":"client_wrapper","text":""},{"location":"reference/gooey/core/datetime_utils/","title":"gooey.core.datetime_utils","text":""},{"location":"reference/gooey/core/datetime_utils/#gooey.core.datetime_utils","title":"datetime_utils","text":""},{"location":"reference/gooey/core/datetime_utils/#gooey.core.datetime_utils.serialize_datetime","title":"serialize_datetime","text":"<pre><code>serialize_datetime(v: datetime) -&gt; str\n</code></pre> <p>Serialize a datetime including timezone info.</p> <p>Uses the timezone info provided if present, otherwise uses the current runtime's timezone info.</p> <p>UTC datetimes end in \"Z\" while all other timezones are represented as offset from UTC, e.g. +05:00.</p> Source code in <code>src/gooey/core/datetime_utils.py</code> <pre><code>def serialize_datetime(v: dt.datetime) -&gt; str:\n    \"\"\"\n    Serialize a datetime including timezone info.\n\n    Uses the timezone info provided if present, otherwise uses the current runtime's timezone info.\n\n    UTC datetimes end in \"Z\" while all other timezones are represented as offset from UTC, e.g. +05:00.\n    \"\"\"\n\n    def _serialize_zoned_datetime(v: dt.datetime) -&gt; str:\n        if v.tzinfo is not None and v.tzinfo.tzname(None) == dt.timezone.utc.tzname(None):\n            # UTC is a special case where we use \"Z\" at the end instead of \"+00:00\"\n            return v.isoformat().replace(\"+00:00\", \"Z\")\n        else:\n            # Delegate to the typical +/- offset format\n            return v.isoformat()\n\n    if v.tzinfo is not None:\n        return _serialize_zoned_datetime(v)\n    else:\n        local_tz = dt.datetime.now().astimezone().tzinfo\n        localized_dt = v.replace(tzinfo=local_tz)\n        return _serialize_zoned_datetime(localized_dt)\n</code></pre>"},{"location":"reference/gooey/core/file/","title":"gooey.core.file","text":""},{"location":"reference/gooey/core/file/#gooey.core.file","title":"file","text":""},{"location":"reference/gooey/core/file/#gooey.core.file.convert_file_dict_to_httpx_tuples","title":"convert_file_dict_to_httpx_tuples","text":"<pre><code>convert_file_dict_to_httpx_tuples(\n    d: Dict[str, Union[File, List[File]]]\n) -&gt; List[Tuple[str, File]]\n</code></pre> <p>The format we use is a list of tuples, where the first element is the name of the file and the second is the file object. Typically HTTPX wants a dict, but to be able to send lists of files, you have to use the list approach (which also works for non-lists) https://github.com/encode/httpx/pull/1032</p> Source code in <code>src/gooey/core/file.py</code> <pre><code>def convert_file_dict_to_httpx_tuples(\n    d: typing.Dict[str, typing.Union[File, typing.List[File]]],\n) -&gt; typing.List[typing.Tuple[str, File]]:\n    \"\"\"\n    The format we use is a list of tuples, where the first element is the\n    name of the file and the second is the file object. Typically HTTPX wants\n    a dict, but to be able to send lists of files, you have to use the list\n    approach (which also works for non-lists)\n    https://github.com/encode/httpx/pull/1032\n    \"\"\"\n\n    httpx_tuples = []\n    for key, file_like in d.items():\n        if isinstance(file_like, list):\n            for file_like_item in file_like:\n                httpx_tuples.append((key, file_like_item))\n        else:\n            httpx_tuples.append((key, file_like))\n    return httpx_tuples\n</code></pre>"},{"location":"reference/gooey/core/http_client/","title":"gooey.core.http_client","text":""},{"location":"reference/gooey/core/http_client/#gooey.core.http_client","title":"http_client","text":""},{"location":"reference/gooey/core/http_client/#gooey.core.http_client.GooeyRequestParams","title":"GooeyRequestParams","text":"<p>               Bases: <code>NamedTuple</code></p> <p>Custom Request Parameters for Gooey</p>"},{"location":"reference/gooey/core/http_client/#gooey.core.http_client.gooey_process_request_params","title":"gooey_process_request_params","text":"<pre><code>gooey_process_request_params(\n    *,\n    path: Optional[str],\n    json: Optional[Any],\n    data: Optional[Any],\n    files: Optional[Any],\n    omit: Any\n) -&gt; GooeyRequestParams\n</code></pre> <p>Hack to allow providing filepaths as strings in the SDK.</p> Source code in <code>src/gooey/core/http_client.py</code> <pre><code>def gooey_process_request_params(\n    *,\n    path: typing.Optional[str],\n    json: typing.Optional[typing.Any],\n    data: typing.Optional[typing.Any],\n    files: typing.Optional[typing.Any],\n    omit: typing.Any,\n) -&gt; GooeyRequestParams:\n    \"\"\"\n    Hack to allow providing filepaths as strings in the SDK.\n    \"\"\"\n    if json or not isinstance(data, typing.MutableMapping) or not path or not path.rstrip(\"/\").endswith(\"/async\"):\n        return GooeyRequestParams(path=path, json=json, data=data, files=files)\n\n    new_files = files and files.copy() or {}\n    if files and isinstance(files, typing.MutableMapping):\n        for k, v in files.items():\n            if v and isinstance(v, list) and all(isinstance(item, str) and os.path.exists(item) for item in v):\n                new_files[k] = [open(item, \"rb\") for item in v]\n            elif v and isinstance(v, str) and os.path.exists(v):\n                new_files[k] = open(v, \"rb\")\n            elif isinstance(v, str) or v is omit or not v:\n                # a URL, None, or omitted value\n                data[k] = new_files.pop(k)\n            else:\n                new_files[k] = v\n\n    if new_files:\n        return GooeyRequestParams(\n            path=path.rstrip(\"/\") + \"/form\",\n            json=None,\n            data={\n                \"json\": json_module.dumps(maybe_filter_request_body(data, request_options=None, omit=omit)),\n            },\n            files=new_files,\n        )\n    else:\n        return GooeyRequestParams(path=path, json=data, data=None, files=None)\n</code></pre>"},{"location":"reference/gooey/core/jsonable_encoder/","title":"gooey.core.jsonable_encoder","text":""},{"location":"reference/gooey/core/jsonable_encoder/#gooey.core.jsonable_encoder","title":"jsonable_encoder","text":"<p>jsonable_encoder converts a Python object to a JSON-friendly dict (e.g. datetimes to strings, Pydantic models to dicts).</p> <p>Taken from FastAPI, and made a bit simpler https://github.com/tiangolo/fastapi/blob/master/fastapi/encoders.py</p>"},{"location":"reference/gooey/core/pydantic_utilities/","title":"gooey.core.pydantic_utilities","text":""},{"location":"reference/gooey/core/pydantic_utilities/#gooey.core.pydantic_utilities","title":"pydantic_utilities","text":""},{"location":"reference/gooey/core/pydantic_utilities/#gooey.core.pydantic_utilities.UniversalBaseModel","title":"UniversalBaseModel","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/gooey/core/pydantic_utilities/#gooey.core.pydantic_utilities.UniversalBaseModel.dict","title":"dict","text":"<pre><code>dict(**kwargs: Any) -&gt; Dict[str, Any]\n</code></pre> <p>Override the default dict method to <code>exclude_unset</code> by default. This function patches <code>exclude_unset</code> to work include fields within non-None default values.</p> Source code in <code>src/gooey/core/pydantic_utilities.py</code> <pre><code>def dict(self, **kwargs: typing.Any) -&gt; typing.Dict[str, typing.Any]:\n    \"\"\"\n    Override the default dict method to `exclude_unset` by default. This function patches\n    `exclude_unset` to work include fields within non-None default values.\n    \"\"\"\n    _fields_set = self.__fields_set__\n\n    fields = _get_model_fields(self.__class__)\n    for name, field in fields.items():\n        if name not in _fields_set:\n            default = _get_field_default(field)\n\n            # If the default values are non-null act like they've been set\n            # This effectively allows exclude_unset to work like exclude_none where\n            # the latter passes through intentionally set none values.\n            if default != None:\n                _fields_set.add(name)\n\n    kwargs_with_defaults_exclude_unset: typing.Any = {\n        \"by_alias\": True,\n        \"exclude_unset\": True,\n        \"include\": _fields_set,\n        **kwargs,\n    }\n\n    if IS_PYDANTIC_V2:\n        return super().model_dump(**kwargs_with_defaults_exclude_unset)  # type: ignore # Pydantic v2\n    else:\n        return super().dict(**kwargs_with_defaults_exclude_unset)\n</code></pre>"},{"location":"reference/gooey/core/query_encoder/","title":"gooey.core.query_encoder","text":""},{"location":"reference/gooey/core/query_encoder/#gooey.core.query_encoder","title":"query_encoder","text":""},{"location":"reference/gooey/core/remove_none_from_dict/","title":"gooey.core.remove_none_from_dict","text":""},{"location":"reference/gooey/core/remove_none_from_dict/#gooey.core.remove_none_from_dict","title":"remove_none_from_dict","text":""},{"location":"reference/gooey/core/request_options/","title":"gooey.core.request_options","text":""},{"location":"reference/gooey/core/request_options/#gooey.core.request_options","title":"request_options","text":""},{"location":"reference/gooey/core/request_options/#gooey.core.request_options.RequestOptions","title":"RequestOptions","text":"<p>               Bases: <code>TypedDict</code></p> <p>Additional options for request-specific configuration when calling APIs via the SDK. This is used primarily as an optional final parameter for service functions.</p> <p>Attributes:</p> Name Type Description <code>-</code> <code>timeout_in_seconds</code> <p>int. The number of seconds to await an API call before timing out.</p> <code>-</code> <code>max_retries</code> <p>int. The max number of retries to attempt if the API call fails.</p> <code>-</code> <code>additional_headers</code> <p>typing.Dict[str, typing.Any]. A dictionary containing additional parameters to spread into the request's header dict</p> <code>-</code> <code>additional_query_parameters</code> <p>typing.Dict[str, typing.Any]. A dictionary containing additional parameters to spread into the request's query parameters dict</p> <code>-</code> <code>additional_body_parameters</code> <p>typing.Dict[str, typing.Any]. A dictionary containing additional parameters to spread into the request's body parameters dict</p>"},{"location":"reference/gooey/core/serialization/","title":"gooey.core.serialization","text":""},{"location":"reference/gooey/core/serialization/#gooey.core.serialization","title":"serialization","text":""},{"location":"reference/gooey/core/serialization/#gooey.core.serialization.FieldMetadata","title":"FieldMetadata","text":"<pre><code>FieldMetadata(*, alias: str)\n</code></pre> <p>Metadata class used to annotate fields to provide additional information.</p> <p>Example: class MyDict(TypedDict):     field: typing.Annotated[str, FieldMetadata(alias=\"field_name\")]</p> <p>Will serialize: <code>{\"field\": \"value\"}</code> To: <code>{\"field_name\": \"value\"}</code></p> Source code in <code>src/gooey/core/serialization.py</code> <pre><code>def __init__(self, *, alias: str) -&gt; None:\n    self.alias = alias\n</code></pre>"},{"location":"reference/gooey/core/serialization/#gooey.core.serialization.convert_and_respect_annotation_metadata","title":"convert_and_respect_annotation_metadata","text":"<pre><code>convert_and_respect_annotation_metadata(\n    *,\n    object_: Any,\n    annotation: Any,\n    inner_type: Optional[Any] = None\n) -&gt; Any\n</code></pre> <p>Respect the metadata annotations on a field, such as aliasing. This function effectively manipulates the dict-form of an object to respect the metadata annotations. This is primarily used for TypedDicts, which cannot support aliasing out of the box, and can be extended for additional utilities, such as defaults.</p>"},{"location":"reference/gooey/core/serialization/#gooey.core.serialization.convert_and_respect_annotation_metadata--parameters","title":"Parameters","text":"<p>object_ : typing.Any</p> type <p>The type we're looking to apply typing annotations from</p> <p>inner_type : typing.Optional[type]</p>"},{"location":"reference/gooey/core/serialization/#gooey.core.serialization.convert_and_respect_annotation_metadata--returns","title":"Returns","text":"<p>typing.Any</p> Source code in <code>src/gooey/core/serialization.py</code> <pre><code>def convert_and_respect_annotation_metadata(\n    *,\n    object_: typing.Any,\n    annotation: typing.Any,\n    inner_type: typing.Optional[typing.Any] = None,\n) -&gt; typing.Any:\n    \"\"\"\n    Respect the metadata annotations on a field, such as aliasing. This function effectively\n    manipulates the dict-form of an object to respect the metadata annotations. This is primarily used for\n    TypedDicts, which cannot support aliasing out of the box, and can be extended for additional\n    utilities, such as defaults.\n\n    Parameters\n    ----------\n    object_ : typing.Any\n\n    annotation : type\n        The type we're looking to apply typing annotations from\n\n    inner_type : typing.Optional[type]\n\n    Returns\n    -------\n    typing.Any\n    \"\"\"\n\n    if object_ is None:\n        return None\n    if inner_type is None:\n        inner_type = annotation\n\n    clean_type = _remove_annotations(inner_type)\n    if typing_extensions.is_typeddict(clean_type) and isinstance(object_, typing.Mapping):\n        return _convert_typeddict(object_, clean_type)\n\n    if (\n        # If you're iterating on a string, do not bother to coerce it to a sequence.\n        (not isinstance(object_, str))\n        and (\n            (\n                (\n                    typing_extensions.get_origin(clean_type) == typing.List\n                    or typing_extensions.get_origin(clean_type) == list\n                    or clean_type == typing.List\n                )\n                and isinstance(object_, typing.List)\n            )\n            or (\n                (\n                    typing_extensions.get_origin(clean_type) == typing.Set\n                    or typing_extensions.get_origin(clean_type) == set\n                    or clean_type == typing.Set\n                )\n                and isinstance(object_, typing.Set)\n            )\n            or (\n                (\n                    typing_extensions.get_origin(clean_type) == typing.Sequence\n                    or typing_extensions.get_origin(clean_type) == collections.abc.Sequence\n                    or clean_type == typing.Sequence\n                )\n                and isinstance(object_, typing.Sequence)\n            )\n        )\n    ):\n        inner_type = typing_extensions.get_args(clean_type)[0]\n        return [\n            convert_and_respect_annotation_metadata(object_=item, annotation=annotation, inner_type=inner_type)\n            for item in object_\n        ]\n\n    if typing_extensions.get_origin(clean_type) == typing.Union:\n        # We should be able to ~relatively~ safely try to convert keys against all\n        # member types in the union, the edge case here is if one member aliases a field\n        # of the same name to a different name from another member\n        # Or if another member aliases a field of the same name that another member does not.\n        for member in typing_extensions.get_args(clean_type):\n            object_ = convert_and_respect_annotation_metadata(object_=object_, annotation=annotation, inner_type=member)\n        return object_\n\n    annotated_type = _get_annotation(annotation)\n    if annotated_type is None:\n        return object_\n\n    # If the object is not a TypedDict, a Union, or other container (list, set, sequence, etc.)\n    # Then we can safely call it on the recursive conversion.\n    return object_\n</code></pre>"},{"location":"reference/gooey/errors/","title":"gooey.errors","text":""},{"location":"reference/gooey/errors/#gooey.errors","title":"errors","text":""},{"location":"reference/gooey/errors/payment_required_error/","title":"gooey.errors.payment_required_error","text":""},{"location":"reference/gooey/errors/payment_required_error/#gooey.errors.payment_required_error","title":"payment_required_error","text":""},{"location":"reference/gooey/errors/too_many_requests_error/","title":"gooey.errors.too_many_requests_error","text":""},{"location":"reference/gooey/errors/too_many_requests_error/#gooey.errors.too_many_requests_error","title":"too_many_requests_error","text":""},{"location":"reference/gooey/errors/unprocessable_entity_error/","title":"gooey.errors.unprocessable_entity_error","text":""},{"location":"reference/gooey/errors/unprocessable_entity_error/#gooey.errors.unprocessable_entity_error","title":"unprocessable_entity_error","text":""},{"location":"reference/gooey/types/","title":"gooey.types","text":""},{"location":"reference/gooey/types/#gooey.types","title":"types","text":""},{"location":"reference/gooey/types/#gooey.types.AsrPageRequest","title":"AsrPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.AsrPageRequest.google_translate_target","title":"google_translate_target  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>google_translate_target: Optional[str] = Field(default=None)\n</code></pre> <p>use <code>translation_model</code> &amp; <code>translation_target</code> instead.</p>"},{"location":"reference/gooey/types/#gooey.types.AsrPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/#gooey.types.AsrPageStatusResponse","title":"AsrPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.AsrPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.AsrPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.AsrPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[AsrPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.AsrPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.AsrPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.AsrPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.AsrPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.AsyncApiResponseModelV3","title":"AsyncApiResponseModelV3","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.AsyncApiResponseModelV3.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.AsyncApiResponseModelV3.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.AsyncApiResponseModelV3.status_url","title":"status_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status_url: str = Field()\n</code></pre> <p>URL to check the status of the run. Also included in the <code>Location</code> header of the response.</p>"},{"location":"reference/gooey/types/#gooey.types.AsyncApiResponseModelV3.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.BalanceResponse","title":"BalanceResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.BalanceResponse.balance","title":"balance  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>balance: int = Field()\n</code></pre> <p>Current balance in credits</p>"},{"location":"reference/gooey/types/#gooey.types.BotBroadcastFilters","title":"BotBroadcastFilters","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.BotBroadcastFilters.slack_channel_is_personal","title":"slack_channel_is_personal  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>slack_channel_is_personal: Optional[bool] = Field(\n    default=None\n)\n</code></pre> <p>Filter by whether the Slack channel is personal. By default, will broadcast to both public and personal slack channels.</p>"},{"location":"reference/gooey/types/#gooey.types.BotBroadcastFilters.slack_user_id_in","title":"slack_user_id_in  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>slack_user_id_in: Optional[List[str]] = Field(\n    alias=\"slack_user_id__in\", default=None\n)\n</code></pre> <p>A list of Slack user IDs to broadcast to.</p>"},{"location":"reference/gooey/types/#gooey.types.BotBroadcastFilters.slack_user_name_icontains","title":"slack_user_name_icontains  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>slack_user_name_icontains: Optional[str] = Field(\n    alias=\"slack_user_name__icontains\", default=None\n)\n</code></pre> <p>Filter by the Slack user's name. Case insensitive.</p>"},{"location":"reference/gooey/types/#gooey.types.BotBroadcastFilters.wa_phone_number_in","title":"wa_phone_number_in  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>wa_phone_number_in: Optional[List[str]] = Field(\n    alias=\"wa_phone_number__in\", default=None\n)\n</code></pre> <p>A list of WhatsApp phone numbers to broadcast to.</p>"},{"location":"reference/gooey/types/#gooey.types.BotBroadcastRequestModel","title":"BotBroadcastRequestModel","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.BotBroadcastRequestModel.audio","title":"audio  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>audio: Optional[str] = Field(default=None)\n</code></pre> <p>Audio URL to send to all users</p>"},{"location":"reference/gooey/types/#gooey.types.BotBroadcastRequestModel.buttons","title":"buttons  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>buttons: Optional[List[ReplyButton]] = Field(default=None)\n</code></pre> <p>Buttons to send to all users</p>"},{"location":"reference/gooey/types/#gooey.types.BotBroadcastRequestModel.documents","title":"documents  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>documents: Optional[List[str]] = Field(default=None)\n</code></pre> <p>Video URL to send to all users</p>"},{"location":"reference/gooey/types/#gooey.types.BotBroadcastRequestModel.filters","title":"filters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>filters: Optional[BotBroadcastFilters] = Field(default=None)\n</code></pre> <p>Filters to select users to broadcast to. If not provided, will broadcast to all users of this bot.</p>"},{"location":"reference/gooey/types/#gooey.types.BotBroadcastRequestModel.text","title":"text  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>text: str = Field()\n</code></pre> <p>Message to broadcast to all users</p>"},{"location":"reference/gooey/types/#gooey.types.BotBroadcastRequestModel.video","title":"video  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>video: Optional[str] = Field(default=None)\n</code></pre> <p>Video URL to send to all users</p>"},{"location":"reference/gooey/types/#gooey.types.BulkEvalPageStatusResponse","title":"BulkEvalPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.BulkEvalPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.BulkEvalPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.BulkEvalPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[BulkEvalPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.BulkEvalPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.BulkEvalPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.BulkEvalPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.BulkEvalPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.BulkRunnerPageOutput","title":"BulkRunnerPageOutput","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.BulkRunnerPageOutput.eval_runs","title":"eval_runs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>eval_runs: Optional[List[str]] = Field(default=None)\n</code></pre> <p>List of URLs to the evaluation runs that you requested.</p>"},{"location":"reference/gooey/types/#gooey.types.BulkRunnerPageRequest","title":"BulkRunnerPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.BulkRunnerPageRequest.documents","title":"documents  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>documents: List[str] = Field()\n</code></pre> <p>Upload or link to a CSV or google sheet that contains your sample input data. For example, for Copilot, this would sample questions or for Art QR Code, would would be pairs of image descriptions and URLs. Remember to includes header names in your CSV too.</p>"},{"location":"reference/gooey/types/#gooey.types.BulkRunnerPageRequest.eval_urls","title":"eval_urls  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>eval_urls: Optional[List[str]] = Field(default=None)\n</code></pre> <p>(optional) Add one or more Gooey.AI Evaluator Workflows to evaluate the results of your runs.</p>"},{"location":"reference/gooey/types/#gooey.types.BulkRunnerPageRequest.input_columns","title":"input_columns  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>input_columns: Dict[str, str] = Field()\n</code></pre> <p>For each input field in the Gooey.AI workflow, specify the column in your input data that corresponds to it.</p>"},{"location":"reference/gooey/types/#gooey.types.BulkRunnerPageRequest.output_columns","title":"output_columns  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output_columns: Dict[str, str] = Field()\n</code></pre> <p>For each output field in the Gooey.AI workflow, specify the column name that you'd like to use for it in the output data.</p>"},{"location":"reference/gooey/types/#gooey.types.BulkRunnerPageRequest.run_urls","title":"run_urls  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_urls: List[str] = Field()\n</code></pre> <p>Provide one or more Gooey.AI workflow runs. You can add multiple runs from the same recipe (e.g. two versions of your copilot) and we'll run the inputs over both of them.</p>"},{"location":"reference/gooey/types/#gooey.types.BulkRunnerPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/#gooey.types.BulkRunnerPageStatusResponse","title":"BulkRunnerPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.BulkRunnerPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.BulkRunnerPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.BulkRunnerPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[BulkRunnerPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.BulkRunnerPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.BulkRunnerPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.BulkRunnerPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.BulkRunnerPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.ButtonPressed","title":"ButtonPressed","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.ButtonPressed.button_id","title":"button_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>button_id: str = Field()\n</code></pre> <p>The ID of the button that was pressed by the user</p>"},{"location":"reference/gooey/types/#gooey.types.ButtonPressed.context_msg_id","title":"context_msg_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>context_msg_id: str = Field()\n</code></pre> <p>The message ID of the context message on which the button was pressed</p>"},{"location":"reference/gooey/types/#gooey.types.ChyronPlantPageRequest","title":"ChyronPlantPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.ChyronPlantPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/#gooey.types.ChyronPlantPageStatusResponse","title":"ChyronPlantPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.ChyronPlantPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.ChyronPlantPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.ChyronPlantPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[ChyronPlantPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.ChyronPlantPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.ChyronPlantPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.ChyronPlantPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.ChyronPlantPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.CompareLlmPageStatusResponse","title":"CompareLlmPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.CompareLlmPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.CompareLlmPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.CompareLlmPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[CompareLlmPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.CompareLlmPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.CompareLlmPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.CompareLlmPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.CompareLlmPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.CompareText2ImgPageStatusResponse","title":"CompareText2ImgPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.CompareText2ImgPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.CompareText2ImgPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.CompareText2ImgPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[CompareText2ImgPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.CompareText2ImgPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.CompareText2ImgPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.CompareText2ImgPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.CompareText2ImgPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.CompareUpscalerPageOutput","title":"CompareUpscalerPageOutput","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.CompareUpscalerPageOutput.output_images","title":"output_images  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output_images: Optional[Dict[str, str]] = Field(\n    default=None\n)\n</code></pre> <p>Output Images</p>"},{"location":"reference/gooey/types/#gooey.types.CompareUpscalerPageOutput.output_videos","title":"output_videos  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output_videos: Optional[Dict[str, str]] = Field(\n    default=None\n)\n</code></pre> <p>Output Videos</p>"},{"location":"reference/gooey/types/#gooey.types.CompareUpscalerPageRequest","title":"CompareUpscalerPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.CompareUpscalerPageRequest.scale","title":"scale  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scale: int = Field()\n</code></pre> <p>The final upsampling scale of the image</p>"},{"location":"reference/gooey/types/#gooey.types.CompareUpscalerPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/#gooey.types.CompareUpscalerPageStatusResponse","title":"CompareUpscalerPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.CompareUpscalerPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.CompareUpscalerPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.CompareUpscalerPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[CompareUpscalerPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.CompareUpscalerPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.CompareUpscalerPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.CompareUpscalerPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.CompareUpscalerPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.ConversationStart","title":"ConversationStart","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.ConversationStart.bot_message_id","title":"bot_message_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bot_message_id: str = Field()\n</code></pre> <p>The bot message ID. Use this ID as the <code>context_msg_id</code> when sending a <code>button_pressed</code>.</p>"},{"location":"reference/gooey/types/#gooey.types.ConversationStart.conversation_id","title":"conversation_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>conversation_id: str = Field()\n</code></pre> <p>The conversation ID you provided in the request, or a random ID if not provided</p>"},{"location":"reference/gooey/types/#gooey.types.ConversationStart.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the conversation was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.ConversationStart.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: Optional[str] = Field(default=None)\n</code></pre> <p>The conversation was started. Save the IDs for future requests.</p>"},{"location":"reference/gooey/types/#gooey.types.ConversationStart.user_id","title":"user_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user_id: str = Field()\n</code></pre> <p>The user ID associated with this conversation</p>"},{"location":"reference/gooey/types/#gooey.types.ConversationStart.user_message_id","title":"user_message_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user_message_id: str = Field()\n</code></pre> <p>The user message ID you provided in the request, or a random ID if not provided.</p>"},{"location":"reference/gooey/types/#gooey.types.CreateStreamRequest","title":"CreateStreamRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.CreateStreamRequest.asr_language","title":"asr_language  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>asr_language: Optional[str] = Field(default=None)\n</code></pre> <p>Choose a language to transcribe incoming audio messages to text.</p>"},{"location":"reference/gooey/types/#gooey.types.CreateStreamRequest.asr_model","title":"asr_model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>asr_model: Optional[AsrModels] = Field(default=None)\n</code></pre> <p>Choose a model to transcribe incoming audio messages to text.</p>"},{"location":"reference/gooey/types/#gooey.types.CreateStreamRequest.button_pressed","title":"button_pressed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>button_pressed: Optional[ButtonPressed] = Field(\n    default=None\n)\n</code></pre> <p>The button that was pressed by the user.</p>"},{"location":"reference/gooey/types/#gooey.types.CreateStreamRequest.conversation_id","title":"conversation_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>conversation_id: Optional[str] = Field(default=None)\n</code></pre> <p>The gooey conversation ID.</p> <p>If not provided, a new conversation will be started and a new ID will be returned in the response. Use this to maintain the state of the conversation between requests.</p> <p>Note that you may not provide a custom ID here, and must only use the <code>conversation_id</code> returned in a previous response.</p>"},{"location":"reference/gooey/types/#gooey.types.CreateStreamRequest.dense_weight","title":"dense_weight  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dense_weight: Optional[float] = Field(default=None)\n</code></pre> <p>Weightage for dense vs sparse embeddings. <code>0</code> for sparse, <code>1</code> for dense, <code>0.5</code> for equal weight. Generally speaking, dense embeddings excel at understanding the context of the query, whereas sparse vectors excel at keyword matches.</p>"},{"location":"reference/gooey/types/#gooey.types.CreateStreamRequest.doc_extract_url","title":"doc_extract_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>doc_extract_url: Optional[str] = Field(default=None)\n</code></pre> <p>Select a workflow to extract text from documents and images.</p>"},{"location":"reference/gooey/types/#gooey.types.CreateStreamRequest.document_model","title":"document_model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>document_model: Optional[str] = Field(default=None)\n</code></pre> <p>When your copilot users upload a photo or pdf, what kind of document are they mostly likely to upload? (via Azure)</p>"},{"location":"reference/gooey/types/#gooey.types.CreateStreamRequest.elevenlabs_voice_name","title":"elevenlabs_voice_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>elevenlabs_voice_name: Optional[str] = Field(default=None)\n</code></pre> <p>Use <code>elevenlabs_voice_id</code> instead</p>"},{"location":"reference/gooey/types/#gooey.types.CreateStreamRequest.input_glossary_document","title":"input_glossary_document  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>input_glossary_document: Optional[str] = Field(default=None)\n</code></pre> <p>Translation Glossary for User Langauge -&gt; LLM Language (English)</p>"},{"location":"reference/gooey/types/#gooey.types.CreateStreamRequest.input_text","title":"input_text  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>input_text: Optional[str] = Field(default=None)\n</code></pre> <p>Use <code>input_prompt</code> instead</p>"},{"location":"reference/gooey/types/#gooey.types.CreateStreamRequest.integration_id","title":"integration_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>integration_id: str = Field()\n</code></pre> <p>Your Integration ID as shown in the Copilot Integrations tab</p>"},{"location":"reference/gooey/types/#gooey.types.CreateStreamRequest.output_glossary_document","title":"output_glossary_document  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output_glossary_document: Optional[str] = Field(\n    default=None\n)\n</code></pre> <p>Translation Glossary for LLM Language (English) -&gt; User Langauge</p>"},{"location":"reference/gooey/types/#gooey.types.CreateStreamRequest.tools","title":"tools  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tools: Optional[List[LlmTools]] = Field(default=None)\n</code></pre> <p>Give your copilot superpowers by giving it access to tools. Powered by Function calling.</p>"},{"location":"reference/gooey/types/#gooey.types.CreateStreamRequest.user_id","title":"user_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user_id: Optional[str] = Field(default=None)\n</code></pre> <p>Your app's custom user ID.</p> <p>If not provided, a random user will be created and a new ID will be returned in the response. If a <code>conversation_id</code> is provided, this field is automatically set to the user's id associated with that conversation.</p>"},{"location":"reference/gooey/types/#gooey.types.CreateStreamRequest.user_language","title":"user_language  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user_language: Optional[str] = Field(default=None)\n</code></pre> <p>Choose a language to translate incoming text &amp; audio messages to English and responses back to your selected language. Useful for low-resource languages.</p>"},{"location":"reference/gooey/types/#gooey.types.CreateStreamRequest.user_message_id","title":"user_message_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user_message_id: Optional[str] = Field(default=None)\n</code></pre> <p>Your app's custom message ID for the user message.</p> <p>If not provided, a random ID will be generated and returned in the response. This is useful for tracking messages in the conversation.</p>"},{"location":"reference/gooey/types/#gooey.types.CreateStreamRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/#gooey.types.CreateStreamResponse","title":"CreateStreamResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.CreateStreamResponse.stream_url","title":"stream_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>stream_url: str = Field()\n</code></pre> <p>The URL to stream the conversation. Use Server-Sent Events (SSE) to stream the response.</p>"},{"location":"reference/gooey/types/#gooey.types.DeforumSdPageStatusResponse","title":"DeforumSdPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.DeforumSdPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.DeforumSdPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.DeforumSdPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[DeforumSdPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.DeforumSdPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.DeforumSdPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.DeforumSdPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.DeforumSdPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.DocExtractPageRequest","title":"DocExtractPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.DocExtractPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/#gooey.types.DocExtractPageStatusResponse","title":"DocExtractPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.DocExtractPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.DocExtractPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.DocExtractPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[DocExtractPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.DocExtractPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.DocExtractPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.DocExtractPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.DocExtractPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.DocSearchPageStatusResponse","title":"DocSearchPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.DocSearchPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.DocSearchPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.DocSearchPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[DocSearchPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.DocSearchPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.DocSearchPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.DocSearchPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.DocSearchPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.DocSummaryPageRequest","title":"DocSummaryPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.DocSummaryPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/#gooey.types.DocSummaryPageStatusResponse","title":"DocSummaryPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.DocSummaryPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.DocSummaryPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.DocSummaryPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[DocSummaryPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.DocSummaryPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.DocSummaryPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.DocSummaryPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.DocSummaryPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.EmailFaceInpaintingPageStatusResponse","title":"EmailFaceInpaintingPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.EmailFaceInpaintingPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.EmailFaceInpaintingPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.EmailFaceInpaintingPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[EmailFaceInpaintingPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.EmailFaceInpaintingPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.EmailFaceInpaintingPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.EmailFaceInpaintingPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.EmailFaceInpaintingPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.EmbeddingsPageStatusResponse","title":"EmbeddingsPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.EmbeddingsPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.EmbeddingsPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.EmbeddingsPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[EmbeddingsPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.EmbeddingsPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.EmbeddingsPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.EmbeddingsPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.EmbeddingsPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.FaceInpaintingPageRequest","title":"FaceInpaintingPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.FaceInpaintingPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/#gooey.types.FaceInpaintingPageStatusResponse","title":"FaceInpaintingPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.FaceInpaintingPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.FaceInpaintingPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.FaceInpaintingPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[FaceInpaintingPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.FaceInpaintingPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.FaceInpaintingPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.FaceInpaintingPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.FaceInpaintingPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.FinalResponse","title":"FinalResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.FinalResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.FinalResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.FinalResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[ResponseModel] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.FinalResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.FinalResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.FinalResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.FinalResponse.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: Optional[str] = Field(default=None)\n</code></pre> <p>The run has completed. Use the <code>status_url</code> to check the status of the run and fetch the complete output.</p>"},{"location":"reference/gooey/types/#gooey.types.FinalResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.FunctionsPageOutput","title":"FunctionsPageOutput","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.FunctionsPageOutput.error","title":"error  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>error: Optional[str] = Field(default=None)\n</code></pre> <p>JS Error from the code. If there are no errors, this will be null</p>"},{"location":"reference/gooey/types/#gooey.types.FunctionsPageOutput.logs","title":"logs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>logs: Optional[List[ConsoleLogs]] = Field(default=None)\n</code></pre> <p>Console logs from the code execution</p>"},{"location":"reference/gooey/types/#gooey.types.FunctionsPageStatusResponse","title":"FunctionsPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.FunctionsPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.FunctionsPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.FunctionsPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[FunctionsPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.FunctionsPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.FunctionsPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.FunctionsPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.FunctionsPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.GoogleGptPageStatusResponse","title":"GoogleGptPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.GoogleGptPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.GoogleGptPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.GoogleGptPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[GoogleGptPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.GoogleGptPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.GoogleGptPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.GoogleGptPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.GoogleGptPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.GoogleImageGenPageStatusResponse","title":"GoogleImageGenPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.GoogleImageGenPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.GoogleImageGenPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.GoogleImageGenPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[GoogleImageGenPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.GoogleImageGenPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.GoogleImageGenPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.GoogleImageGenPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.GoogleImageGenPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.ImageSegmentationPageRequest","title":"ImageSegmentationPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.ImageSegmentationPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/#gooey.types.ImageSegmentationPageStatusResponse","title":"ImageSegmentationPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.ImageSegmentationPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.ImageSegmentationPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.ImageSegmentationPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[ImageSegmentationPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.ImageSegmentationPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.ImageSegmentationPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.ImageSegmentationPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.ImageSegmentationPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.Img2ImgPageRequest","title":"Img2ImgPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.Img2ImgPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/#gooey.types.Img2ImgPageStatusResponse","title":"Img2ImgPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.Img2ImgPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.Img2ImgPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.Img2ImgPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[Img2ImgPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.Img2ImgPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.Img2ImgPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.Img2ImgPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.Img2ImgPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.LetterWriterPageRequest","title":"LetterWriterPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.LetterWriterPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/#gooey.types.LetterWriterPageStatusResponse","title":"LetterWriterPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.LetterWriterPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.LetterWriterPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.LetterWriterPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[LetterWriterPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.LetterWriterPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.LetterWriterPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.LetterWriterPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.LetterWriterPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.LipsyncPageRequest","title":"LipsyncPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.LipsyncPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/#gooey.types.LipsyncPageStatusResponse","title":"LipsyncPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.LipsyncPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.LipsyncPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.LipsyncPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[LipsyncPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.LipsyncPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.LipsyncPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.LipsyncPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.LipsyncPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.LipsyncTtsPageRequest","title":"LipsyncTtsPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.LipsyncTtsPageRequest.elevenlabs_voice_name","title":"elevenlabs_voice_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>elevenlabs_voice_name: Optional[str] = Field(default=None)\n</code></pre> <p>Use <code>elevenlabs_voice_id</code> instead</p>"},{"location":"reference/gooey/types/#gooey.types.LipsyncTtsPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/#gooey.types.LipsyncTtsPageStatusResponse","title":"LipsyncTtsPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.LipsyncTtsPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.LipsyncTtsPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.LipsyncTtsPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[LipsyncTtsPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.LipsyncTtsPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.LipsyncTtsPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.LipsyncTtsPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.LipsyncTtsPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.MessagePart","title":"MessagePart","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.MessagePart.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.MessagePart.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.MessagePart.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: Optional[str] = Field(default=None)\n</code></pre> <p>The partial outputs from the bot will be streamed in parts. Use this to update the user interface iteratively.</p>"},{"location":"reference/gooey/types/#gooey.types.ObjectInpaintingPageRequest","title":"ObjectInpaintingPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.ObjectInpaintingPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/#gooey.types.ObjectInpaintingPageStatusResponse","title":"ObjectInpaintingPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.ObjectInpaintingPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.ObjectInpaintingPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.ObjectInpaintingPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[ObjectInpaintingPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.ObjectInpaintingPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.ObjectInpaintingPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.ObjectInpaintingPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.ObjectInpaintingPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.QrCodeGeneratorPageRequest","title":"QrCodeGeneratorPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.QrCodeGeneratorPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/#gooey.types.QrCodeGeneratorPageStatusResponse","title":"QrCodeGeneratorPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.QrCodeGeneratorPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.QrCodeGeneratorPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.QrCodeGeneratorPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[QrCodeGeneratorPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.QrCodeGeneratorPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.QrCodeGeneratorPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.QrCodeGeneratorPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.QrCodeGeneratorPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.RecipeFunction","title":"RecipeFunction","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.RecipeFunction.trigger","title":"trigger  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trigger: FunctionTrigger = Field()\n</code></pre> <p>When to run this function. <code>pre</code> runs before the recipe, <code>post</code> runs after the recipe.</p>"},{"location":"reference/gooey/types/#gooey.types.RelatedQnADocPageStatusResponse","title":"RelatedQnADocPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.RelatedQnADocPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.RelatedQnADocPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.RelatedQnADocPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[RelatedQnADocPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.RelatedQnADocPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.RelatedQnADocPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.RelatedQnADocPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.RelatedQnADocPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.RelatedQnAPageStatusResponse","title":"RelatedQnAPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.RelatedQnAPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.RelatedQnAPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.RelatedQnAPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[RelatedQnAPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.RelatedQnAPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.RelatedQnAPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.RelatedQnAPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.RelatedQnAPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.RunSettings","title":"RunSettings","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.RunSettings.retention_policy","title":"retention_policy  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>retention_policy: Optional[RunSettingsRetentionPolicy] = (\n    Field(default=None)\n)\n</code></pre> <p>Policy for retaining the run data.</p>"},{"location":"reference/gooey/types/#gooey.types.RunStart","title":"RunStart","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.RunStart.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.RunStart.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.RunStart.status_url","title":"status_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status_url: str = Field()\n</code></pre> <p>URL to check the status of the run. Also included in the <code>Location</code> header of the response.</p>"},{"location":"reference/gooey/types/#gooey.types.RunStart.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: Optional[str] = Field(default=None)\n</code></pre> <p>The run was started. Save the IDs for future requests.Use the <code>status_url</code> to check the status of the run and fetch the complete output.</p>"},{"location":"reference/gooey/types/#gooey.types.RunStart.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.SadTalkerSettings","title":"SadTalkerSettings","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.SadTalkerSettings.expression_scale","title":"expression_scale  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>expression_scale: Optional[float] = Field(default=None)\n</code></pre> <p>Scale the amount of expression motion. 1.0 is normal, 0.5 is very reduced, and 2.0 is quite a lot.</p>"},{"location":"reference/gooey/types/#gooey.types.SadTalkerSettings.pose_style","title":"pose_style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pose_style: Optional[int] = Field(default=None)\n</code></pre> <p>Random seed 0-45 inclusive that affects how the pose is animated.</p>"},{"location":"reference/gooey/types/#gooey.types.SadTalkerSettings.preprocess","title":"preprocess  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>preprocess: Optional[SadTalkerSettingsPreprocess] = Field(\n    default=None\n)\n</code></pre> <p>SadTalker only generates 512x512 output. 'crop' handles this by cropping the input to 512x512. 'resize' scales down the input to fit 512x512 and scales it back up after lipsyncing (does not work well for full person images, better for portraits). 'full' processes the cropped region and pastes it back into the original input. 'extcrop' and 'extfull' are similar to 'crop' and 'full' but with extended cropping.</p>"},{"location":"reference/gooey/types/#gooey.types.SeoSummaryPageStatusResponse","title":"SeoSummaryPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.SeoSummaryPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.SeoSummaryPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.SeoSummaryPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[SeoSummaryPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.SeoSummaryPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.SeoSummaryPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.SeoSummaryPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.SeoSummaryPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.SmartGptPageStatusResponse","title":"SmartGptPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.SmartGptPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.SmartGptPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.SmartGptPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[SmartGptPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.SmartGptPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.SmartGptPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.SmartGptPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.SmartGptPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.SocialLookupEmailPageStatusResponse","title":"SocialLookupEmailPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.SocialLookupEmailPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.SocialLookupEmailPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.SocialLookupEmailPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[SocialLookupEmailPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.SocialLookupEmailPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.SocialLookupEmailPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.SocialLookupEmailPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.SocialLookupEmailPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.StreamError","title":"StreamError","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.StreamError.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the error</p>"},{"location":"reference/gooey/types/#gooey.types.StreamError.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: Optional[str] = Field(default=None)\n</code></pre> <p>An error occurred. The stream has ended.</p>"},{"location":"reference/gooey/types/#gooey.types.Text2AudioPageStatusResponse","title":"Text2AudioPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.Text2AudioPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.Text2AudioPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.Text2AudioPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[Text2AudioPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.Text2AudioPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.Text2AudioPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.Text2AudioPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.Text2AudioPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.TextToSpeechPageStatusResponse","title":"TextToSpeechPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.TextToSpeechPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.TextToSpeechPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.TextToSpeechPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[TextToSpeechPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.TextToSpeechPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.TextToSpeechPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.TextToSpeechPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.TextToSpeechPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.TranslationPageRequest","title":"TranslationPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.TranslationPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/#gooey.types.TranslationPageStatusResponse","title":"TranslationPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.TranslationPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.TranslationPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.TranslationPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[TranslationPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.TranslationPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.TranslationPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.TranslationPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.TranslationPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageRequest","title":"VideoBotsPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageRequest.asr_language","title":"asr_language  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>asr_language: Optional[str] = Field(default=None)\n</code></pre> <p>Choose a language to transcribe incoming audio messages to text.</p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageRequest.asr_model","title":"asr_model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>asr_model: Optional[AsrModels] = Field(default=None)\n</code></pre> <p>Choose a model to transcribe incoming audio messages to text.</p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageRequest.dense_weight","title":"dense_weight  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dense_weight: Optional[float] = Field(default=None)\n</code></pre> <p>Weightage for dense vs sparse embeddings. <code>0</code> for sparse, <code>1</code> for dense, <code>0.5</code> for equal weight. Generally speaking, dense embeddings excel at understanding the context of the query, whereas sparse vectors excel at keyword matches.</p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageRequest.doc_extract_url","title":"doc_extract_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>doc_extract_url: Optional[str] = Field(default=None)\n</code></pre> <p>Select a workflow to extract text from documents and images.</p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageRequest.document_model","title":"document_model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>document_model: Optional[str] = Field(default=None)\n</code></pre> <p>When your copilot users upload a photo or pdf, what kind of document are they mostly likely to upload? (via Azure)</p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageRequest.elevenlabs_voice_name","title":"elevenlabs_voice_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>elevenlabs_voice_name: Optional[str] = Field(default=None)\n</code></pre> <p>Use <code>elevenlabs_voice_id</code> instead</p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageRequest.tools","title":"tools  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tools: Optional[List[LlmTools]] = Field(default=None)\n</code></pre> <p>Give your copilot superpowers by giving it access to tools. Powered by Function calling.</p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageRequest.user_language","title":"user_language  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user_language: Optional[str] = Field(default=None)\n</code></pre> <p>Choose a language to translate incoming text &amp; audio messages to English and responses back to your selected language. Useful for low-resource languages.</p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageRequestFunctionsItem","title":"VideoBotsPageRequestFunctionsItem","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageRequestFunctionsItem.trigger","title":"trigger  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trigger: FunctionTrigger = Field()\n</code></pre> <p>When to run this function. <code>pre</code> runs before the recipe, <code>post</code> runs after the recipe.</p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageRequestSadtalkerSettings","title":"VideoBotsPageRequestSadtalkerSettings","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageRequestSadtalkerSettings.expression_scale","title":"expression_scale  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>expression_scale: Optional[float] = Field(default=None)\n</code></pre> <p>Scale the amount of expression motion. 1.0 is normal, 0.5 is very reduced, and 2.0 is quite a lot.</p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageRequestSadtalkerSettings.pose_style","title":"pose_style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pose_style: Optional[int] = Field(default=None)\n</code></pre> <p>Random seed 0-45 inclusive that affects how the pose is animated.</p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageRequestSadtalkerSettings.preprocess","title":"preprocess  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>preprocess: Optional[\n    VideoBotsPageRequestSadtalkerSettingsPreprocess\n] = Field(default=None)\n</code></pre> <p>SadTalker only generates 512x512 output. 'crop' handles this by cropping the input to 512x512. 'resize' scales down the input to fit 512x512 and scales it back up after lipsyncing (does not work well for full person images, better for portraits). 'full' processes the cropped region and pastes it back into the original input. 'extcrop' and 'extfull' are similar to 'crop' and 'full' but with extended cropping.</p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageStatusResponse","title":"VideoBotsPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[VideoBotsPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/#gooey.types.VideoBotsPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/agg_function/","title":"gooey.types.agg_function","text":""},{"location":"reference/gooey/types/agg_function/#gooey.types.agg_function","title":"agg_function","text":""},{"location":"reference/gooey/types/agg_function_function/","title":"gooey.types.agg_function_function","text":""},{"location":"reference/gooey/types/agg_function_function/#gooey.types.agg_function_function","title":"agg_function_function","text":""},{"location":"reference/gooey/types/agg_function_result/","title":"gooey.types.agg_function_result","text":""},{"location":"reference/gooey/types/agg_function_result/#gooey.types.agg_function_result","title":"agg_function_result","text":""},{"location":"reference/gooey/types/agg_function_result_function/","title":"gooey.types.agg_function_result_function","text":""},{"location":"reference/gooey/types/agg_function_result_function/#gooey.types.agg_function_result_function","title":"agg_function_result_function","text":""},{"location":"reference/gooey/types/animation_models/","title":"gooey.types.animation_models","text":""},{"location":"reference/gooey/types/animation_models/#gooey.types.animation_models","title":"animation_models","text":""},{"location":"reference/gooey/types/animation_prompt/","title":"gooey.types.animation_prompt","text":""},{"location":"reference/gooey/types/animation_prompt/#gooey.types.animation_prompt","title":"animation_prompt","text":""},{"location":"reference/gooey/types/asr_chunk/","title":"gooey.types.asr_chunk","text":""},{"location":"reference/gooey/types/asr_chunk/#gooey.types.asr_chunk","title":"asr_chunk","text":""},{"location":"reference/gooey/types/asr_models/","title":"gooey.types.asr_models","text":""},{"location":"reference/gooey/types/asr_models/#gooey.types.asr_models","title":"asr_models","text":""},{"location":"reference/gooey/types/asr_output_format/","title":"gooey.types.asr_output_format","text":""},{"location":"reference/gooey/types/asr_output_format/#gooey.types.asr_output_format","title":"asr_output_format","text":""},{"location":"reference/gooey/types/asr_output_json/","title":"gooey.types.asr_output_json","text":""},{"location":"reference/gooey/types/asr_output_json/#gooey.types.asr_output_json","title":"asr_output_json","text":""},{"location":"reference/gooey/types/asr_page_output/","title":"gooey.types.asr_page_output","text":""},{"location":"reference/gooey/types/asr_page_output/#gooey.types.asr_page_output","title":"asr_page_output","text":""},{"location":"reference/gooey/types/asr_page_output_output_text_item/","title":"gooey.types.asr_page_output_output_text_item","text":""},{"location":"reference/gooey/types/asr_page_output_output_text_item/#gooey.types.asr_page_output_output_text_item","title":"asr_page_output_output_text_item","text":""},{"location":"reference/gooey/types/asr_page_request/","title":"gooey.types.asr_page_request","text":""},{"location":"reference/gooey/types/asr_page_request/#gooey.types.asr_page_request","title":"asr_page_request","text":""},{"location":"reference/gooey/types/asr_page_request/#gooey.types.asr_page_request.AsrPageRequest","title":"AsrPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/asr_page_request/#gooey.types.asr_page_request.AsrPageRequest.google_translate_target","title":"google_translate_target  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>google_translate_target: Optional[str] = Field(default=None)\n</code></pre> <p>use <code>translation_model</code> &amp; <code>translation_target</code> instead.</p>"},{"location":"reference/gooey/types/asr_page_request/#gooey.types.asr_page_request.AsrPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/asr_page_status_response/","title":"gooey.types.asr_page_status_response","text":""},{"location":"reference/gooey/types/asr_page_status_response/#gooey.types.asr_page_status_response","title":"asr_page_status_response","text":""},{"location":"reference/gooey/types/asr_page_status_response/#gooey.types.asr_page_status_response.AsrPageStatusResponse","title":"AsrPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/asr_page_status_response/#gooey.types.asr_page_status_response.AsrPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/asr_page_status_response/#gooey.types.asr_page_status_response.AsrPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/asr_page_status_response/#gooey.types.asr_page_status_response.AsrPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[AsrPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/asr_page_status_response/#gooey.types.asr_page_status_response.AsrPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/asr_page_status_response/#gooey.types.asr_page_status_response.AsrPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/asr_page_status_response/#gooey.types.asr_page_status_response.AsrPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/asr_page_status_response/#gooey.types.asr_page_status_response.AsrPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/async_api_response_model_v3/","title":"gooey.types.async_api_response_model_v3","text":""},{"location":"reference/gooey/types/async_api_response_model_v3/#gooey.types.async_api_response_model_v3","title":"async_api_response_model_v3","text":""},{"location":"reference/gooey/types/async_api_response_model_v3/#gooey.types.async_api_response_model_v3.AsyncApiResponseModelV3","title":"AsyncApiResponseModelV3","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/async_api_response_model_v3/#gooey.types.async_api_response_model_v3.AsyncApiResponseModelV3.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/async_api_response_model_v3/#gooey.types.async_api_response_model_v3.AsyncApiResponseModelV3.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/async_api_response_model_v3/#gooey.types.async_api_response_model_v3.AsyncApiResponseModelV3.status_url","title":"status_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status_url: str = Field()\n</code></pre> <p>URL to check the status of the run. Also included in the <code>Location</code> header of the response.</p>"},{"location":"reference/gooey/types/async_api_response_model_v3/#gooey.types.async_api_response_model_v3.AsyncApiResponseModelV3.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/balance_response/","title":"gooey.types.balance_response","text":""},{"location":"reference/gooey/types/balance_response/#gooey.types.balance_response","title":"balance_response","text":""},{"location":"reference/gooey/types/balance_response/#gooey.types.balance_response.BalanceResponse","title":"BalanceResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/balance_response/#gooey.types.balance_response.BalanceResponse.balance","title":"balance  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>balance: int = Field()\n</code></pre> <p>Current balance in credits</p>"},{"location":"reference/gooey/types/bot_broadcast_filters/","title":"gooey.types.bot_broadcast_filters","text":""},{"location":"reference/gooey/types/bot_broadcast_filters/#gooey.types.bot_broadcast_filters","title":"bot_broadcast_filters","text":""},{"location":"reference/gooey/types/bot_broadcast_filters/#gooey.types.bot_broadcast_filters.BotBroadcastFilters","title":"BotBroadcastFilters","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/bot_broadcast_filters/#gooey.types.bot_broadcast_filters.BotBroadcastFilters.slack_channel_is_personal","title":"slack_channel_is_personal  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>slack_channel_is_personal: Optional[bool] = Field(\n    default=None\n)\n</code></pre> <p>Filter by whether the Slack channel is personal. By default, will broadcast to both public and personal slack channels.</p>"},{"location":"reference/gooey/types/bot_broadcast_filters/#gooey.types.bot_broadcast_filters.BotBroadcastFilters.slack_user_id_in","title":"slack_user_id_in  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>slack_user_id_in: Optional[List[str]] = Field(\n    alias=\"slack_user_id__in\", default=None\n)\n</code></pre> <p>A list of Slack user IDs to broadcast to.</p>"},{"location":"reference/gooey/types/bot_broadcast_filters/#gooey.types.bot_broadcast_filters.BotBroadcastFilters.slack_user_name_icontains","title":"slack_user_name_icontains  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>slack_user_name_icontains: Optional[str] = Field(\n    alias=\"slack_user_name__icontains\", default=None\n)\n</code></pre> <p>Filter by the Slack user's name. Case insensitive.</p>"},{"location":"reference/gooey/types/bot_broadcast_filters/#gooey.types.bot_broadcast_filters.BotBroadcastFilters.wa_phone_number_in","title":"wa_phone_number_in  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>wa_phone_number_in: Optional[List[str]] = Field(\n    alias=\"wa_phone_number__in\", default=None\n)\n</code></pre> <p>A list of WhatsApp phone numbers to broadcast to.</p>"},{"location":"reference/gooey/types/bot_broadcast_request_model/","title":"gooey.types.bot_broadcast_request_model","text":""},{"location":"reference/gooey/types/bot_broadcast_request_model/#gooey.types.bot_broadcast_request_model","title":"bot_broadcast_request_model","text":""},{"location":"reference/gooey/types/bot_broadcast_request_model/#gooey.types.bot_broadcast_request_model.BotBroadcastRequestModel","title":"BotBroadcastRequestModel","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/bot_broadcast_request_model/#gooey.types.bot_broadcast_request_model.BotBroadcastRequestModel.audio","title":"audio  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>audio: Optional[str] = Field(default=None)\n</code></pre> <p>Audio URL to send to all users</p>"},{"location":"reference/gooey/types/bot_broadcast_request_model/#gooey.types.bot_broadcast_request_model.BotBroadcastRequestModel.buttons","title":"buttons  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>buttons: Optional[List[ReplyButton]] = Field(default=None)\n</code></pre> <p>Buttons to send to all users</p>"},{"location":"reference/gooey/types/bot_broadcast_request_model/#gooey.types.bot_broadcast_request_model.BotBroadcastRequestModel.documents","title":"documents  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>documents: Optional[List[str]] = Field(default=None)\n</code></pre> <p>Video URL to send to all users</p>"},{"location":"reference/gooey/types/bot_broadcast_request_model/#gooey.types.bot_broadcast_request_model.BotBroadcastRequestModel.filters","title":"filters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>filters: Optional[BotBroadcastFilters] = Field(default=None)\n</code></pre> <p>Filters to select users to broadcast to. If not provided, will broadcast to all users of this bot.</p>"},{"location":"reference/gooey/types/bot_broadcast_request_model/#gooey.types.bot_broadcast_request_model.BotBroadcastRequestModel.text","title":"text  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>text: str = Field()\n</code></pre> <p>Message to broadcast to all users</p>"},{"location":"reference/gooey/types/bot_broadcast_request_model/#gooey.types.bot_broadcast_request_model.BotBroadcastRequestModel.video","title":"video  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>video: Optional[str] = Field(default=None)\n</code></pre> <p>Video URL to send to all users</p>"},{"location":"reference/gooey/types/bulk_eval_page_output/","title":"gooey.types.bulk_eval_page_output","text":""},{"location":"reference/gooey/types/bulk_eval_page_output/#gooey.types.bulk_eval_page_output","title":"bulk_eval_page_output","text":""},{"location":"reference/gooey/types/bulk_eval_page_status_response/","title":"gooey.types.bulk_eval_page_status_response","text":""},{"location":"reference/gooey/types/bulk_eval_page_status_response/#gooey.types.bulk_eval_page_status_response","title":"bulk_eval_page_status_response","text":""},{"location":"reference/gooey/types/bulk_eval_page_status_response/#gooey.types.bulk_eval_page_status_response.BulkEvalPageStatusResponse","title":"BulkEvalPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/bulk_eval_page_status_response/#gooey.types.bulk_eval_page_status_response.BulkEvalPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/bulk_eval_page_status_response/#gooey.types.bulk_eval_page_status_response.BulkEvalPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/bulk_eval_page_status_response/#gooey.types.bulk_eval_page_status_response.BulkEvalPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[BulkEvalPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/bulk_eval_page_status_response/#gooey.types.bulk_eval_page_status_response.BulkEvalPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/bulk_eval_page_status_response/#gooey.types.bulk_eval_page_status_response.BulkEvalPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/bulk_eval_page_status_response/#gooey.types.bulk_eval_page_status_response.BulkEvalPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/bulk_eval_page_status_response/#gooey.types.bulk_eval_page_status_response.BulkEvalPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/bulk_runner_page_output/","title":"gooey.types.bulk_runner_page_output","text":""},{"location":"reference/gooey/types/bulk_runner_page_output/#gooey.types.bulk_runner_page_output","title":"bulk_runner_page_output","text":""},{"location":"reference/gooey/types/bulk_runner_page_output/#gooey.types.bulk_runner_page_output.BulkRunnerPageOutput","title":"BulkRunnerPageOutput","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/bulk_runner_page_output/#gooey.types.bulk_runner_page_output.BulkRunnerPageOutput.eval_runs","title":"eval_runs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>eval_runs: Optional[List[str]] = Field(default=None)\n</code></pre> <p>List of URLs to the evaluation runs that you requested.</p>"},{"location":"reference/gooey/types/bulk_runner_page_request/","title":"gooey.types.bulk_runner_page_request","text":""},{"location":"reference/gooey/types/bulk_runner_page_request/#gooey.types.bulk_runner_page_request","title":"bulk_runner_page_request","text":""},{"location":"reference/gooey/types/bulk_runner_page_request/#gooey.types.bulk_runner_page_request.BulkRunnerPageRequest","title":"BulkRunnerPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/bulk_runner_page_request/#gooey.types.bulk_runner_page_request.BulkRunnerPageRequest.documents","title":"documents  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>documents: List[str] = Field()\n</code></pre> <p>Upload or link to a CSV or google sheet that contains your sample input data. For example, for Copilot, this would sample questions or for Art QR Code, would would be pairs of image descriptions and URLs. Remember to includes header names in your CSV too.</p>"},{"location":"reference/gooey/types/bulk_runner_page_request/#gooey.types.bulk_runner_page_request.BulkRunnerPageRequest.eval_urls","title":"eval_urls  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>eval_urls: Optional[List[str]] = Field(default=None)\n</code></pre> <p>(optional) Add one or more Gooey.AI Evaluator Workflows to evaluate the results of your runs.</p>"},{"location":"reference/gooey/types/bulk_runner_page_request/#gooey.types.bulk_runner_page_request.BulkRunnerPageRequest.input_columns","title":"input_columns  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>input_columns: Dict[str, str] = Field()\n</code></pre> <p>For each input field in the Gooey.AI workflow, specify the column in your input data that corresponds to it.</p>"},{"location":"reference/gooey/types/bulk_runner_page_request/#gooey.types.bulk_runner_page_request.BulkRunnerPageRequest.output_columns","title":"output_columns  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output_columns: Dict[str, str] = Field()\n</code></pre> <p>For each output field in the Gooey.AI workflow, specify the column name that you'd like to use for it in the output data.</p>"},{"location":"reference/gooey/types/bulk_runner_page_request/#gooey.types.bulk_runner_page_request.BulkRunnerPageRequest.run_urls","title":"run_urls  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_urls: List[str] = Field()\n</code></pre> <p>Provide one or more Gooey.AI workflow runs. You can add multiple runs from the same recipe (e.g. two versions of your copilot) and we'll run the inputs over both of them.</p>"},{"location":"reference/gooey/types/bulk_runner_page_request/#gooey.types.bulk_runner_page_request.BulkRunnerPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/bulk_runner_page_status_response/","title":"gooey.types.bulk_runner_page_status_response","text":""},{"location":"reference/gooey/types/bulk_runner_page_status_response/#gooey.types.bulk_runner_page_status_response","title":"bulk_runner_page_status_response","text":""},{"location":"reference/gooey/types/bulk_runner_page_status_response/#gooey.types.bulk_runner_page_status_response.BulkRunnerPageStatusResponse","title":"BulkRunnerPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/bulk_runner_page_status_response/#gooey.types.bulk_runner_page_status_response.BulkRunnerPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/bulk_runner_page_status_response/#gooey.types.bulk_runner_page_status_response.BulkRunnerPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/bulk_runner_page_status_response/#gooey.types.bulk_runner_page_status_response.BulkRunnerPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[BulkRunnerPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/bulk_runner_page_status_response/#gooey.types.bulk_runner_page_status_response.BulkRunnerPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/bulk_runner_page_status_response/#gooey.types.bulk_runner_page_status_response.BulkRunnerPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/bulk_runner_page_status_response/#gooey.types.bulk_runner_page_status_response.BulkRunnerPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/bulk_runner_page_status_response/#gooey.types.bulk_runner_page_status_response.BulkRunnerPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/button_pressed/","title":"gooey.types.button_pressed","text":""},{"location":"reference/gooey/types/button_pressed/#gooey.types.button_pressed","title":"button_pressed","text":""},{"location":"reference/gooey/types/button_pressed/#gooey.types.button_pressed.ButtonPressed","title":"ButtonPressed","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/button_pressed/#gooey.types.button_pressed.ButtonPressed.button_id","title":"button_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>button_id: str = Field()\n</code></pre> <p>The ID of the button that was pressed by the user</p>"},{"location":"reference/gooey/types/button_pressed/#gooey.types.button_pressed.ButtonPressed.context_msg_id","title":"context_msg_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>context_msg_id: str = Field()\n</code></pre> <p>The message ID of the context message on which the button was pressed</p>"},{"location":"reference/gooey/types/called_function_response/","title":"gooey.types.called_function_response","text":""},{"location":"reference/gooey/types/called_function_response/#gooey.types.called_function_response","title":"called_function_response","text":""},{"location":"reference/gooey/types/chat_completion_content_part_image_param/","title":"gooey.types.chat_completion_content_part_image_param","text":""},{"location":"reference/gooey/types/chat_completion_content_part_image_param/#gooey.types.chat_completion_content_part_image_param","title":"chat_completion_content_part_image_param","text":""},{"location":"reference/gooey/types/chat_completion_content_part_text_param/","title":"gooey.types.chat_completion_content_part_text_param","text":""},{"location":"reference/gooey/types/chat_completion_content_part_text_param/#gooey.types.chat_completion_content_part_text_param","title":"chat_completion_content_part_text_param","text":""},{"location":"reference/gooey/types/chyron_plant_page_output/","title":"gooey.types.chyron_plant_page_output","text":""},{"location":"reference/gooey/types/chyron_plant_page_output/#gooey.types.chyron_plant_page_output","title":"chyron_plant_page_output","text":""},{"location":"reference/gooey/types/chyron_plant_page_request/","title":"gooey.types.chyron_plant_page_request","text":""},{"location":"reference/gooey/types/chyron_plant_page_request/#gooey.types.chyron_plant_page_request","title":"chyron_plant_page_request","text":""},{"location":"reference/gooey/types/chyron_plant_page_request/#gooey.types.chyron_plant_page_request.ChyronPlantPageRequest","title":"ChyronPlantPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/chyron_plant_page_request/#gooey.types.chyron_plant_page_request.ChyronPlantPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/chyron_plant_page_status_response/","title":"gooey.types.chyron_plant_page_status_response","text":""},{"location":"reference/gooey/types/chyron_plant_page_status_response/#gooey.types.chyron_plant_page_status_response","title":"chyron_plant_page_status_response","text":""},{"location":"reference/gooey/types/chyron_plant_page_status_response/#gooey.types.chyron_plant_page_status_response.ChyronPlantPageStatusResponse","title":"ChyronPlantPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/chyron_plant_page_status_response/#gooey.types.chyron_plant_page_status_response.ChyronPlantPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/chyron_plant_page_status_response/#gooey.types.chyron_plant_page_status_response.ChyronPlantPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/chyron_plant_page_status_response/#gooey.types.chyron_plant_page_status_response.ChyronPlantPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[ChyronPlantPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/chyron_plant_page_status_response/#gooey.types.chyron_plant_page_status_response.ChyronPlantPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/chyron_plant_page_status_response/#gooey.types.chyron_plant_page_status_response.ChyronPlantPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/chyron_plant_page_status_response/#gooey.types.chyron_plant_page_status_response.ChyronPlantPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/chyron_plant_page_status_response/#gooey.types.chyron_plant_page_status_response.ChyronPlantPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/citation_styles/","title":"gooey.types.citation_styles","text":""},{"location":"reference/gooey/types/citation_styles/#gooey.types.citation_styles","title":"citation_styles","text":""},{"location":"reference/gooey/types/combine_documents_chains/","title":"gooey.types.combine_documents_chains","text":""},{"location":"reference/gooey/types/combine_documents_chains/#gooey.types.combine_documents_chains","title":"combine_documents_chains","text":""},{"location":"reference/gooey/types/compare_llm_page_output/","title":"gooey.types.compare_llm_page_output","text":""},{"location":"reference/gooey/types/compare_llm_page_output/#gooey.types.compare_llm_page_output","title":"compare_llm_page_output","text":""},{"location":"reference/gooey/types/compare_llm_page_status_response/","title":"gooey.types.compare_llm_page_status_response","text":""},{"location":"reference/gooey/types/compare_llm_page_status_response/#gooey.types.compare_llm_page_status_response","title":"compare_llm_page_status_response","text":""},{"location":"reference/gooey/types/compare_llm_page_status_response/#gooey.types.compare_llm_page_status_response.CompareLlmPageStatusResponse","title":"CompareLlmPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/compare_llm_page_status_response/#gooey.types.compare_llm_page_status_response.CompareLlmPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/compare_llm_page_status_response/#gooey.types.compare_llm_page_status_response.CompareLlmPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/compare_llm_page_status_response/#gooey.types.compare_llm_page_status_response.CompareLlmPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[CompareLlmPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/compare_llm_page_status_response/#gooey.types.compare_llm_page_status_response.CompareLlmPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/compare_llm_page_status_response/#gooey.types.compare_llm_page_status_response.CompareLlmPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/compare_llm_page_status_response/#gooey.types.compare_llm_page_status_response.CompareLlmPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/compare_llm_page_status_response/#gooey.types.compare_llm_page_status_response.CompareLlmPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/compare_text2img_page_output/","title":"gooey.types.compare_text2img_page_output","text":""},{"location":"reference/gooey/types/compare_text2img_page_output/#gooey.types.compare_text2img_page_output","title":"compare_text2img_page_output","text":""},{"location":"reference/gooey/types/compare_text2img_page_status_response/","title":"gooey.types.compare_text2img_page_status_response","text":""},{"location":"reference/gooey/types/compare_text2img_page_status_response/#gooey.types.compare_text2img_page_status_response","title":"compare_text2img_page_status_response","text":""},{"location":"reference/gooey/types/compare_text2img_page_status_response/#gooey.types.compare_text2img_page_status_response.CompareText2ImgPageStatusResponse","title":"CompareText2ImgPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/compare_text2img_page_status_response/#gooey.types.compare_text2img_page_status_response.CompareText2ImgPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/compare_text2img_page_status_response/#gooey.types.compare_text2img_page_status_response.CompareText2ImgPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/compare_text2img_page_status_response/#gooey.types.compare_text2img_page_status_response.CompareText2ImgPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[CompareText2ImgPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/compare_text2img_page_status_response/#gooey.types.compare_text2img_page_status_response.CompareText2ImgPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/compare_text2img_page_status_response/#gooey.types.compare_text2img_page_status_response.CompareText2ImgPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/compare_text2img_page_status_response/#gooey.types.compare_text2img_page_status_response.CompareText2ImgPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/compare_text2img_page_status_response/#gooey.types.compare_text2img_page_status_response.CompareText2ImgPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/compare_upscaler_page_output/","title":"gooey.types.compare_upscaler_page_output","text":""},{"location":"reference/gooey/types/compare_upscaler_page_output/#gooey.types.compare_upscaler_page_output","title":"compare_upscaler_page_output","text":""},{"location":"reference/gooey/types/compare_upscaler_page_output/#gooey.types.compare_upscaler_page_output.CompareUpscalerPageOutput","title":"CompareUpscalerPageOutput","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/compare_upscaler_page_output/#gooey.types.compare_upscaler_page_output.CompareUpscalerPageOutput.output_images","title":"output_images  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output_images: Optional[Dict[str, str]] = Field(\n    default=None\n)\n</code></pre> <p>Output Images</p>"},{"location":"reference/gooey/types/compare_upscaler_page_output/#gooey.types.compare_upscaler_page_output.CompareUpscalerPageOutput.output_videos","title":"output_videos  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output_videos: Optional[Dict[str, str]] = Field(\n    default=None\n)\n</code></pre> <p>Output Videos</p>"},{"location":"reference/gooey/types/compare_upscaler_page_request/","title":"gooey.types.compare_upscaler_page_request","text":""},{"location":"reference/gooey/types/compare_upscaler_page_request/#gooey.types.compare_upscaler_page_request","title":"compare_upscaler_page_request","text":""},{"location":"reference/gooey/types/compare_upscaler_page_request/#gooey.types.compare_upscaler_page_request.CompareUpscalerPageRequest","title":"CompareUpscalerPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/compare_upscaler_page_request/#gooey.types.compare_upscaler_page_request.CompareUpscalerPageRequest.scale","title":"scale  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scale: int = Field()\n</code></pre> <p>The final upsampling scale of the image</p>"},{"location":"reference/gooey/types/compare_upscaler_page_request/#gooey.types.compare_upscaler_page_request.CompareUpscalerPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/compare_upscaler_page_status_response/","title":"gooey.types.compare_upscaler_page_status_response","text":""},{"location":"reference/gooey/types/compare_upscaler_page_status_response/#gooey.types.compare_upscaler_page_status_response","title":"compare_upscaler_page_status_response","text":""},{"location":"reference/gooey/types/compare_upscaler_page_status_response/#gooey.types.compare_upscaler_page_status_response.CompareUpscalerPageStatusResponse","title":"CompareUpscalerPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/compare_upscaler_page_status_response/#gooey.types.compare_upscaler_page_status_response.CompareUpscalerPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/compare_upscaler_page_status_response/#gooey.types.compare_upscaler_page_status_response.CompareUpscalerPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/compare_upscaler_page_status_response/#gooey.types.compare_upscaler_page_status_response.CompareUpscalerPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[CompareUpscalerPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/compare_upscaler_page_status_response/#gooey.types.compare_upscaler_page_status_response.CompareUpscalerPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/compare_upscaler_page_status_response/#gooey.types.compare_upscaler_page_status_response.CompareUpscalerPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/compare_upscaler_page_status_response/#gooey.types.compare_upscaler_page_status_response.CompareUpscalerPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/compare_upscaler_page_status_response/#gooey.types.compare_upscaler_page_status_response.CompareUpscalerPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/console_logs/","title":"gooey.types.console_logs","text":""},{"location":"reference/gooey/types/console_logs/#gooey.types.console_logs","title":"console_logs","text":""},{"location":"reference/gooey/types/console_logs_level/","title":"gooey.types.console_logs_level","text":""},{"location":"reference/gooey/types/console_logs_level/#gooey.types.console_logs_level","title":"console_logs_level","text":""},{"location":"reference/gooey/types/control_net_models/","title":"gooey.types.control_net_models","text":""},{"location":"reference/gooey/types/control_net_models/#gooey.types.control_net_models","title":"control_net_models","text":""},{"location":"reference/gooey/types/conversation_entry/","title":"gooey.types.conversation_entry","text":""},{"location":"reference/gooey/types/conversation_entry/#gooey.types.conversation_entry","title":"conversation_entry","text":""},{"location":"reference/gooey/types/conversation_entry_content/","title":"gooey.types.conversation_entry_content","text":""},{"location":"reference/gooey/types/conversation_entry_content/#gooey.types.conversation_entry_content","title":"conversation_entry_content","text":""},{"location":"reference/gooey/types/conversation_entry_content_item/","title":"gooey.types.conversation_entry_content_item","text":""},{"location":"reference/gooey/types/conversation_entry_content_item/#gooey.types.conversation_entry_content_item","title":"conversation_entry_content_item","text":""},{"location":"reference/gooey/types/conversation_entry_role/","title":"gooey.types.conversation_entry_role","text":""},{"location":"reference/gooey/types/conversation_entry_role/#gooey.types.conversation_entry_role","title":"conversation_entry_role","text":""},{"location":"reference/gooey/types/conversation_start/","title":"gooey.types.conversation_start","text":""},{"location":"reference/gooey/types/conversation_start/#gooey.types.conversation_start","title":"conversation_start","text":""},{"location":"reference/gooey/types/conversation_start/#gooey.types.conversation_start.ConversationStart","title":"ConversationStart","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/conversation_start/#gooey.types.conversation_start.ConversationStart.bot_message_id","title":"bot_message_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bot_message_id: str = Field()\n</code></pre> <p>The bot message ID. Use this ID as the <code>context_msg_id</code> when sending a <code>button_pressed</code>.</p>"},{"location":"reference/gooey/types/conversation_start/#gooey.types.conversation_start.ConversationStart.conversation_id","title":"conversation_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>conversation_id: str = Field()\n</code></pre> <p>The conversation ID you provided in the request, or a random ID if not provided</p>"},{"location":"reference/gooey/types/conversation_start/#gooey.types.conversation_start.ConversationStart.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the conversation was created as ISO format</p>"},{"location":"reference/gooey/types/conversation_start/#gooey.types.conversation_start.ConversationStart.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: Optional[str] = Field(default=None)\n</code></pre> <p>The conversation was started. Save the IDs for future requests.</p>"},{"location":"reference/gooey/types/conversation_start/#gooey.types.conversation_start.ConversationStart.user_id","title":"user_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user_id: str = Field()\n</code></pre> <p>The user ID associated with this conversation</p>"},{"location":"reference/gooey/types/conversation_start/#gooey.types.conversation_start.ConversationStart.user_message_id","title":"user_message_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user_message_id: str = Field()\n</code></pre> <p>The user message ID you provided in the request, or a random ID if not provided.</p>"},{"location":"reference/gooey/types/create_stream_request/","title":"gooey.types.create_stream_request","text":""},{"location":"reference/gooey/types/create_stream_request/#gooey.types.create_stream_request","title":"create_stream_request","text":""},{"location":"reference/gooey/types/create_stream_request/#gooey.types.create_stream_request.CreateStreamRequest","title":"CreateStreamRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/create_stream_request/#gooey.types.create_stream_request.CreateStreamRequest.asr_language","title":"asr_language  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>asr_language: Optional[str] = Field(default=None)\n</code></pre> <p>Choose a language to transcribe incoming audio messages to text.</p>"},{"location":"reference/gooey/types/create_stream_request/#gooey.types.create_stream_request.CreateStreamRequest.asr_model","title":"asr_model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>asr_model: Optional[AsrModels] = Field(default=None)\n</code></pre> <p>Choose a model to transcribe incoming audio messages to text.</p>"},{"location":"reference/gooey/types/create_stream_request/#gooey.types.create_stream_request.CreateStreamRequest.button_pressed","title":"button_pressed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>button_pressed: Optional[ButtonPressed] = Field(\n    default=None\n)\n</code></pre> <p>The button that was pressed by the user.</p>"},{"location":"reference/gooey/types/create_stream_request/#gooey.types.create_stream_request.CreateStreamRequest.conversation_id","title":"conversation_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>conversation_id: Optional[str] = Field(default=None)\n</code></pre> <p>The gooey conversation ID.</p> <p>If not provided, a new conversation will be started and a new ID will be returned in the response. Use this to maintain the state of the conversation between requests.</p> <p>Note that you may not provide a custom ID here, and must only use the <code>conversation_id</code> returned in a previous response.</p>"},{"location":"reference/gooey/types/create_stream_request/#gooey.types.create_stream_request.CreateStreamRequest.dense_weight","title":"dense_weight  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dense_weight: Optional[float] = Field(default=None)\n</code></pre> <p>Weightage for dense vs sparse embeddings. <code>0</code> for sparse, <code>1</code> for dense, <code>0.5</code> for equal weight. Generally speaking, dense embeddings excel at understanding the context of the query, whereas sparse vectors excel at keyword matches.</p>"},{"location":"reference/gooey/types/create_stream_request/#gooey.types.create_stream_request.CreateStreamRequest.doc_extract_url","title":"doc_extract_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>doc_extract_url: Optional[str] = Field(default=None)\n</code></pre> <p>Select a workflow to extract text from documents and images.</p>"},{"location":"reference/gooey/types/create_stream_request/#gooey.types.create_stream_request.CreateStreamRequest.document_model","title":"document_model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>document_model: Optional[str] = Field(default=None)\n</code></pre> <p>When your copilot users upload a photo or pdf, what kind of document are they mostly likely to upload? (via Azure)</p>"},{"location":"reference/gooey/types/create_stream_request/#gooey.types.create_stream_request.CreateStreamRequest.elevenlabs_voice_name","title":"elevenlabs_voice_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>elevenlabs_voice_name: Optional[str] = Field(default=None)\n</code></pre> <p>Use <code>elevenlabs_voice_id</code> instead</p>"},{"location":"reference/gooey/types/create_stream_request/#gooey.types.create_stream_request.CreateStreamRequest.input_glossary_document","title":"input_glossary_document  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>input_glossary_document: Optional[str] = Field(default=None)\n</code></pre> <p>Translation Glossary for User Langauge -&gt; LLM Language (English)</p>"},{"location":"reference/gooey/types/create_stream_request/#gooey.types.create_stream_request.CreateStreamRequest.input_text","title":"input_text  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>input_text: Optional[str] = Field(default=None)\n</code></pre> <p>Use <code>input_prompt</code> instead</p>"},{"location":"reference/gooey/types/create_stream_request/#gooey.types.create_stream_request.CreateStreamRequest.integration_id","title":"integration_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>integration_id: str = Field()\n</code></pre> <p>Your Integration ID as shown in the Copilot Integrations tab</p>"},{"location":"reference/gooey/types/create_stream_request/#gooey.types.create_stream_request.CreateStreamRequest.output_glossary_document","title":"output_glossary_document  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output_glossary_document: Optional[str] = Field(\n    default=None\n)\n</code></pre> <p>Translation Glossary for LLM Language (English) -&gt; User Langauge</p>"},{"location":"reference/gooey/types/create_stream_request/#gooey.types.create_stream_request.CreateStreamRequest.tools","title":"tools  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tools: Optional[List[LlmTools]] = Field(default=None)\n</code></pre> <p>Give your copilot superpowers by giving it access to tools. Powered by Function calling.</p>"},{"location":"reference/gooey/types/create_stream_request/#gooey.types.create_stream_request.CreateStreamRequest.user_id","title":"user_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user_id: Optional[str] = Field(default=None)\n</code></pre> <p>Your app's custom user ID.</p> <p>If not provided, a random user will be created and a new ID will be returned in the response. If a <code>conversation_id</code> is provided, this field is automatically set to the user's id associated with that conversation.</p>"},{"location":"reference/gooey/types/create_stream_request/#gooey.types.create_stream_request.CreateStreamRequest.user_language","title":"user_language  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user_language: Optional[str] = Field(default=None)\n</code></pre> <p>Choose a language to translate incoming text &amp; audio messages to English and responses back to your selected language. Useful for low-resource languages.</p>"},{"location":"reference/gooey/types/create_stream_request/#gooey.types.create_stream_request.CreateStreamRequest.user_message_id","title":"user_message_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user_message_id: Optional[str] = Field(default=None)\n</code></pre> <p>Your app's custom message ID for the user message.</p> <p>If not provided, a random ID will be generated and returned in the response. This is useful for tracking messages in the conversation.</p>"},{"location":"reference/gooey/types/create_stream_request/#gooey.types.create_stream_request.CreateStreamRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/create_stream_response/","title":"gooey.types.create_stream_response","text":""},{"location":"reference/gooey/types/create_stream_response/#gooey.types.create_stream_response","title":"create_stream_response","text":""},{"location":"reference/gooey/types/create_stream_response/#gooey.types.create_stream_response.CreateStreamResponse","title":"CreateStreamResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/create_stream_response/#gooey.types.create_stream_response.CreateStreamResponse.stream_url","title":"stream_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>stream_url: str = Field()\n</code></pre> <p>The URL to stream the conversation. Use Server-Sent Events (SSE) to stream the response.</p>"},{"location":"reference/gooey/types/deforum_sd_page_output/","title":"gooey.types.deforum_sd_page_output","text":""},{"location":"reference/gooey/types/deforum_sd_page_output/#gooey.types.deforum_sd_page_output","title":"deforum_sd_page_output","text":""},{"location":"reference/gooey/types/deforum_sd_page_status_response/","title":"gooey.types.deforum_sd_page_status_response","text":""},{"location":"reference/gooey/types/deforum_sd_page_status_response/#gooey.types.deforum_sd_page_status_response","title":"deforum_sd_page_status_response","text":""},{"location":"reference/gooey/types/deforum_sd_page_status_response/#gooey.types.deforum_sd_page_status_response.DeforumSdPageStatusResponse","title":"DeforumSdPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/deforum_sd_page_status_response/#gooey.types.deforum_sd_page_status_response.DeforumSdPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/deforum_sd_page_status_response/#gooey.types.deforum_sd_page_status_response.DeforumSdPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/deforum_sd_page_status_response/#gooey.types.deforum_sd_page_status_response.DeforumSdPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[DeforumSdPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/deforum_sd_page_status_response/#gooey.types.deforum_sd_page_status_response.DeforumSdPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/deforum_sd_page_status_response/#gooey.types.deforum_sd_page_status_response.DeforumSdPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/deforum_sd_page_status_response/#gooey.types.deforum_sd_page_status_response.DeforumSdPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/deforum_sd_page_status_response/#gooey.types.deforum_sd_page_status_response.DeforumSdPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/doc_extract_page_output/","title":"gooey.types.doc_extract_page_output","text":""},{"location":"reference/gooey/types/doc_extract_page_output/#gooey.types.doc_extract_page_output","title":"doc_extract_page_output","text":""},{"location":"reference/gooey/types/doc_extract_page_request/","title":"gooey.types.doc_extract_page_request","text":""},{"location":"reference/gooey/types/doc_extract_page_request/#gooey.types.doc_extract_page_request","title":"doc_extract_page_request","text":""},{"location":"reference/gooey/types/doc_extract_page_request/#gooey.types.doc_extract_page_request.DocExtractPageRequest","title":"DocExtractPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/doc_extract_page_request/#gooey.types.doc_extract_page_request.DocExtractPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/doc_extract_page_status_response/","title":"gooey.types.doc_extract_page_status_response","text":""},{"location":"reference/gooey/types/doc_extract_page_status_response/#gooey.types.doc_extract_page_status_response","title":"doc_extract_page_status_response","text":""},{"location":"reference/gooey/types/doc_extract_page_status_response/#gooey.types.doc_extract_page_status_response.DocExtractPageStatusResponse","title":"DocExtractPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/doc_extract_page_status_response/#gooey.types.doc_extract_page_status_response.DocExtractPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/doc_extract_page_status_response/#gooey.types.doc_extract_page_status_response.DocExtractPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/doc_extract_page_status_response/#gooey.types.doc_extract_page_status_response.DocExtractPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[DocExtractPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/doc_extract_page_status_response/#gooey.types.doc_extract_page_status_response.DocExtractPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/doc_extract_page_status_response/#gooey.types.doc_extract_page_status_response.DocExtractPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/doc_extract_page_status_response/#gooey.types.doc_extract_page_status_response.DocExtractPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/doc_extract_page_status_response/#gooey.types.doc_extract_page_status_response.DocExtractPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/doc_search_page_output/","title":"gooey.types.doc_search_page_output","text":""},{"location":"reference/gooey/types/doc_search_page_output/#gooey.types.doc_search_page_output","title":"doc_search_page_output","text":""},{"location":"reference/gooey/types/doc_search_page_status_response/","title":"gooey.types.doc_search_page_status_response","text":""},{"location":"reference/gooey/types/doc_search_page_status_response/#gooey.types.doc_search_page_status_response","title":"doc_search_page_status_response","text":""},{"location":"reference/gooey/types/doc_search_page_status_response/#gooey.types.doc_search_page_status_response.DocSearchPageStatusResponse","title":"DocSearchPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/doc_search_page_status_response/#gooey.types.doc_search_page_status_response.DocSearchPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/doc_search_page_status_response/#gooey.types.doc_search_page_status_response.DocSearchPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/doc_search_page_status_response/#gooey.types.doc_search_page_status_response.DocSearchPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[DocSearchPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/doc_search_page_status_response/#gooey.types.doc_search_page_status_response.DocSearchPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/doc_search_page_status_response/#gooey.types.doc_search_page_status_response.DocSearchPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/doc_search_page_status_response/#gooey.types.doc_search_page_status_response.DocSearchPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/doc_search_page_status_response/#gooey.types.doc_search_page_status_response.DocSearchPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/doc_summary_page_output/","title":"gooey.types.doc_summary_page_output","text":""},{"location":"reference/gooey/types/doc_summary_page_output/#gooey.types.doc_summary_page_output","title":"doc_summary_page_output","text":""},{"location":"reference/gooey/types/doc_summary_page_request/","title":"gooey.types.doc_summary_page_request","text":""},{"location":"reference/gooey/types/doc_summary_page_request/#gooey.types.doc_summary_page_request","title":"doc_summary_page_request","text":""},{"location":"reference/gooey/types/doc_summary_page_request/#gooey.types.doc_summary_page_request.DocSummaryPageRequest","title":"DocSummaryPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/doc_summary_page_request/#gooey.types.doc_summary_page_request.DocSummaryPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/doc_summary_page_status_response/","title":"gooey.types.doc_summary_page_status_response","text":""},{"location":"reference/gooey/types/doc_summary_page_status_response/#gooey.types.doc_summary_page_status_response","title":"doc_summary_page_status_response","text":""},{"location":"reference/gooey/types/doc_summary_page_status_response/#gooey.types.doc_summary_page_status_response.DocSummaryPageStatusResponse","title":"DocSummaryPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/doc_summary_page_status_response/#gooey.types.doc_summary_page_status_response.DocSummaryPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/doc_summary_page_status_response/#gooey.types.doc_summary_page_status_response.DocSummaryPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/doc_summary_page_status_response/#gooey.types.doc_summary_page_status_response.DocSummaryPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[DocSummaryPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/doc_summary_page_status_response/#gooey.types.doc_summary_page_status_response.DocSummaryPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/doc_summary_page_status_response/#gooey.types.doc_summary_page_status_response.DocSummaryPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/doc_summary_page_status_response/#gooey.types.doc_summary_page_status_response.DocSummaryPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/doc_summary_page_status_response/#gooey.types.doc_summary_page_status_response.DocSummaryPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/email_face_inpainting_page_output/","title":"gooey.types.email_face_inpainting_page_output","text":""},{"location":"reference/gooey/types/email_face_inpainting_page_output/#gooey.types.email_face_inpainting_page_output","title":"email_face_inpainting_page_output","text":""},{"location":"reference/gooey/types/email_face_inpainting_page_status_response/","title":"gooey.types.email_face_inpainting_page_status_response","text":""},{"location":"reference/gooey/types/email_face_inpainting_page_status_response/#gooey.types.email_face_inpainting_page_status_response","title":"email_face_inpainting_page_status_response","text":""},{"location":"reference/gooey/types/email_face_inpainting_page_status_response/#gooey.types.email_face_inpainting_page_status_response.EmailFaceInpaintingPageStatusResponse","title":"EmailFaceInpaintingPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/email_face_inpainting_page_status_response/#gooey.types.email_face_inpainting_page_status_response.EmailFaceInpaintingPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/email_face_inpainting_page_status_response/#gooey.types.email_face_inpainting_page_status_response.EmailFaceInpaintingPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/email_face_inpainting_page_status_response/#gooey.types.email_face_inpainting_page_status_response.EmailFaceInpaintingPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[EmailFaceInpaintingPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/email_face_inpainting_page_status_response/#gooey.types.email_face_inpainting_page_status_response.EmailFaceInpaintingPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/email_face_inpainting_page_status_response/#gooey.types.email_face_inpainting_page_status_response.EmailFaceInpaintingPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/email_face_inpainting_page_status_response/#gooey.types.email_face_inpainting_page_status_response.EmailFaceInpaintingPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/email_face_inpainting_page_status_response/#gooey.types.email_face_inpainting_page_status_response.EmailFaceInpaintingPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/embedding_models/","title":"gooey.types.embedding_models","text":""},{"location":"reference/gooey/types/embedding_models/#gooey.types.embedding_models","title":"embedding_models","text":""},{"location":"reference/gooey/types/embeddings_page_output/","title":"gooey.types.embeddings_page_output","text":""},{"location":"reference/gooey/types/embeddings_page_output/#gooey.types.embeddings_page_output","title":"embeddings_page_output","text":""},{"location":"reference/gooey/types/embeddings_page_status_response/","title":"gooey.types.embeddings_page_status_response","text":""},{"location":"reference/gooey/types/embeddings_page_status_response/#gooey.types.embeddings_page_status_response","title":"embeddings_page_status_response","text":""},{"location":"reference/gooey/types/embeddings_page_status_response/#gooey.types.embeddings_page_status_response.EmbeddingsPageStatusResponse","title":"EmbeddingsPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/embeddings_page_status_response/#gooey.types.embeddings_page_status_response.EmbeddingsPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/embeddings_page_status_response/#gooey.types.embeddings_page_status_response.EmbeddingsPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/embeddings_page_status_response/#gooey.types.embeddings_page_status_response.EmbeddingsPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[EmbeddingsPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/embeddings_page_status_response/#gooey.types.embeddings_page_status_response.EmbeddingsPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/embeddings_page_status_response/#gooey.types.embeddings_page_status_response.EmbeddingsPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/embeddings_page_status_response/#gooey.types.embeddings_page_status_response.EmbeddingsPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/embeddings_page_status_response/#gooey.types.embeddings_page_status_response.EmbeddingsPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/eval_prompt/","title":"gooey.types.eval_prompt","text":""},{"location":"reference/gooey/types/eval_prompt/#gooey.types.eval_prompt","title":"eval_prompt","text":""},{"location":"reference/gooey/types/face_inpainting_page_output/","title":"gooey.types.face_inpainting_page_output","text":""},{"location":"reference/gooey/types/face_inpainting_page_output/#gooey.types.face_inpainting_page_output","title":"face_inpainting_page_output","text":""},{"location":"reference/gooey/types/face_inpainting_page_request/","title":"gooey.types.face_inpainting_page_request","text":""},{"location":"reference/gooey/types/face_inpainting_page_request/#gooey.types.face_inpainting_page_request","title":"face_inpainting_page_request","text":""},{"location":"reference/gooey/types/face_inpainting_page_request/#gooey.types.face_inpainting_page_request.FaceInpaintingPageRequest","title":"FaceInpaintingPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/face_inpainting_page_request/#gooey.types.face_inpainting_page_request.FaceInpaintingPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/face_inpainting_page_status_response/","title":"gooey.types.face_inpainting_page_status_response","text":""},{"location":"reference/gooey/types/face_inpainting_page_status_response/#gooey.types.face_inpainting_page_status_response","title":"face_inpainting_page_status_response","text":""},{"location":"reference/gooey/types/face_inpainting_page_status_response/#gooey.types.face_inpainting_page_status_response.FaceInpaintingPageStatusResponse","title":"FaceInpaintingPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/face_inpainting_page_status_response/#gooey.types.face_inpainting_page_status_response.FaceInpaintingPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/face_inpainting_page_status_response/#gooey.types.face_inpainting_page_status_response.FaceInpaintingPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/face_inpainting_page_status_response/#gooey.types.face_inpainting_page_status_response.FaceInpaintingPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[FaceInpaintingPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/face_inpainting_page_status_response/#gooey.types.face_inpainting_page_status_response.FaceInpaintingPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/face_inpainting_page_status_response/#gooey.types.face_inpainting_page_status_response.FaceInpaintingPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/face_inpainting_page_status_response/#gooey.types.face_inpainting_page_status_response.FaceInpaintingPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/face_inpainting_page_status_response/#gooey.types.face_inpainting_page_status_response.FaceInpaintingPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/final_response/","title":"gooey.types.final_response","text":""},{"location":"reference/gooey/types/final_response/#gooey.types.final_response","title":"final_response","text":""},{"location":"reference/gooey/types/final_response/#gooey.types.final_response.FinalResponse","title":"FinalResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/final_response/#gooey.types.final_response.FinalResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/final_response/#gooey.types.final_response.FinalResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/final_response/#gooey.types.final_response.FinalResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[ResponseModel] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/final_response/#gooey.types.final_response.FinalResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/final_response/#gooey.types.final_response.FinalResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/final_response/#gooey.types.final_response.FinalResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/final_response/#gooey.types.final_response.FinalResponse.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: Optional[str] = Field(default=None)\n</code></pre> <p>The run has completed. Use the <code>status_url</code> to check the status of the run and fetch the complete output.</p>"},{"location":"reference/gooey/types/final_response/#gooey.types.final_response.FinalResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/function_trigger/","title":"gooey.types.function_trigger","text":""},{"location":"reference/gooey/types/function_trigger/#gooey.types.function_trigger","title":"function_trigger","text":""},{"location":"reference/gooey/types/functions_page_output/","title":"gooey.types.functions_page_output","text":""},{"location":"reference/gooey/types/functions_page_output/#gooey.types.functions_page_output","title":"functions_page_output","text":""},{"location":"reference/gooey/types/functions_page_output/#gooey.types.functions_page_output.FunctionsPageOutput","title":"FunctionsPageOutput","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/functions_page_output/#gooey.types.functions_page_output.FunctionsPageOutput.error","title":"error  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>error: Optional[str] = Field(default=None)\n</code></pre> <p>JS Error from the code. If there are no errors, this will be null</p>"},{"location":"reference/gooey/types/functions_page_output/#gooey.types.functions_page_output.FunctionsPageOutput.logs","title":"logs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>logs: Optional[List[ConsoleLogs]] = Field(default=None)\n</code></pre> <p>Console logs from the code execution</p>"},{"location":"reference/gooey/types/functions_page_status_response/","title":"gooey.types.functions_page_status_response","text":""},{"location":"reference/gooey/types/functions_page_status_response/#gooey.types.functions_page_status_response","title":"functions_page_status_response","text":""},{"location":"reference/gooey/types/functions_page_status_response/#gooey.types.functions_page_status_response.FunctionsPageStatusResponse","title":"FunctionsPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/functions_page_status_response/#gooey.types.functions_page_status_response.FunctionsPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/functions_page_status_response/#gooey.types.functions_page_status_response.FunctionsPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/functions_page_status_response/#gooey.types.functions_page_status_response.FunctionsPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[FunctionsPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/functions_page_status_response/#gooey.types.functions_page_status_response.FunctionsPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/functions_page_status_response/#gooey.types.functions_page_status_response.FunctionsPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/functions_page_status_response/#gooey.types.functions_page_status_response.FunctionsPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/functions_page_status_response/#gooey.types.functions_page_status_response.FunctionsPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/generic_error_response/","title":"gooey.types.generic_error_response","text":""},{"location":"reference/gooey/types/generic_error_response/#gooey.types.generic_error_response","title":"generic_error_response","text":""},{"location":"reference/gooey/types/generic_error_response_detail/","title":"gooey.types.generic_error_response_detail","text":""},{"location":"reference/gooey/types/generic_error_response_detail/#gooey.types.generic_error_response_detail","title":"generic_error_response_detail","text":""},{"location":"reference/gooey/types/google_gpt_page_output/","title":"gooey.types.google_gpt_page_output","text":""},{"location":"reference/gooey/types/google_gpt_page_output/#gooey.types.google_gpt_page_output","title":"google_gpt_page_output","text":""},{"location":"reference/gooey/types/google_gpt_page_status_response/","title":"gooey.types.google_gpt_page_status_response","text":""},{"location":"reference/gooey/types/google_gpt_page_status_response/#gooey.types.google_gpt_page_status_response","title":"google_gpt_page_status_response","text":""},{"location":"reference/gooey/types/google_gpt_page_status_response/#gooey.types.google_gpt_page_status_response.GoogleGptPageStatusResponse","title":"GoogleGptPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/google_gpt_page_status_response/#gooey.types.google_gpt_page_status_response.GoogleGptPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/google_gpt_page_status_response/#gooey.types.google_gpt_page_status_response.GoogleGptPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/google_gpt_page_status_response/#gooey.types.google_gpt_page_status_response.GoogleGptPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[GoogleGptPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/google_gpt_page_status_response/#gooey.types.google_gpt_page_status_response.GoogleGptPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/google_gpt_page_status_response/#gooey.types.google_gpt_page_status_response.GoogleGptPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/google_gpt_page_status_response/#gooey.types.google_gpt_page_status_response.GoogleGptPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/google_gpt_page_status_response/#gooey.types.google_gpt_page_status_response.GoogleGptPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/google_image_gen_page_output/","title":"gooey.types.google_image_gen_page_output","text":""},{"location":"reference/gooey/types/google_image_gen_page_output/#gooey.types.google_image_gen_page_output","title":"google_image_gen_page_output","text":""},{"location":"reference/gooey/types/google_image_gen_page_status_response/","title":"gooey.types.google_image_gen_page_status_response","text":""},{"location":"reference/gooey/types/google_image_gen_page_status_response/#gooey.types.google_image_gen_page_status_response","title":"google_image_gen_page_status_response","text":""},{"location":"reference/gooey/types/google_image_gen_page_status_response/#gooey.types.google_image_gen_page_status_response.GoogleImageGenPageStatusResponse","title":"GoogleImageGenPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/google_image_gen_page_status_response/#gooey.types.google_image_gen_page_status_response.GoogleImageGenPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/google_image_gen_page_status_response/#gooey.types.google_image_gen_page_status_response.GoogleImageGenPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/google_image_gen_page_status_response/#gooey.types.google_image_gen_page_status_response.GoogleImageGenPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[GoogleImageGenPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/google_image_gen_page_status_response/#gooey.types.google_image_gen_page_status_response.GoogleImageGenPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/google_image_gen_page_status_response/#gooey.types.google_image_gen_page_status_response.GoogleImageGenPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/google_image_gen_page_status_response/#gooey.types.google_image_gen_page_status_response.GoogleImageGenPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/google_image_gen_page_status_response/#gooey.types.google_image_gen_page_status_response.GoogleImageGenPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/http_validation_error/","title":"gooey.types.http_validation_error","text":""},{"location":"reference/gooey/types/http_validation_error/#gooey.types.http_validation_error","title":"http_validation_error","text":""},{"location":"reference/gooey/types/image_segmentation_models/","title":"gooey.types.image_segmentation_models","text":""},{"location":"reference/gooey/types/image_segmentation_models/#gooey.types.image_segmentation_models","title":"image_segmentation_models","text":""},{"location":"reference/gooey/types/image_segmentation_page_output/","title":"gooey.types.image_segmentation_page_output","text":""},{"location":"reference/gooey/types/image_segmentation_page_output/#gooey.types.image_segmentation_page_output","title":"image_segmentation_page_output","text":""},{"location":"reference/gooey/types/image_segmentation_page_request/","title":"gooey.types.image_segmentation_page_request","text":""},{"location":"reference/gooey/types/image_segmentation_page_request/#gooey.types.image_segmentation_page_request","title":"image_segmentation_page_request","text":""},{"location":"reference/gooey/types/image_segmentation_page_request/#gooey.types.image_segmentation_page_request.ImageSegmentationPageRequest","title":"ImageSegmentationPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/image_segmentation_page_request/#gooey.types.image_segmentation_page_request.ImageSegmentationPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/image_segmentation_page_status_response/","title":"gooey.types.image_segmentation_page_status_response","text":""},{"location":"reference/gooey/types/image_segmentation_page_status_response/#gooey.types.image_segmentation_page_status_response","title":"image_segmentation_page_status_response","text":""},{"location":"reference/gooey/types/image_segmentation_page_status_response/#gooey.types.image_segmentation_page_status_response.ImageSegmentationPageStatusResponse","title":"ImageSegmentationPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/image_segmentation_page_status_response/#gooey.types.image_segmentation_page_status_response.ImageSegmentationPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/image_segmentation_page_status_response/#gooey.types.image_segmentation_page_status_response.ImageSegmentationPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/image_segmentation_page_status_response/#gooey.types.image_segmentation_page_status_response.ImageSegmentationPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[ImageSegmentationPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/image_segmentation_page_status_response/#gooey.types.image_segmentation_page_status_response.ImageSegmentationPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/image_segmentation_page_status_response/#gooey.types.image_segmentation_page_status_response.ImageSegmentationPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/image_segmentation_page_status_response/#gooey.types.image_segmentation_page_status_response.ImageSegmentationPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/image_segmentation_page_status_response/#gooey.types.image_segmentation_page_status_response.ImageSegmentationPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/image_to_image_models/","title":"gooey.types.image_to_image_models","text":""},{"location":"reference/gooey/types/image_to_image_models/#gooey.types.image_to_image_models","title":"image_to_image_models","text":""},{"location":"reference/gooey/types/image_url/","title":"gooey.types.image_url","text":""},{"location":"reference/gooey/types/image_url/#gooey.types.image_url","title":"image_url","text":""},{"location":"reference/gooey/types/image_url_detail/","title":"gooey.types.image_url_detail","text":""},{"location":"reference/gooey/types/image_url_detail/#gooey.types.image_url_detail","title":"image_url_detail","text":""},{"location":"reference/gooey/types/img2img_page_output/","title":"gooey.types.img2img_page_output","text":""},{"location":"reference/gooey/types/img2img_page_output/#gooey.types.img2img_page_output","title":"img2img_page_output","text":""},{"location":"reference/gooey/types/img2img_page_request/","title":"gooey.types.img2img_page_request","text":""},{"location":"reference/gooey/types/img2img_page_request/#gooey.types.img2img_page_request","title":"img2img_page_request","text":""},{"location":"reference/gooey/types/img2img_page_request/#gooey.types.img2img_page_request.Img2ImgPageRequest","title":"Img2ImgPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/img2img_page_request/#gooey.types.img2img_page_request.Img2ImgPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/img2img_page_status_response/","title":"gooey.types.img2img_page_status_response","text":""},{"location":"reference/gooey/types/img2img_page_status_response/#gooey.types.img2img_page_status_response","title":"img2img_page_status_response","text":""},{"location":"reference/gooey/types/img2img_page_status_response/#gooey.types.img2img_page_status_response.Img2ImgPageStatusResponse","title":"Img2ImgPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/img2img_page_status_response/#gooey.types.img2img_page_status_response.Img2ImgPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/img2img_page_status_response/#gooey.types.img2img_page_status_response.Img2ImgPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/img2img_page_status_response/#gooey.types.img2img_page_status_response.Img2ImgPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[Img2ImgPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/img2img_page_status_response/#gooey.types.img2img_page_status_response.Img2ImgPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/img2img_page_status_response/#gooey.types.img2img_page_status_response.Img2ImgPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/img2img_page_status_response/#gooey.types.img2img_page_status_response.Img2ImgPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/img2img_page_status_response/#gooey.types.img2img_page_status_response.Img2ImgPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/inpainting_models/","title":"gooey.types.inpainting_models","text":""},{"location":"reference/gooey/types/inpainting_models/#gooey.types.inpainting_models","title":"inpainting_models","text":""},{"location":"reference/gooey/types/keyword_query/","title":"gooey.types.keyword_query","text":""},{"location":"reference/gooey/types/keyword_query/#gooey.types.keyword_query","title":"keyword_query","text":""},{"location":"reference/gooey/types/large_language_models/","title":"gooey.types.large_language_models","text":""},{"location":"reference/gooey/types/large_language_models/#gooey.types.large_language_models","title":"large_language_models","text":""},{"location":"reference/gooey/types/letter_writer_page_output/","title":"gooey.types.letter_writer_page_output","text":""},{"location":"reference/gooey/types/letter_writer_page_output/#gooey.types.letter_writer_page_output","title":"letter_writer_page_output","text":""},{"location":"reference/gooey/types/letter_writer_page_request/","title":"gooey.types.letter_writer_page_request","text":""},{"location":"reference/gooey/types/letter_writer_page_request/#gooey.types.letter_writer_page_request","title":"letter_writer_page_request","text":""},{"location":"reference/gooey/types/letter_writer_page_request/#gooey.types.letter_writer_page_request.LetterWriterPageRequest","title":"LetterWriterPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/letter_writer_page_request/#gooey.types.letter_writer_page_request.LetterWriterPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/letter_writer_page_status_response/","title":"gooey.types.letter_writer_page_status_response","text":""},{"location":"reference/gooey/types/letter_writer_page_status_response/#gooey.types.letter_writer_page_status_response","title":"letter_writer_page_status_response","text":""},{"location":"reference/gooey/types/letter_writer_page_status_response/#gooey.types.letter_writer_page_status_response.LetterWriterPageStatusResponse","title":"LetterWriterPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/letter_writer_page_status_response/#gooey.types.letter_writer_page_status_response.LetterWriterPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/letter_writer_page_status_response/#gooey.types.letter_writer_page_status_response.LetterWriterPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/letter_writer_page_status_response/#gooey.types.letter_writer_page_status_response.LetterWriterPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[LetterWriterPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/letter_writer_page_status_response/#gooey.types.letter_writer_page_status_response.LetterWriterPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/letter_writer_page_status_response/#gooey.types.letter_writer_page_status_response.LetterWriterPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/letter_writer_page_status_response/#gooey.types.letter_writer_page_status_response.LetterWriterPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/letter_writer_page_status_response/#gooey.types.letter_writer_page_status_response.LetterWriterPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/lipsync_models/","title":"gooey.types.lipsync_models","text":""},{"location":"reference/gooey/types/lipsync_models/#gooey.types.lipsync_models","title":"lipsync_models","text":""},{"location":"reference/gooey/types/lipsync_page_output/","title":"gooey.types.lipsync_page_output","text":""},{"location":"reference/gooey/types/lipsync_page_output/#gooey.types.lipsync_page_output","title":"lipsync_page_output","text":""},{"location":"reference/gooey/types/lipsync_page_request/","title":"gooey.types.lipsync_page_request","text":""},{"location":"reference/gooey/types/lipsync_page_request/#gooey.types.lipsync_page_request","title":"lipsync_page_request","text":""},{"location":"reference/gooey/types/lipsync_page_request/#gooey.types.lipsync_page_request.LipsyncPageRequest","title":"LipsyncPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/lipsync_page_request/#gooey.types.lipsync_page_request.LipsyncPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/lipsync_page_status_response/","title":"gooey.types.lipsync_page_status_response","text":""},{"location":"reference/gooey/types/lipsync_page_status_response/#gooey.types.lipsync_page_status_response","title":"lipsync_page_status_response","text":""},{"location":"reference/gooey/types/lipsync_page_status_response/#gooey.types.lipsync_page_status_response.LipsyncPageStatusResponse","title":"LipsyncPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/lipsync_page_status_response/#gooey.types.lipsync_page_status_response.LipsyncPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/lipsync_page_status_response/#gooey.types.lipsync_page_status_response.LipsyncPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/lipsync_page_status_response/#gooey.types.lipsync_page_status_response.LipsyncPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[LipsyncPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/lipsync_page_status_response/#gooey.types.lipsync_page_status_response.LipsyncPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/lipsync_page_status_response/#gooey.types.lipsync_page_status_response.LipsyncPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/lipsync_page_status_response/#gooey.types.lipsync_page_status_response.LipsyncPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/lipsync_page_status_response/#gooey.types.lipsync_page_status_response.LipsyncPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/lipsync_tts_page_output/","title":"gooey.types.lipsync_tts_page_output","text":""},{"location":"reference/gooey/types/lipsync_tts_page_output/#gooey.types.lipsync_tts_page_output","title":"lipsync_tts_page_output","text":""},{"location":"reference/gooey/types/lipsync_tts_page_request/","title":"gooey.types.lipsync_tts_page_request","text":""},{"location":"reference/gooey/types/lipsync_tts_page_request/#gooey.types.lipsync_tts_page_request","title":"lipsync_tts_page_request","text":""},{"location":"reference/gooey/types/lipsync_tts_page_request/#gooey.types.lipsync_tts_page_request.LipsyncTtsPageRequest","title":"LipsyncTtsPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/lipsync_tts_page_request/#gooey.types.lipsync_tts_page_request.LipsyncTtsPageRequest.elevenlabs_voice_name","title":"elevenlabs_voice_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>elevenlabs_voice_name: Optional[str] = Field(default=None)\n</code></pre> <p>Use <code>elevenlabs_voice_id</code> instead</p>"},{"location":"reference/gooey/types/lipsync_tts_page_request/#gooey.types.lipsync_tts_page_request.LipsyncTtsPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/lipsync_tts_page_status_response/","title":"gooey.types.lipsync_tts_page_status_response","text":""},{"location":"reference/gooey/types/lipsync_tts_page_status_response/#gooey.types.lipsync_tts_page_status_response","title":"lipsync_tts_page_status_response","text":""},{"location":"reference/gooey/types/lipsync_tts_page_status_response/#gooey.types.lipsync_tts_page_status_response.LipsyncTtsPageStatusResponse","title":"LipsyncTtsPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/lipsync_tts_page_status_response/#gooey.types.lipsync_tts_page_status_response.LipsyncTtsPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/lipsync_tts_page_status_response/#gooey.types.lipsync_tts_page_status_response.LipsyncTtsPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/lipsync_tts_page_status_response/#gooey.types.lipsync_tts_page_status_response.LipsyncTtsPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[LipsyncTtsPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/lipsync_tts_page_status_response/#gooey.types.lipsync_tts_page_status_response.LipsyncTtsPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/lipsync_tts_page_status_response/#gooey.types.lipsync_tts_page_status_response.LipsyncTtsPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/lipsync_tts_page_status_response/#gooey.types.lipsync_tts_page_status_response.LipsyncTtsPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/lipsync_tts_page_status_response/#gooey.types.lipsync_tts_page_status_response.LipsyncTtsPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/llm_tools/","title":"gooey.types.llm_tools","text":""},{"location":"reference/gooey/types/llm_tools/#gooey.types.llm_tools","title":"llm_tools","text":""},{"location":"reference/gooey/types/message_part/","title":"gooey.types.message_part","text":""},{"location":"reference/gooey/types/message_part/#gooey.types.message_part","title":"message_part","text":""},{"location":"reference/gooey/types/message_part/#gooey.types.message_part.MessagePart","title":"MessagePart","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/message_part/#gooey.types.message_part.MessagePart.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/message_part/#gooey.types.message_part.MessagePart.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/message_part/#gooey.types.message_part.MessagePart.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: Optional[str] = Field(default=None)\n</code></pre> <p>The partial outputs from the bot will be streamed in parts. Use this to update the user interface iteratively.</p>"},{"location":"reference/gooey/types/object_inpainting_page_output/","title":"gooey.types.object_inpainting_page_output","text":""},{"location":"reference/gooey/types/object_inpainting_page_output/#gooey.types.object_inpainting_page_output","title":"object_inpainting_page_output","text":""},{"location":"reference/gooey/types/object_inpainting_page_request/","title":"gooey.types.object_inpainting_page_request","text":""},{"location":"reference/gooey/types/object_inpainting_page_request/#gooey.types.object_inpainting_page_request","title":"object_inpainting_page_request","text":""},{"location":"reference/gooey/types/object_inpainting_page_request/#gooey.types.object_inpainting_page_request.ObjectInpaintingPageRequest","title":"ObjectInpaintingPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/object_inpainting_page_request/#gooey.types.object_inpainting_page_request.ObjectInpaintingPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/object_inpainting_page_status_response/","title":"gooey.types.object_inpainting_page_status_response","text":""},{"location":"reference/gooey/types/object_inpainting_page_status_response/#gooey.types.object_inpainting_page_status_response","title":"object_inpainting_page_status_response","text":""},{"location":"reference/gooey/types/object_inpainting_page_status_response/#gooey.types.object_inpainting_page_status_response.ObjectInpaintingPageStatusResponse","title":"ObjectInpaintingPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/object_inpainting_page_status_response/#gooey.types.object_inpainting_page_status_response.ObjectInpaintingPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/object_inpainting_page_status_response/#gooey.types.object_inpainting_page_status_response.ObjectInpaintingPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/object_inpainting_page_status_response/#gooey.types.object_inpainting_page_status_response.ObjectInpaintingPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[ObjectInpaintingPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/object_inpainting_page_status_response/#gooey.types.object_inpainting_page_status_response.ObjectInpaintingPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/object_inpainting_page_status_response/#gooey.types.object_inpainting_page_status_response.ObjectInpaintingPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/object_inpainting_page_status_response/#gooey.types.object_inpainting_page_status_response.ObjectInpaintingPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/object_inpainting_page_status_response/#gooey.types.object_inpainting_page_status_response.ObjectInpaintingPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/open_ai_tts_models/","title":"gooey.types.open_ai_tts_models","text":""},{"location":"reference/gooey/types/open_ai_tts_models/#gooey.types.open_ai_tts_models","title":"open_ai_tts_models","text":""},{"location":"reference/gooey/types/open_ai_tts_voices/","title":"gooey.types.open_ai_tts_voices","text":""},{"location":"reference/gooey/types/open_ai_tts_voices/#gooey.types.open_ai_tts_voices","title":"open_ai_tts_voices","text":""},{"location":"reference/gooey/types/prompt_tree_node/","title":"gooey.types.prompt_tree_node","text":""},{"location":"reference/gooey/types/prompt_tree_node/#gooey.types.prompt_tree_node","title":"prompt_tree_node","text":""},{"location":"reference/gooey/types/prompt_tree_node_prompt/","title":"gooey.types.prompt_tree_node_prompt","text":""},{"location":"reference/gooey/types/prompt_tree_node_prompt/#gooey.types.prompt_tree_node_prompt","title":"prompt_tree_node_prompt","text":""},{"location":"reference/gooey/types/qr_code_generator_page_output/","title":"gooey.types.qr_code_generator_page_output","text":""},{"location":"reference/gooey/types/qr_code_generator_page_output/#gooey.types.qr_code_generator_page_output","title":"qr_code_generator_page_output","text":""},{"location":"reference/gooey/types/qr_code_generator_page_request/","title":"gooey.types.qr_code_generator_page_request","text":""},{"location":"reference/gooey/types/qr_code_generator_page_request/#gooey.types.qr_code_generator_page_request","title":"qr_code_generator_page_request","text":""},{"location":"reference/gooey/types/qr_code_generator_page_request/#gooey.types.qr_code_generator_page_request.QrCodeGeneratorPageRequest","title":"QrCodeGeneratorPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/qr_code_generator_page_request/#gooey.types.qr_code_generator_page_request.QrCodeGeneratorPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/qr_code_generator_page_status_response/","title":"gooey.types.qr_code_generator_page_status_response","text":""},{"location":"reference/gooey/types/qr_code_generator_page_status_response/#gooey.types.qr_code_generator_page_status_response","title":"qr_code_generator_page_status_response","text":""},{"location":"reference/gooey/types/qr_code_generator_page_status_response/#gooey.types.qr_code_generator_page_status_response.QrCodeGeneratorPageStatusResponse","title":"QrCodeGeneratorPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/qr_code_generator_page_status_response/#gooey.types.qr_code_generator_page_status_response.QrCodeGeneratorPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/qr_code_generator_page_status_response/#gooey.types.qr_code_generator_page_status_response.QrCodeGeneratorPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/qr_code_generator_page_status_response/#gooey.types.qr_code_generator_page_status_response.QrCodeGeneratorPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[QrCodeGeneratorPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/qr_code_generator_page_status_response/#gooey.types.qr_code_generator_page_status_response.QrCodeGeneratorPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/qr_code_generator_page_status_response/#gooey.types.qr_code_generator_page_status_response.QrCodeGeneratorPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/qr_code_generator_page_status_response/#gooey.types.qr_code_generator_page_status_response.QrCodeGeneratorPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/qr_code_generator_page_status_response/#gooey.types.qr_code_generator_page_status_response.QrCodeGeneratorPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/recipe_function/","title":"gooey.types.recipe_function","text":""},{"location":"reference/gooey/types/recipe_function/#gooey.types.recipe_function","title":"recipe_function","text":""},{"location":"reference/gooey/types/recipe_function/#gooey.types.recipe_function.RecipeFunction","title":"RecipeFunction","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/recipe_function/#gooey.types.recipe_function.RecipeFunction.trigger","title":"trigger  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trigger: FunctionTrigger = Field()\n</code></pre> <p>When to run this function. <code>pre</code> runs before the recipe, <code>post</code> runs after the recipe.</p>"},{"location":"reference/gooey/types/recipe_run_state/","title":"gooey.types.recipe_run_state","text":""},{"location":"reference/gooey/types/recipe_run_state/#gooey.types.recipe_run_state","title":"recipe_run_state","text":""},{"location":"reference/gooey/types/related_doc_search_response/","title":"gooey.types.related_doc_search_response","text":""},{"location":"reference/gooey/types/related_doc_search_response/#gooey.types.related_doc_search_response","title":"related_doc_search_response","text":""},{"location":"reference/gooey/types/related_google_gpt_response/","title":"gooey.types.related_google_gpt_response","text":""},{"location":"reference/gooey/types/related_google_gpt_response/#gooey.types.related_google_gpt_response","title":"related_google_gpt_response","text":""},{"location":"reference/gooey/types/related_qn_a_doc_page_output/","title":"gooey.types.related_qn_a_doc_page_output","text":""},{"location":"reference/gooey/types/related_qn_a_doc_page_output/#gooey.types.related_qn_a_doc_page_output","title":"related_qn_a_doc_page_output","text":""},{"location":"reference/gooey/types/related_qn_a_doc_page_status_response/","title":"gooey.types.related_qn_a_doc_page_status_response","text":""},{"location":"reference/gooey/types/related_qn_a_doc_page_status_response/#gooey.types.related_qn_a_doc_page_status_response","title":"related_qn_a_doc_page_status_response","text":""},{"location":"reference/gooey/types/related_qn_a_doc_page_status_response/#gooey.types.related_qn_a_doc_page_status_response.RelatedQnADocPageStatusResponse","title":"RelatedQnADocPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/related_qn_a_doc_page_status_response/#gooey.types.related_qn_a_doc_page_status_response.RelatedQnADocPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/related_qn_a_doc_page_status_response/#gooey.types.related_qn_a_doc_page_status_response.RelatedQnADocPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/related_qn_a_doc_page_status_response/#gooey.types.related_qn_a_doc_page_status_response.RelatedQnADocPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[RelatedQnADocPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/related_qn_a_doc_page_status_response/#gooey.types.related_qn_a_doc_page_status_response.RelatedQnADocPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/related_qn_a_doc_page_status_response/#gooey.types.related_qn_a_doc_page_status_response.RelatedQnADocPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/related_qn_a_doc_page_status_response/#gooey.types.related_qn_a_doc_page_status_response.RelatedQnADocPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/related_qn_a_doc_page_status_response/#gooey.types.related_qn_a_doc_page_status_response.RelatedQnADocPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/related_qn_a_page_output/","title":"gooey.types.related_qn_a_page_output","text":""},{"location":"reference/gooey/types/related_qn_a_page_output/#gooey.types.related_qn_a_page_output","title":"related_qn_a_page_output","text":""},{"location":"reference/gooey/types/related_qn_a_page_status_response/","title":"gooey.types.related_qn_a_page_status_response","text":""},{"location":"reference/gooey/types/related_qn_a_page_status_response/#gooey.types.related_qn_a_page_status_response","title":"related_qn_a_page_status_response","text":""},{"location":"reference/gooey/types/related_qn_a_page_status_response/#gooey.types.related_qn_a_page_status_response.RelatedQnAPageStatusResponse","title":"RelatedQnAPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/related_qn_a_page_status_response/#gooey.types.related_qn_a_page_status_response.RelatedQnAPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/related_qn_a_page_status_response/#gooey.types.related_qn_a_page_status_response.RelatedQnAPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/related_qn_a_page_status_response/#gooey.types.related_qn_a_page_status_response.RelatedQnAPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[RelatedQnAPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/related_qn_a_page_status_response/#gooey.types.related_qn_a_page_status_response.RelatedQnAPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/related_qn_a_page_status_response/#gooey.types.related_qn_a_page_status_response.RelatedQnAPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/related_qn_a_page_status_response/#gooey.types.related_qn_a_page_status_response.RelatedQnAPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/related_qn_a_page_status_response/#gooey.types.related_qn_a_page_status_response.RelatedQnAPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/reply_button/","title":"gooey.types.reply_button","text":""},{"location":"reference/gooey/types/reply_button/#gooey.types.reply_button","title":"reply_button","text":""},{"location":"reference/gooey/types/response_format_type/","title":"gooey.types.response_format_type","text":""},{"location":"reference/gooey/types/response_format_type/#gooey.types.response_format_type","title":"response_format_type","text":""},{"location":"reference/gooey/types/response_model/","title":"gooey.types.response_model","text":""},{"location":"reference/gooey/types/response_model/#gooey.types.response_model","title":"response_model","text":""},{"location":"reference/gooey/types/response_model_final_keyword_query/","title":"gooey.types.response_model_final_keyword_query","text":""},{"location":"reference/gooey/types/response_model_final_keyword_query/#gooey.types.response_model_final_keyword_query","title":"response_model_final_keyword_query","text":""},{"location":"reference/gooey/types/response_model_final_prompt/","title":"gooey.types.response_model_final_prompt","text":""},{"location":"reference/gooey/types/response_model_final_prompt/#gooey.types.response_model_final_prompt","title":"response_model_final_prompt","text":""},{"location":"reference/gooey/types/run_settings/","title":"gooey.types.run_settings","text":""},{"location":"reference/gooey/types/run_settings/#gooey.types.run_settings","title":"run_settings","text":""},{"location":"reference/gooey/types/run_settings/#gooey.types.run_settings.RunSettings","title":"RunSettings","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/run_settings/#gooey.types.run_settings.RunSettings.retention_policy","title":"retention_policy  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>retention_policy: Optional[RunSettingsRetentionPolicy] = (\n    Field(default=None)\n)\n</code></pre> <p>Policy for retaining the run data.</p>"},{"location":"reference/gooey/types/run_settings_retention_policy/","title":"gooey.types.run_settings_retention_policy","text":""},{"location":"reference/gooey/types/run_settings_retention_policy/#gooey.types.run_settings_retention_policy","title":"run_settings_retention_policy","text":""},{"location":"reference/gooey/types/run_start/","title":"gooey.types.run_start","text":""},{"location":"reference/gooey/types/run_start/#gooey.types.run_start","title":"run_start","text":""},{"location":"reference/gooey/types/run_start/#gooey.types.run_start.RunStart","title":"RunStart","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/run_start/#gooey.types.run_start.RunStart.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/run_start/#gooey.types.run_start.RunStart.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/run_start/#gooey.types.run_start.RunStart.status_url","title":"status_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status_url: str = Field()\n</code></pre> <p>URL to check the status of the run. Also included in the <code>Location</code> header of the response.</p>"},{"location":"reference/gooey/types/run_start/#gooey.types.run_start.RunStart.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: Optional[str] = Field(default=None)\n</code></pre> <p>The run was started. Save the IDs for future requests.Use the <code>status_url</code> to check the status of the run and fetch the complete output.</p>"},{"location":"reference/gooey/types/run_start/#gooey.types.run_start.RunStart.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/sad_talker_settings/","title":"gooey.types.sad_talker_settings","text":""},{"location":"reference/gooey/types/sad_talker_settings/#gooey.types.sad_talker_settings","title":"sad_talker_settings","text":""},{"location":"reference/gooey/types/sad_talker_settings/#gooey.types.sad_talker_settings.SadTalkerSettings","title":"SadTalkerSettings","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/sad_talker_settings/#gooey.types.sad_talker_settings.SadTalkerSettings.expression_scale","title":"expression_scale  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>expression_scale: Optional[float] = Field(default=None)\n</code></pre> <p>Scale the amount of expression motion. 1.0 is normal, 0.5 is very reduced, and 2.0 is quite a lot.</p>"},{"location":"reference/gooey/types/sad_talker_settings/#gooey.types.sad_talker_settings.SadTalkerSettings.pose_style","title":"pose_style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pose_style: Optional[int] = Field(default=None)\n</code></pre> <p>Random seed 0-45 inclusive that affects how the pose is animated.</p>"},{"location":"reference/gooey/types/sad_talker_settings/#gooey.types.sad_talker_settings.SadTalkerSettings.preprocess","title":"preprocess  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>preprocess: Optional[SadTalkerSettingsPreprocess] = Field(\n    default=None\n)\n</code></pre> <p>SadTalker only generates 512x512 output. 'crop' handles this by cropping the input to 512x512. 'resize' scales down the input to fit 512x512 and scales it back up after lipsyncing (does not work well for full person images, better for portraits). 'full' processes the cropped region and pastes it back into the original input. 'extcrop' and 'extfull' are similar to 'crop' and 'full' but with extended cropping.</p>"},{"location":"reference/gooey/types/sad_talker_settings_preprocess/","title":"gooey.types.sad_talker_settings_preprocess","text":""},{"location":"reference/gooey/types/sad_talker_settings_preprocess/#gooey.types.sad_talker_settings_preprocess","title":"sad_talker_settings_preprocess","text":""},{"location":"reference/gooey/types/schedulers/","title":"gooey.types.schedulers","text":""},{"location":"reference/gooey/types/schedulers/#gooey.types.schedulers","title":"schedulers","text":""},{"location":"reference/gooey/types/search_reference/","title":"gooey.types.search_reference","text":""},{"location":"reference/gooey/types/search_reference/#gooey.types.search_reference","title":"search_reference","text":""},{"location":"reference/gooey/types/selected_control_net_models/","title":"gooey.types.selected_control_net_models","text":""},{"location":"reference/gooey/types/selected_control_net_models/#gooey.types.selected_control_net_models","title":"selected_control_net_models","text":""},{"location":"reference/gooey/types/seo_summary_page_output/","title":"gooey.types.seo_summary_page_output","text":""},{"location":"reference/gooey/types/seo_summary_page_output/#gooey.types.seo_summary_page_output","title":"seo_summary_page_output","text":""},{"location":"reference/gooey/types/seo_summary_page_status_response/","title":"gooey.types.seo_summary_page_status_response","text":""},{"location":"reference/gooey/types/seo_summary_page_status_response/#gooey.types.seo_summary_page_status_response","title":"seo_summary_page_status_response","text":""},{"location":"reference/gooey/types/seo_summary_page_status_response/#gooey.types.seo_summary_page_status_response.SeoSummaryPageStatusResponse","title":"SeoSummaryPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/seo_summary_page_status_response/#gooey.types.seo_summary_page_status_response.SeoSummaryPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/seo_summary_page_status_response/#gooey.types.seo_summary_page_status_response.SeoSummaryPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/seo_summary_page_status_response/#gooey.types.seo_summary_page_status_response.SeoSummaryPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[SeoSummaryPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/seo_summary_page_status_response/#gooey.types.seo_summary_page_status_response.SeoSummaryPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/seo_summary_page_status_response/#gooey.types.seo_summary_page_status_response.SeoSummaryPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/seo_summary_page_status_response/#gooey.types.seo_summary_page_status_response.SeoSummaryPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/seo_summary_page_status_response/#gooey.types.seo_summary_page_status_response.SeoSummaryPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/serp_search_locations/","title":"gooey.types.serp_search_locations","text":""},{"location":"reference/gooey/types/serp_search_locations/#gooey.types.serp_search_locations","title":"serp_search_locations","text":""},{"location":"reference/gooey/types/serp_search_type/","title":"gooey.types.serp_search_type","text":""},{"location":"reference/gooey/types/serp_search_type/#gooey.types.serp_search_type","title":"serp_search_type","text":""},{"location":"reference/gooey/types/smart_gpt_page_output/","title":"gooey.types.smart_gpt_page_output","text":""},{"location":"reference/gooey/types/smart_gpt_page_output/#gooey.types.smart_gpt_page_output","title":"smart_gpt_page_output","text":""},{"location":"reference/gooey/types/smart_gpt_page_status_response/","title":"gooey.types.smart_gpt_page_status_response","text":""},{"location":"reference/gooey/types/smart_gpt_page_status_response/#gooey.types.smart_gpt_page_status_response","title":"smart_gpt_page_status_response","text":""},{"location":"reference/gooey/types/smart_gpt_page_status_response/#gooey.types.smart_gpt_page_status_response.SmartGptPageStatusResponse","title":"SmartGptPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/smart_gpt_page_status_response/#gooey.types.smart_gpt_page_status_response.SmartGptPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/smart_gpt_page_status_response/#gooey.types.smart_gpt_page_status_response.SmartGptPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/smart_gpt_page_status_response/#gooey.types.smart_gpt_page_status_response.SmartGptPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[SmartGptPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/smart_gpt_page_status_response/#gooey.types.smart_gpt_page_status_response.SmartGptPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/smart_gpt_page_status_response/#gooey.types.smart_gpt_page_status_response.SmartGptPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/smart_gpt_page_status_response/#gooey.types.smart_gpt_page_status_response.SmartGptPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/smart_gpt_page_status_response/#gooey.types.smart_gpt_page_status_response.SmartGptPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/social_lookup_email_page_output/","title":"gooey.types.social_lookup_email_page_output","text":""},{"location":"reference/gooey/types/social_lookup_email_page_output/#gooey.types.social_lookup_email_page_output","title":"social_lookup_email_page_output","text":""},{"location":"reference/gooey/types/social_lookup_email_page_status_response/","title":"gooey.types.social_lookup_email_page_status_response","text":""},{"location":"reference/gooey/types/social_lookup_email_page_status_response/#gooey.types.social_lookup_email_page_status_response","title":"social_lookup_email_page_status_response","text":""},{"location":"reference/gooey/types/social_lookup_email_page_status_response/#gooey.types.social_lookup_email_page_status_response.SocialLookupEmailPageStatusResponse","title":"SocialLookupEmailPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/social_lookup_email_page_status_response/#gooey.types.social_lookup_email_page_status_response.SocialLookupEmailPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/social_lookup_email_page_status_response/#gooey.types.social_lookup_email_page_status_response.SocialLookupEmailPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/social_lookup_email_page_status_response/#gooey.types.social_lookup_email_page_status_response.SocialLookupEmailPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[SocialLookupEmailPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/social_lookup_email_page_status_response/#gooey.types.social_lookup_email_page_status_response.SocialLookupEmailPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/social_lookup_email_page_status_response/#gooey.types.social_lookup_email_page_status_response.SocialLookupEmailPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/social_lookup_email_page_status_response/#gooey.types.social_lookup_email_page_status_response.SocialLookupEmailPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/social_lookup_email_page_status_response/#gooey.types.social_lookup_email_page_status_response.SocialLookupEmailPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/stream_error/","title":"gooey.types.stream_error","text":""},{"location":"reference/gooey/types/stream_error/#gooey.types.stream_error","title":"stream_error","text":""},{"location":"reference/gooey/types/stream_error/#gooey.types.stream_error.StreamError","title":"StreamError","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/stream_error/#gooey.types.stream_error.StreamError.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the error</p>"},{"location":"reference/gooey/types/stream_error/#gooey.types.stream_error.StreamError.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: Optional[str] = Field(default=None)\n</code></pre> <p>An error occurred. The stream has ended.</p>"},{"location":"reference/gooey/types/text2audio_models/","title":"gooey.types.text2audio_models","text":""},{"location":"reference/gooey/types/text2audio_models/#gooey.types.text2audio_models","title":"text2audio_models","text":""},{"location":"reference/gooey/types/text2audio_page_output/","title":"gooey.types.text2audio_page_output","text":""},{"location":"reference/gooey/types/text2audio_page_output/#gooey.types.text2audio_page_output","title":"text2audio_page_output","text":""},{"location":"reference/gooey/types/text2audio_page_status_response/","title":"gooey.types.text2audio_page_status_response","text":""},{"location":"reference/gooey/types/text2audio_page_status_response/#gooey.types.text2audio_page_status_response","title":"text2audio_page_status_response","text":""},{"location":"reference/gooey/types/text2audio_page_status_response/#gooey.types.text2audio_page_status_response.Text2AudioPageStatusResponse","title":"Text2AudioPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/text2audio_page_status_response/#gooey.types.text2audio_page_status_response.Text2AudioPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/text2audio_page_status_response/#gooey.types.text2audio_page_status_response.Text2AudioPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/text2audio_page_status_response/#gooey.types.text2audio_page_status_response.Text2AudioPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[Text2AudioPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/text2audio_page_status_response/#gooey.types.text2audio_page_status_response.Text2AudioPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/text2audio_page_status_response/#gooey.types.text2audio_page_status_response.Text2AudioPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/text2audio_page_status_response/#gooey.types.text2audio_page_status_response.Text2AudioPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/text2audio_page_status_response/#gooey.types.text2audio_page_status_response.Text2AudioPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/text_to_image_models/","title":"gooey.types.text_to_image_models","text":""},{"location":"reference/gooey/types/text_to_image_models/#gooey.types.text_to_image_models","title":"text_to_image_models","text":""},{"location":"reference/gooey/types/text_to_speech_page_output/","title":"gooey.types.text_to_speech_page_output","text":""},{"location":"reference/gooey/types/text_to_speech_page_output/#gooey.types.text_to_speech_page_output","title":"text_to_speech_page_output","text":""},{"location":"reference/gooey/types/text_to_speech_page_status_response/","title":"gooey.types.text_to_speech_page_status_response","text":""},{"location":"reference/gooey/types/text_to_speech_page_status_response/#gooey.types.text_to_speech_page_status_response","title":"text_to_speech_page_status_response","text":""},{"location":"reference/gooey/types/text_to_speech_page_status_response/#gooey.types.text_to_speech_page_status_response.TextToSpeechPageStatusResponse","title":"TextToSpeechPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/text_to_speech_page_status_response/#gooey.types.text_to_speech_page_status_response.TextToSpeechPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/text_to_speech_page_status_response/#gooey.types.text_to_speech_page_status_response.TextToSpeechPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/text_to_speech_page_status_response/#gooey.types.text_to_speech_page_status_response.TextToSpeechPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[TextToSpeechPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/text_to_speech_page_status_response/#gooey.types.text_to_speech_page_status_response.TextToSpeechPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/text_to_speech_page_status_response/#gooey.types.text_to_speech_page_status_response.TextToSpeechPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/text_to_speech_page_status_response/#gooey.types.text_to_speech_page_status_response.TextToSpeechPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/text_to_speech_page_status_response/#gooey.types.text_to_speech_page_status_response.TextToSpeechPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/text_to_speech_providers/","title":"gooey.types.text_to_speech_providers","text":""},{"location":"reference/gooey/types/text_to_speech_providers/#gooey.types.text_to_speech_providers","title":"text_to_speech_providers","text":""},{"location":"reference/gooey/types/training_data_model/","title":"gooey.types.training_data_model","text":""},{"location":"reference/gooey/types/training_data_model/#gooey.types.training_data_model","title":"training_data_model","text":""},{"location":"reference/gooey/types/translation_models/","title":"gooey.types.translation_models","text":""},{"location":"reference/gooey/types/translation_models/#gooey.types.translation_models","title":"translation_models","text":""},{"location":"reference/gooey/types/translation_page_output/","title":"gooey.types.translation_page_output","text":""},{"location":"reference/gooey/types/translation_page_output/#gooey.types.translation_page_output","title":"translation_page_output","text":""},{"location":"reference/gooey/types/translation_page_request/","title":"gooey.types.translation_page_request","text":""},{"location":"reference/gooey/types/translation_page_request/#gooey.types.translation_page_request","title":"translation_page_request","text":""},{"location":"reference/gooey/types/translation_page_request/#gooey.types.translation_page_request.TranslationPageRequest","title":"TranslationPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/translation_page_request/#gooey.types.translation_page_request.TranslationPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/translation_page_status_response/","title":"gooey.types.translation_page_status_response","text":""},{"location":"reference/gooey/types/translation_page_status_response/#gooey.types.translation_page_status_response","title":"translation_page_status_response","text":""},{"location":"reference/gooey/types/translation_page_status_response/#gooey.types.translation_page_status_response.TranslationPageStatusResponse","title":"TranslationPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/translation_page_status_response/#gooey.types.translation_page_status_response.TranslationPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/translation_page_status_response/#gooey.types.translation_page_status_response.TranslationPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/translation_page_status_response/#gooey.types.translation_page_status_response.TranslationPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[TranslationPageOutput] = Field(\n    default=None\n)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/translation_page_status_response/#gooey.types.translation_page_status_response.TranslationPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/translation_page_status_response/#gooey.types.translation_page_status_response.TranslationPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/translation_page_status_response/#gooey.types.translation_page_status_response.TranslationPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/translation_page_status_response/#gooey.types.translation_page_status_response.TranslationPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"},{"location":"reference/gooey/types/upscaler_models/","title":"gooey.types.upscaler_models","text":""},{"location":"reference/gooey/types/upscaler_models/#gooey.types.upscaler_models","title":"upscaler_models","text":""},{"location":"reference/gooey/types/validation_error/","title":"gooey.types.validation_error","text":""},{"location":"reference/gooey/types/validation_error/#gooey.types.validation_error","title":"validation_error","text":""},{"location":"reference/gooey/types/validation_error_loc_item/","title":"gooey.types.validation_error_loc_item","text":""},{"location":"reference/gooey/types/validation_error_loc_item/#gooey.types.validation_error_loc_item","title":"validation_error_loc_item","text":""},{"location":"reference/gooey/types/vcard/","title":"gooey.types.vcard","text":""},{"location":"reference/gooey/types/vcard/#gooey.types.vcard","title":"vcard","text":""},{"location":"reference/gooey/types/video_bots_page_output/","title":"gooey.types.video_bots_page_output","text":""},{"location":"reference/gooey/types/video_bots_page_output/#gooey.types.video_bots_page_output","title":"video_bots_page_output","text":""},{"location":"reference/gooey/types/video_bots_page_output_final_keyword_query/","title":"gooey.types.video_bots_page_output_final_keyword_query","text":""},{"location":"reference/gooey/types/video_bots_page_output_final_keyword_query/#gooey.types.video_bots_page_output_final_keyword_query","title":"video_bots_page_output_final_keyword_query","text":""},{"location":"reference/gooey/types/video_bots_page_output_final_prompt/","title":"gooey.types.video_bots_page_output_final_prompt","text":""},{"location":"reference/gooey/types/video_bots_page_output_final_prompt/#gooey.types.video_bots_page_output_final_prompt","title":"video_bots_page_output_final_prompt","text":""},{"location":"reference/gooey/types/video_bots_page_request/","title":"gooey.types.video_bots_page_request","text":""},{"location":"reference/gooey/types/video_bots_page_request/#gooey.types.video_bots_page_request","title":"video_bots_page_request","text":""},{"location":"reference/gooey/types/video_bots_page_request/#gooey.types.video_bots_page_request.VideoBotsPageRequest","title":"VideoBotsPageRequest","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/video_bots_page_request/#gooey.types.video_bots_page_request.VideoBotsPageRequest.asr_language","title":"asr_language  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>asr_language: Optional[str] = Field(default=None)\n</code></pre> <p>Choose a language to transcribe incoming audio messages to text.</p>"},{"location":"reference/gooey/types/video_bots_page_request/#gooey.types.video_bots_page_request.VideoBotsPageRequest.asr_model","title":"asr_model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>asr_model: Optional[AsrModels] = Field(default=None)\n</code></pre> <p>Choose a model to transcribe incoming audio messages to text.</p>"},{"location":"reference/gooey/types/video_bots_page_request/#gooey.types.video_bots_page_request.VideoBotsPageRequest.dense_weight","title":"dense_weight  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dense_weight: Optional[float] = Field(default=None)\n</code></pre> <p>Weightage for dense vs sparse embeddings. <code>0</code> for sparse, <code>1</code> for dense, <code>0.5</code> for equal weight. Generally speaking, dense embeddings excel at understanding the context of the query, whereas sparse vectors excel at keyword matches.</p>"},{"location":"reference/gooey/types/video_bots_page_request/#gooey.types.video_bots_page_request.VideoBotsPageRequest.doc_extract_url","title":"doc_extract_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>doc_extract_url: Optional[str] = Field(default=None)\n</code></pre> <p>Select a workflow to extract text from documents and images.</p>"},{"location":"reference/gooey/types/video_bots_page_request/#gooey.types.video_bots_page_request.VideoBotsPageRequest.document_model","title":"document_model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>document_model: Optional[str] = Field(default=None)\n</code></pre> <p>When your copilot users upload a photo or pdf, what kind of document are they mostly likely to upload? (via Azure)</p>"},{"location":"reference/gooey/types/video_bots_page_request/#gooey.types.video_bots_page_request.VideoBotsPageRequest.elevenlabs_voice_name","title":"elevenlabs_voice_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>elevenlabs_voice_name: Optional[str] = Field(default=None)\n</code></pre> <p>Use <code>elevenlabs_voice_id</code> instead</p>"},{"location":"reference/gooey/types/video_bots_page_request/#gooey.types.video_bots_page_request.VideoBotsPageRequest.tools","title":"tools  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tools: Optional[List[LlmTools]] = Field(default=None)\n</code></pre> <p>Give your copilot superpowers by giving it access to tools. Powered by Function calling.</p>"},{"location":"reference/gooey/types/video_bots_page_request/#gooey.types.video_bots_page_request.VideoBotsPageRequest.user_language","title":"user_language  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user_language: Optional[str] = Field(default=None)\n</code></pre> <p>Choose a language to translate incoming text &amp; audio messages to English and responses back to your selected language. Useful for low-resource languages.</p>"},{"location":"reference/gooey/types/video_bots_page_request/#gooey.types.video_bots_page_request.VideoBotsPageRequest.variables","title":"variables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>variables: Optional[Dict[str, Optional[Any]]] = Field(\n    default=None\n)\n</code></pre> <p>Variables to be used as Jinja prompt templates and in functions as arguments</p>"},{"location":"reference/gooey/types/video_bots_page_request_functions_item/","title":"gooey.types.video_bots_page_request_functions_item","text":""},{"location":"reference/gooey/types/video_bots_page_request_functions_item/#gooey.types.video_bots_page_request_functions_item","title":"video_bots_page_request_functions_item","text":""},{"location":"reference/gooey/types/video_bots_page_request_functions_item/#gooey.types.video_bots_page_request_functions_item.VideoBotsPageRequestFunctionsItem","title":"VideoBotsPageRequestFunctionsItem","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/video_bots_page_request_functions_item/#gooey.types.video_bots_page_request_functions_item.VideoBotsPageRequestFunctionsItem.trigger","title":"trigger  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trigger: FunctionTrigger = Field()\n</code></pre> <p>When to run this function. <code>pre</code> runs before the recipe, <code>post</code> runs after the recipe.</p>"},{"location":"reference/gooey/types/video_bots_page_request_sadtalker_settings/","title":"gooey.types.video_bots_page_request_sadtalker_settings","text":""},{"location":"reference/gooey/types/video_bots_page_request_sadtalker_settings/#gooey.types.video_bots_page_request_sadtalker_settings","title":"video_bots_page_request_sadtalker_settings","text":""},{"location":"reference/gooey/types/video_bots_page_request_sadtalker_settings/#gooey.types.video_bots_page_request_sadtalker_settings.VideoBotsPageRequestSadtalkerSettings","title":"VideoBotsPageRequestSadtalkerSettings","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/video_bots_page_request_sadtalker_settings/#gooey.types.video_bots_page_request_sadtalker_settings.VideoBotsPageRequestSadtalkerSettings.expression_scale","title":"expression_scale  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>expression_scale: Optional[float] = Field(default=None)\n</code></pre> <p>Scale the amount of expression motion. 1.0 is normal, 0.5 is very reduced, and 2.0 is quite a lot.</p>"},{"location":"reference/gooey/types/video_bots_page_request_sadtalker_settings/#gooey.types.video_bots_page_request_sadtalker_settings.VideoBotsPageRequestSadtalkerSettings.pose_style","title":"pose_style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pose_style: Optional[int] = Field(default=None)\n</code></pre> <p>Random seed 0-45 inclusive that affects how the pose is animated.</p>"},{"location":"reference/gooey/types/video_bots_page_request_sadtalker_settings/#gooey.types.video_bots_page_request_sadtalker_settings.VideoBotsPageRequestSadtalkerSettings.preprocess","title":"preprocess  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>preprocess: Optional[\n    VideoBotsPageRequestSadtalkerSettingsPreprocess\n] = Field(default=None)\n</code></pre> <p>SadTalker only generates 512x512 output. 'crop' handles this by cropping the input to 512x512. 'resize' scales down the input to fit 512x512 and scales it back up after lipsyncing (does not work well for full person images, better for portraits). 'full' processes the cropped region and pastes it back into the original input. 'extcrop' and 'extfull' are similar to 'crop' and 'full' but with extended cropping.</p>"},{"location":"reference/gooey/types/video_bots_page_request_sadtalker_settings_preprocess/","title":"gooey.types.video_bots_page_request_sadtalker_settings_preprocess","text":""},{"location":"reference/gooey/types/video_bots_page_request_sadtalker_settings_preprocess/#gooey.types.video_bots_page_request_sadtalker_settings_preprocess","title":"video_bots_page_request_sadtalker_settings_preprocess","text":""},{"location":"reference/gooey/types/video_bots_page_status_response/","title":"gooey.types.video_bots_page_status_response","text":""},{"location":"reference/gooey/types/video_bots_page_status_response/#gooey.types.video_bots_page_status_response","title":"video_bots_page_status_response","text":""},{"location":"reference/gooey/types/video_bots_page_status_response/#gooey.types.video_bots_page_status_response.VideoBotsPageStatusResponse","title":"VideoBotsPageStatusResponse","text":"<p>               Bases: <code>UniversalBaseModel</code></p>"},{"location":"reference/gooey/types/video_bots_page_status_response/#gooey.types.video_bots_page_status_response.VideoBotsPageStatusResponse.created_at","title":"created_at  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created_at: str = Field()\n</code></pre> <p>Time when the run was created as ISO format</p>"},{"location":"reference/gooey/types/video_bots_page_status_response/#gooey.types.video_bots_page_status_response.VideoBotsPageStatusResponse.detail","title":"detail  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>detail: str = Field()\n</code></pre> <p>Details about the status of the run as a human readable string</p>"},{"location":"reference/gooey/types/video_bots_page_status_response/#gooey.types.video_bots_page_status_response.VideoBotsPageStatusResponse.output","title":"output  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output: Optional[VideoBotsPageOutput] = Field(default=None)\n</code></pre> <p>Output of the run. Only available if status is <code>\"completed\"</code></p>"},{"location":"reference/gooey/types/video_bots_page_status_response/#gooey.types.video_bots_page_status_response.VideoBotsPageStatusResponse.run_id","title":"run_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_id: str = Field()\n</code></pre> <p>Unique ID for this run</p>"},{"location":"reference/gooey/types/video_bots_page_status_response/#gooey.types.video_bots_page_status_response.VideoBotsPageStatusResponse.run_time_sec","title":"run_time_sec  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>run_time_sec: float = Field()\n</code></pre> <p>Total run time in seconds</p>"},{"location":"reference/gooey/types/video_bots_page_status_response/#gooey.types.video_bots_page_status_response.VideoBotsPageStatusResponse.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: RecipeRunState = Field()\n</code></pre> <p>Status of the run</p>"},{"location":"reference/gooey/types/video_bots_page_status_response/#gooey.types.video_bots_page_status_response.VideoBotsPageStatusResponse.web_url","title":"web_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>web_url: str = Field()\n</code></pre> <p>Web URL for this run</p>"}]}