# This file was auto-generated by Fern from our API Definition.

import os
import typing

import httpx

from .ai_animation_generator.client import AiAnimationGeneratorClient, AsyncAiAnimationGeneratorClient
from .ai_art_qr_code.client import AiArtQrCodeClient, AsyncAiArtQrCodeClient
from .ai_background_changer.client import AiBackgroundChangerClient, AsyncAiBackgroundChangerClient
from .ai_generated_photo_from_email_profile_lookup.client import (
    AiGeneratedPhotoFromEmailProfileLookupClient,
    AsyncAiGeneratedPhotoFromEmailProfileLookupClient,
)
from .ai_image_with_a_face.client import AiImageWithAFaceClient, AsyncAiImageWithAFaceClient
from .bulk_runner.client import AsyncBulkRunnerClient, BulkRunnerClient
from .chyron_plant_bot.client import AsyncChyronPlantBotClient, ChyronPlantBotClient
from .compare_ai_image_generators.client import AsyncCompareAiImageGeneratorsClient, CompareAiImageGeneratorsClient
from .compare_ai_image_upscalers.client import AsyncCompareAiImageUpscalersClient, CompareAiImageUpscalersClient
from .compare_ai_translations.client import AsyncCompareAiTranslationsClient, CompareAiTranslationsClient
from .compare_ai_voice_generators.client import AsyncCompareAiVoiceGeneratorsClient, CompareAiVoiceGeneratorsClient
from .copilot_for_your_enterprise.client import AsyncCopilotForYourEnterpriseClient, CopilotForYourEnterpriseClient
from .copilot_integrations.client import AsyncCopilotIntegrationsClient, CopilotIntegrationsClient
from .core.api_error import ApiError
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .create_a_perfect_seo_optimized_title_paragraph.client import (
    AsyncCreateAPerfectSeoOptimizedTitleParagraphClient,
    CreateAPerfectSeoOptimizedTitleParagraphClient,
)
from .edit_an_image_with_ai_prompt.client import AsyncEditAnImageWithAiPromptClient, EditAnImageWithAiPromptClient
from .embeddings.client import AsyncEmbeddingsClient, EmbeddingsClient
from .environment import GooeyEnvironment
from .evaluator.client import AsyncEvaluatorClient, EvaluatorClient
from .functions.client import AsyncFunctionsClient, FunctionsClient
from .generate_people_also_ask_seo_content.client import (
    AsyncGeneratePeopleAlsoAskSeoContentClient,
    GeneratePeopleAlsoAskSeoContentClient,
)
from .generate_product_photo_backgrounds.client import (
    AsyncGenerateProductPhotoBackgroundsClient,
    GenerateProductPhotoBackgroundsClient,
)
from .large_language_models_gpt3.client import AsyncLargeLanguageModelsGpt3Client, LargeLanguageModelsGpt3Client
from .letter_writer.client import AsyncLetterWriterClient, LetterWriterClient
from .lip_syncing.client import AsyncLipSyncingClient, LipSyncingClient
from .lipsync_video_with_any_text.client import AsyncLipsyncVideoWithAnyTextClient, LipsyncVideoWithAnyTextClient
from .misc.client import AsyncMiscClient, MiscClient
from .people_also_ask_answers_from_a_doc.client import (
    AsyncPeopleAlsoAskAnswersFromADocClient,
    PeopleAlsoAskAnswersFromADocClient,
)
from .profile_lookup_gpt3for_ai_personalized_emails.client import (
    AsyncProfileLookupGpt3ForAiPersonalizedEmailsClient,
    ProfileLookupGpt3ForAiPersonalizedEmailsClient,
)
from .render_image_search_results_with_ai.client import (
    AsyncRenderImageSearchResultsWithAiClient,
    RenderImageSearchResultsWithAiClient,
)
from .search_your_docs_with_gpt.client import AsyncSearchYourDocsWithGptClient, SearchYourDocsWithGptClient
from .smart_gpt.client import AsyncSmartGptClient, SmartGptClient
from .speech_recognition_translation.client import (
    AsyncSpeechRecognitionTranslationClient,
    SpeechRecognitionTranslationClient,
)
from .summarize_your_docs_with_gpt.client import AsyncSummarizeYourDocsWithGptClient, SummarizeYourDocsWithGptClient
from .synthetic_data_maker_for_videos_pd_fs.client import (
    AsyncSyntheticDataMakerForVideosPdFsClient,
    SyntheticDataMakerForVideosPdFsClient,
)
from .text_guided_audio_generator.client import AsyncTextGuidedAudioGeneratorClient, TextGuidedAudioGeneratorClient
from .web_search_gpt3.client import AsyncWebSearchGpt3Client, WebSearchGpt3Client


class Gooey:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : GooeyEnvironment
        The environment to use for requests from the client. from .environment import GooeyEnvironment



        Defaults to GooeyEnvironment.DEFAULT



    authorization : typing.Optional[str]
    api_key : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from gooey import Gooey

    client = Gooey(
        authorization="YOUR_AUTHORIZATION",
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: GooeyEnvironment = GooeyEnvironment.DEFAULT,
        authorization: typing.Optional[str] = None,
        api_key: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv("GOOEY_API_KEY"),
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        if api_key is None:
            raise ApiError(body="The client must be instantiated be either passing in api_key or setting GOOEY_API_KEY")
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            authorization=authorization,
            api_key=api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.copilot_integrations = CopilotIntegrationsClient(client_wrapper=self._client_wrapper)
        self.copilot_for_your_enterprise = CopilotForYourEnterpriseClient(client_wrapper=self._client_wrapper)
        self.ai_animation_generator = AiAnimationGeneratorClient(client_wrapper=self._client_wrapper)
        self.ai_art_qr_code = AiArtQrCodeClient(client_wrapper=self._client_wrapper)
        self.generate_people_also_ask_seo_content = GeneratePeopleAlsoAskSeoContentClient(
            client_wrapper=self._client_wrapper
        )
        self.create_a_perfect_seo_optimized_title_paragraph = CreateAPerfectSeoOptimizedTitleParagraphClient(
            client_wrapper=self._client_wrapper
        )
        self.web_search_gpt3 = WebSearchGpt3Client(client_wrapper=self._client_wrapper)
        self.profile_lookup_gpt3for_ai_personalized_emails = ProfileLookupGpt3ForAiPersonalizedEmailsClient(
            client_wrapper=self._client_wrapper
        )
        self.bulk_runner = BulkRunnerClient(client_wrapper=self._client_wrapper)
        self.evaluator = EvaluatorClient(client_wrapper=self._client_wrapper)
        self.synthetic_data_maker_for_videos_pd_fs = SyntheticDataMakerForVideosPdFsClient(
            client_wrapper=self._client_wrapper
        )
        self.large_language_models_gpt3 = LargeLanguageModelsGpt3Client(client_wrapper=self._client_wrapper)
        self.search_your_docs_with_gpt = SearchYourDocsWithGptClient(client_wrapper=self._client_wrapper)
        self.smart_gpt = SmartGptClient(client_wrapper=self._client_wrapper)
        self.summarize_your_docs_with_gpt = SummarizeYourDocsWithGptClient(client_wrapper=self._client_wrapper)
        self.functions = FunctionsClient(client_wrapper=self._client_wrapper)
        self.lip_syncing = LipSyncingClient(client_wrapper=self._client_wrapper)
        self.lipsync_video_with_any_text = LipsyncVideoWithAnyTextClient(client_wrapper=self._client_wrapper)
        self.compare_ai_voice_generators = CompareAiVoiceGeneratorsClient(client_wrapper=self._client_wrapper)
        self.speech_recognition_translation = SpeechRecognitionTranslationClient(client_wrapper=self._client_wrapper)
        self.text_guided_audio_generator = TextGuidedAudioGeneratorClient(client_wrapper=self._client_wrapper)
        self.compare_ai_translations = CompareAiTranslationsClient(client_wrapper=self._client_wrapper)
        self.edit_an_image_with_ai_prompt = EditAnImageWithAiPromptClient(client_wrapper=self._client_wrapper)
        self.compare_ai_image_generators = CompareAiImageGeneratorsClient(client_wrapper=self._client_wrapper)
        self.generate_product_photo_backgrounds = GenerateProductPhotoBackgroundsClient(
            client_wrapper=self._client_wrapper
        )
        self.ai_image_with_a_face = AiImageWithAFaceClient(client_wrapper=self._client_wrapper)
        self.ai_generated_photo_from_email_profile_lookup = AiGeneratedPhotoFromEmailProfileLookupClient(
            client_wrapper=self._client_wrapper
        )
        self.render_image_search_results_with_ai = RenderImageSearchResultsWithAiClient(
            client_wrapper=self._client_wrapper
        )
        self.ai_background_changer = AiBackgroundChangerClient(client_wrapper=self._client_wrapper)
        self.compare_ai_image_upscalers = CompareAiImageUpscalersClient(client_wrapper=self._client_wrapper)
        self.chyron_plant_bot = ChyronPlantBotClient(client_wrapper=self._client_wrapper)
        self.letter_writer = LetterWriterClient(client_wrapper=self._client_wrapper)
        self.embeddings = EmbeddingsClient(client_wrapper=self._client_wrapper)
        self.people_also_ask_answers_from_a_doc = PeopleAlsoAskAnswersFromADocClient(
            client_wrapper=self._client_wrapper
        )
        self.misc = MiscClient(client_wrapper=self._client_wrapper)


class AsyncGooey:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : GooeyEnvironment
        The environment to use for requests from the client. from .environment import GooeyEnvironment



        Defaults to GooeyEnvironment.DEFAULT



    authorization : typing.Optional[str]
    api_key : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from gooey import AsyncGooey

    client = AsyncGooey(
        authorization="YOUR_AUTHORIZATION",
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: GooeyEnvironment = GooeyEnvironment.DEFAULT,
        authorization: typing.Optional[str] = None,
        api_key: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv("GOOEY_API_KEY"),
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        if api_key is None:
            raise ApiError(body="The client must be instantiated be either passing in api_key or setting GOOEY_API_KEY")
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            authorization=authorization,
            api_key=api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.copilot_integrations = AsyncCopilotIntegrationsClient(client_wrapper=self._client_wrapper)
        self.copilot_for_your_enterprise = AsyncCopilotForYourEnterpriseClient(client_wrapper=self._client_wrapper)
        self.ai_animation_generator = AsyncAiAnimationGeneratorClient(client_wrapper=self._client_wrapper)
        self.ai_art_qr_code = AsyncAiArtQrCodeClient(client_wrapper=self._client_wrapper)
        self.generate_people_also_ask_seo_content = AsyncGeneratePeopleAlsoAskSeoContentClient(
            client_wrapper=self._client_wrapper
        )
        self.create_a_perfect_seo_optimized_title_paragraph = AsyncCreateAPerfectSeoOptimizedTitleParagraphClient(
            client_wrapper=self._client_wrapper
        )
        self.web_search_gpt3 = AsyncWebSearchGpt3Client(client_wrapper=self._client_wrapper)
        self.profile_lookup_gpt3for_ai_personalized_emails = AsyncProfileLookupGpt3ForAiPersonalizedEmailsClient(
            client_wrapper=self._client_wrapper
        )
        self.bulk_runner = AsyncBulkRunnerClient(client_wrapper=self._client_wrapper)
        self.evaluator = AsyncEvaluatorClient(client_wrapper=self._client_wrapper)
        self.synthetic_data_maker_for_videos_pd_fs = AsyncSyntheticDataMakerForVideosPdFsClient(
            client_wrapper=self._client_wrapper
        )
        self.large_language_models_gpt3 = AsyncLargeLanguageModelsGpt3Client(client_wrapper=self._client_wrapper)
        self.search_your_docs_with_gpt = AsyncSearchYourDocsWithGptClient(client_wrapper=self._client_wrapper)
        self.smart_gpt = AsyncSmartGptClient(client_wrapper=self._client_wrapper)
        self.summarize_your_docs_with_gpt = AsyncSummarizeYourDocsWithGptClient(client_wrapper=self._client_wrapper)
        self.functions = AsyncFunctionsClient(client_wrapper=self._client_wrapper)
        self.lip_syncing = AsyncLipSyncingClient(client_wrapper=self._client_wrapper)
        self.lipsync_video_with_any_text = AsyncLipsyncVideoWithAnyTextClient(client_wrapper=self._client_wrapper)
        self.compare_ai_voice_generators = AsyncCompareAiVoiceGeneratorsClient(client_wrapper=self._client_wrapper)
        self.speech_recognition_translation = AsyncSpeechRecognitionTranslationClient(
            client_wrapper=self._client_wrapper
        )
        self.text_guided_audio_generator = AsyncTextGuidedAudioGeneratorClient(client_wrapper=self._client_wrapper)
        self.compare_ai_translations = AsyncCompareAiTranslationsClient(client_wrapper=self._client_wrapper)
        self.edit_an_image_with_ai_prompt = AsyncEditAnImageWithAiPromptClient(client_wrapper=self._client_wrapper)
        self.compare_ai_image_generators = AsyncCompareAiImageGeneratorsClient(client_wrapper=self._client_wrapper)
        self.generate_product_photo_backgrounds = AsyncGenerateProductPhotoBackgroundsClient(
            client_wrapper=self._client_wrapper
        )
        self.ai_image_with_a_face = AsyncAiImageWithAFaceClient(client_wrapper=self._client_wrapper)
        self.ai_generated_photo_from_email_profile_lookup = AsyncAiGeneratedPhotoFromEmailProfileLookupClient(
            client_wrapper=self._client_wrapper
        )
        self.render_image_search_results_with_ai = AsyncRenderImageSearchResultsWithAiClient(
            client_wrapper=self._client_wrapper
        )
        self.ai_background_changer = AsyncAiBackgroundChangerClient(client_wrapper=self._client_wrapper)
        self.compare_ai_image_upscalers = AsyncCompareAiImageUpscalersClient(client_wrapper=self._client_wrapper)
        self.chyron_plant_bot = AsyncChyronPlantBotClient(client_wrapper=self._client_wrapper)
        self.letter_writer = AsyncLetterWriterClient(client_wrapper=self._client_wrapper)
        self.embeddings = AsyncEmbeddingsClient(client_wrapper=self._client_wrapper)
        self.people_also_ask_answers_from_a_doc = AsyncPeopleAlsoAskAnswersFromADocClient(
            client_wrapper=self._client_wrapper
        )
        self.misc = AsyncMiscClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: GooeyEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
