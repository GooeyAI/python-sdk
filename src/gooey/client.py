# This file was auto-generated by Fern from our API Definition.

import typing
from .environment import GooeyEnvironment
import os
import httpx
from .core.api_error import ApiError
from .core.client_wrapper import SyncClientWrapper
from .copilot_integrations.client import CopilotIntegrationsClient
from .misc.client import MiscClient
from .core.request_options import RequestOptions
from .types.video_bots_page_status_response import VideoBotsPageStatusResponse
from .core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from .types.deforum_sd_page_status_response import DeforumSdPageStatusResponse
from .types.qr_code_generator_page_status_response import QrCodeGeneratorPageStatusResponse
from .types.related_qn_a_page_status_response import RelatedQnAPageStatusResponse
from .types.seo_summary_page_status_response import SeoSummaryPageStatusResponse
from .types.google_gpt_page_status_response import GoogleGptPageStatusResponse
from .types.social_lookup_email_page_status_response import SocialLookupEmailPageStatusResponse
from .types.bulk_runner_page_status_response import BulkRunnerPageStatusResponse
from .types.bulk_eval_page_status_response import BulkEvalPageStatusResponse
from .types.doc_extract_page_status_response import DocExtractPageStatusResponse
from .types.compare_llm_page_status_response import CompareLlmPageStatusResponse
from .types.doc_search_page_status_response import DocSearchPageStatusResponse
from .types.smart_gpt_page_status_response import SmartGptPageStatusResponse
from .types.doc_summary_page_status_response import DocSummaryPageStatusResponse
from .types.functions_page_status_response import FunctionsPageStatusResponse
from .types.lipsync_page_status_response import LipsyncPageStatusResponse
from .types.lipsync_tts_page_status_response import LipsyncTtsPageStatusResponse
from .types.text_to_speech_page_status_response import TextToSpeechPageStatusResponse
from .types.asr_page_status_response import AsrPageStatusResponse
from .types.text2audio_page_status_response import Text2AudioPageStatusResponse
from .types.translation_page_status_response import TranslationPageStatusResponse
from .types.img2img_page_status_response import Img2ImgPageStatusResponse
from .types.compare_text2img_page_status_response import CompareText2ImgPageStatusResponse
from .types.object_inpainting_page_status_response import ObjectInpaintingPageStatusResponse
from .types.face_inpainting_page_status_response import FaceInpaintingPageStatusResponse
from .types.email_face_inpainting_page_status_response import EmailFaceInpaintingPageStatusResponse
from .types.google_image_gen_page_status_response import GoogleImageGenPageStatusResponse
from .types.image_segmentation_page_status_response import ImageSegmentationPageStatusResponse
from .types.compare_upscaler_page_status_response import CompareUpscalerPageStatusResponse
from .types.chyron_plant_page_status_response import ChyronPlantPageStatusResponse
from .types.letter_writer_page_status_response import LetterWriterPageStatusResponse
from .types.embeddings_page_status_response import EmbeddingsPageStatusResponse
from .types.related_qn_a_doc_page_status_response import RelatedQnADocPageStatusResponse
from .core.client_wrapper import AsyncClientWrapper
from .copilot_integrations.client import AsyncCopilotIntegrationsClient
from .misc.client import AsyncMiscClient


class Gooey:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : GooeyEnvironment
        The environment to use for requests from the client. from .environment import GooeyEnvironment



        Defaults to GooeyEnvironment.DEFAULT



    api_key : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from gooey import Gooey

    client = Gooey(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: GooeyEnvironment = GooeyEnvironment.DEFAULT,
        api_key: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv("GOOEY_API_KEY"),
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        if api_key is None:
            raise ApiError(body="The client must be instantiated be either passing in api_key or setting GOOEY_API_KEY")
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.copilot_integrations = CopilotIntegrationsClient(client_wrapper=self._client_wrapper)
        self.misc = MiscClient(client_wrapper=self._client_wrapper)

    def post_v3video_bots_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> VideoBotsPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        VideoBotsPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3video_bots_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/video-bots/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    VideoBotsPageStatusResponse,
                    parse_obj_as(
                        type_=VideoBotsPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3deforum_sd_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeforumSdPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeforumSdPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3deforum_sd_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/DeforumSD/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeforumSdPageStatusResponse,
                    parse_obj_as(
                        type_=DeforumSdPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3art_qr_code_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> QrCodeGeneratorPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        QrCodeGeneratorPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3art_qr_code_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/art-qr-code/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    QrCodeGeneratorPageStatusResponse,
                    parse_obj_as(
                        type_=QrCodeGeneratorPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3related_qna_maker_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> RelatedQnAPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RelatedQnAPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3related_qna_maker_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/related-qna-maker/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    RelatedQnAPageStatusResponse,
                    parse_obj_as(
                        type_=RelatedQnAPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3seo_summary_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SeoSummaryPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SeoSummaryPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3seo_summary_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/SEOSummary/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SeoSummaryPageStatusResponse,
                    parse_obj_as(
                        type_=SeoSummaryPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3google_gpt_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GoogleGptPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GoogleGptPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3google_gpt_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/google-gpt/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GoogleGptPageStatusResponse,
                    parse_obj_as(
                        type_=GoogleGptPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3social_lookup_email_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SocialLookupEmailPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SocialLookupEmailPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3social_lookup_email_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/SocialLookupEmail/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SocialLookupEmailPageStatusResponse,
                    parse_obj_as(
                        type_=SocialLookupEmailPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3bulk_runner_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> BulkRunnerPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkRunnerPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3bulk_runner_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/bulk-runner/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    BulkRunnerPageStatusResponse,
                    parse_obj_as(
                        type_=BulkRunnerPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3bulk_eval_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> BulkEvalPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkEvalPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3bulk_eval_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/bulk-eval/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    BulkEvalPageStatusResponse,
                    parse_obj_as(
                        type_=BulkEvalPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3doc_extract_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DocExtractPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DocExtractPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3doc_extract_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/doc-extract/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DocExtractPageStatusResponse,
                    parse_obj_as(
                        type_=DocExtractPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3compare_llm_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CompareLlmPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompareLlmPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3compare_llm_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/CompareLLM/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CompareLlmPageStatusResponse,
                    parse_obj_as(
                        type_=CompareLlmPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3doc_search_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DocSearchPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DocSearchPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3doc_search_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/doc-search/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DocSearchPageStatusResponse,
                    parse_obj_as(
                        type_=DocSearchPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3smart_gpt_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SmartGptPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SmartGptPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3smart_gpt_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/SmartGPT/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SmartGptPageStatusResponse,
                    parse_obj_as(
                        type_=SmartGptPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3doc_summary_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DocSummaryPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DocSummaryPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3doc_summary_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/doc-summary/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DocSummaryPageStatusResponse,
                    parse_obj_as(
                        type_=DocSummaryPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3functions_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FunctionsPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FunctionsPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3functions_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/functions/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    FunctionsPageStatusResponse,
                    parse_obj_as(
                        type_=FunctionsPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3lipsync_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> LipsyncPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LipsyncPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3lipsync_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/Lipsync/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    LipsyncPageStatusResponse,
                    parse_obj_as(
                        type_=LipsyncPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3lipsync_tts_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> LipsyncTtsPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LipsyncTtsPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3lipsync_tts_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/LipsyncTTS/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    LipsyncTtsPageStatusResponse,
                    parse_obj_as(
                        type_=LipsyncTtsPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3text_to_speech_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TextToSpeechPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TextToSpeechPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3text_to_speech_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/TextToSpeech/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TextToSpeechPageStatusResponse,
                    parse_obj_as(
                        type_=TextToSpeechPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3asr_async(self, *, request_options: typing.Optional[RequestOptions] = None) -> AsrPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsrPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3asr_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/asr/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AsrPageStatusResponse,
                    parse_obj_as(
                        type_=AsrPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3text2audio_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Text2AudioPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Text2AudioPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3text2audio_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/text2audio/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Text2AudioPageStatusResponse,
                    parse_obj_as(
                        type_=Text2AudioPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3translate_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TranslationPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TranslationPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3translate_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/translate/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TranslationPageStatusResponse,
                    parse_obj_as(
                        type_=TranslationPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3img2img_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Img2ImgPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Img2ImgPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3img2img_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/Img2Img/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Img2ImgPageStatusResponse,
                    parse_obj_as(
                        type_=Img2ImgPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3compare_text2img_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CompareText2ImgPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompareText2ImgPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3compare_text2img_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/CompareText2Img/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CompareText2ImgPageStatusResponse,
                    parse_obj_as(
                        type_=CompareText2ImgPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3object_inpainting_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ObjectInpaintingPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ObjectInpaintingPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3object_inpainting_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/ObjectInpainting/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ObjectInpaintingPageStatusResponse,
                    parse_obj_as(
                        type_=ObjectInpaintingPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3face_inpainting_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FaceInpaintingPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FaceInpaintingPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3face_inpainting_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/FaceInpainting/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    FaceInpaintingPageStatusResponse,
                    parse_obj_as(
                        type_=FaceInpaintingPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3email_face_inpainting_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> EmailFaceInpaintingPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmailFaceInpaintingPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3email_face_inpainting_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/EmailFaceInpainting/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EmailFaceInpaintingPageStatusResponse,
                    parse_obj_as(
                        type_=EmailFaceInpaintingPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3google_image_gen_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GoogleImageGenPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GoogleImageGenPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3google_image_gen_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/GoogleImageGen/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GoogleImageGenPageStatusResponse,
                    parse_obj_as(
                        type_=GoogleImageGenPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3image_segmentation_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ImageSegmentationPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ImageSegmentationPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3image_segmentation_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/ImageSegmentation/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ImageSegmentationPageStatusResponse,
                    parse_obj_as(
                        type_=ImageSegmentationPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3compare_ai_upscalers_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CompareUpscalerPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompareUpscalerPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3compare_ai_upscalers_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/compare-ai-upscalers/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CompareUpscalerPageStatusResponse,
                    parse_obj_as(
                        type_=CompareUpscalerPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3chyron_plant_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ChyronPlantPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ChyronPlantPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3chyron_plant_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/ChyronPlant/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ChyronPlantPageStatusResponse,
                    parse_obj_as(
                        type_=ChyronPlantPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3letter_writer_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> LetterWriterPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LetterWriterPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3letter_writer_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/LetterWriter/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    LetterWriterPageStatusResponse,
                    parse_obj_as(
                        type_=LetterWriterPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3embeddings_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> EmbeddingsPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingsPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3embeddings_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/embeddings/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EmbeddingsPageStatusResponse,
                    parse_obj_as(
                        type_=EmbeddingsPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_v3related_qna_maker_doc_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> RelatedQnADocPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RelatedQnADocPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.post_v3related_qna_maker_doc_async()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/related-qna-maker-doc/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    RelatedQnADocPageStatusResponse,
                    parse_obj_as(
                        type_=RelatedQnADocPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def health_status_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.health_status_get()
        """
        _response = self._client_wrapper.httpx_client.request(
            "status",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncGooey:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : GooeyEnvironment
        The environment to use for requests from the client. from .environment import GooeyEnvironment



        Defaults to GooeyEnvironment.DEFAULT



    api_key : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from gooey import AsyncGooey

    client = AsyncGooey(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: GooeyEnvironment = GooeyEnvironment.DEFAULT,
        api_key: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv("GOOEY_API_KEY"),
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        if api_key is None:
            raise ApiError(body="The client must be instantiated be either passing in api_key or setting GOOEY_API_KEY")
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.copilot_integrations = AsyncCopilotIntegrationsClient(client_wrapper=self._client_wrapper)
        self.misc = AsyncMiscClient(client_wrapper=self._client_wrapper)

    async def post_v3video_bots_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> VideoBotsPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        VideoBotsPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3video_bots_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/video-bots/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    VideoBotsPageStatusResponse,
                    parse_obj_as(
                        type_=VideoBotsPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3deforum_sd_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeforumSdPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeforumSdPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3deforum_sd_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/DeforumSD/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeforumSdPageStatusResponse,
                    parse_obj_as(
                        type_=DeforumSdPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3art_qr_code_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> QrCodeGeneratorPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        QrCodeGeneratorPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3art_qr_code_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/art-qr-code/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    QrCodeGeneratorPageStatusResponse,
                    parse_obj_as(
                        type_=QrCodeGeneratorPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3related_qna_maker_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> RelatedQnAPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RelatedQnAPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3related_qna_maker_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/related-qna-maker/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    RelatedQnAPageStatusResponse,
                    parse_obj_as(
                        type_=RelatedQnAPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3seo_summary_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SeoSummaryPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SeoSummaryPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3seo_summary_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/SEOSummary/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SeoSummaryPageStatusResponse,
                    parse_obj_as(
                        type_=SeoSummaryPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3google_gpt_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GoogleGptPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GoogleGptPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3google_gpt_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/google-gpt/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GoogleGptPageStatusResponse,
                    parse_obj_as(
                        type_=GoogleGptPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3social_lookup_email_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SocialLookupEmailPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SocialLookupEmailPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3social_lookup_email_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/SocialLookupEmail/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SocialLookupEmailPageStatusResponse,
                    parse_obj_as(
                        type_=SocialLookupEmailPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3bulk_runner_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> BulkRunnerPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkRunnerPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3bulk_runner_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/bulk-runner/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    BulkRunnerPageStatusResponse,
                    parse_obj_as(
                        type_=BulkRunnerPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3bulk_eval_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> BulkEvalPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkEvalPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3bulk_eval_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/bulk-eval/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    BulkEvalPageStatusResponse,
                    parse_obj_as(
                        type_=BulkEvalPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3doc_extract_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DocExtractPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DocExtractPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3doc_extract_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/doc-extract/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DocExtractPageStatusResponse,
                    parse_obj_as(
                        type_=DocExtractPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3compare_llm_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CompareLlmPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompareLlmPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3compare_llm_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/CompareLLM/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CompareLlmPageStatusResponse,
                    parse_obj_as(
                        type_=CompareLlmPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3doc_search_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DocSearchPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DocSearchPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3doc_search_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/doc-search/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DocSearchPageStatusResponse,
                    parse_obj_as(
                        type_=DocSearchPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3smart_gpt_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SmartGptPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SmartGptPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3smart_gpt_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/SmartGPT/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SmartGptPageStatusResponse,
                    parse_obj_as(
                        type_=SmartGptPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3doc_summary_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DocSummaryPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DocSummaryPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3doc_summary_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/doc-summary/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DocSummaryPageStatusResponse,
                    parse_obj_as(
                        type_=DocSummaryPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3functions_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FunctionsPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FunctionsPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3functions_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/functions/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    FunctionsPageStatusResponse,
                    parse_obj_as(
                        type_=FunctionsPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3lipsync_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> LipsyncPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LipsyncPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3lipsync_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/Lipsync/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    LipsyncPageStatusResponse,
                    parse_obj_as(
                        type_=LipsyncPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3lipsync_tts_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> LipsyncTtsPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LipsyncTtsPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3lipsync_tts_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/LipsyncTTS/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    LipsyncTtsPageStatusResponse,
                    parse_obj_as(
                        type_=LipsyncTtsPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3text_to_speech_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TextToSpeechPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TextToSpeechPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3text_to_speech_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/TextToSpeech/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TextToSpeechPageStatusResponse,
                    parse_obj_as(
                        type_=TextToSpeechPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3asr_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsrPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsrPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3asr_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/asr/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AsrPageStatusResponse,
                    parse_obj_as(
                        type_=AsrPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3text2audio_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Text2AudioPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Text2AudioPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3text2audio_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/text2audio/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Text2AudioPageStatusResponse,
                    parse_obj_as(
                        type_=Text2AudioPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3translate_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TranslationPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TranslationPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3translate_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/translate/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TranslationPageStatusResponse,
                    parse_obj_as(
                        type_=TranslationPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3img2img_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Img2ImgPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Img2ImgPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3img2img_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/Img2Img/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Img2ImgPageStatusResponse,
                    parse_obj_as(
                        type_=Img2ImgPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3compare_text2img_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CompareText2ImgPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompareText2ImgPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3compare_text2img_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/CompareText2Img/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CompareText2ImgPageStatusResponse,
                    parse_obj_as(
                        type_=CompareText2ImgPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3object_inpainting_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ObjectInpaintingPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ObjectInpaintingPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3object_inpainting_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/ObjectInpainting/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ObjectInpaintingPageStatusResponse,
                    parse_obj_as(
                        type_=ObjectInpaintingPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3face_inpainting_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FaceInpaintingPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FaceInpaintingPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3face_inpainting_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/FaceInpainting/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    FaceInpaintingPageStatusResponse,
                    parse_obj_as(
                        type_=FaceInpaintingPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3email_face_inpainting_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> EmailFaceInpaintingPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmailFaceInpaintingPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3email_face_inpainting_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/EmailFaceInpainting/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EmailFaceInpaintingPageStatusResponse,
                    parse_obj_as(
                        type_=EmailFaceInpaintingPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3google_image_gen_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GoogleImageGenPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GoogleImageGenPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3google_image_gen_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/GoogleImageGen/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GoogleImageGenPageStatusResponse,
                    parse_obj_as(
                        type_=GoogleImageGenPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3image_segmentation_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ImageSegmentationPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ImageSegmentationPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3image_segmentation_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/ImageSegmentation/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ImageSegmentationPageStatusResponse,
                    parse_obj_as(
                        type_=ImageSegmentationPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3compare_ai_upscalers_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CompareUpscalerPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompareUpscalerPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3compare_ai_upscalers_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/compare-ai-upscalers/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CompareUpscalerPageStatusResponse,
                    parse_obj_as(
                        type_=CompareUpscalerPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3chyron_plant_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ChyronPlantPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ChyronPlantPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3chyron_plant_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/ChyronPlant/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ChyronPlantPageStatusResponse,
                    parse_obj_as(
                        type_=ChyronPlantPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3letter_writer_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> LetterWriterPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LetterWriterPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3letter_writer_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/LetterWriter/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    LetterWriterPageStatusResponse,
                    parse_obj_as(
                        type_=LetterWriterPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3embeddings_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> EmbeddingsPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingsPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3embeddings_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/embeddings/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EmbeddingsPageStatusResponse,
                    parse_obj_as(
                        type_=EmbeddingsPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_v3related_qna_maker_doc_async(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> RelatedQnADocPageStatusResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RelatedQnADocPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_v3related_qna_maker_doc_async()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/related-qna-maker-doc/async",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    RelatedQnADocPageStatusResponse,
                    parse_obj_as(
                        type_=RelatedQnADocPageStatusResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def health_status_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.health_status_get()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "status",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: GooeyEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
