# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.pydantic_utilities import pydantic_v1
from ..core.request_options import RequestOptions
from ..errors.internal_server_error import InternalServerError
from ..errors.payment_required_error import PaymentRequiredError
from ..errors.too_many_requests_error import TooManyRequestsError
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.async_api_response_model_v3 import AsyncApiResponseModelV3
from ..types.failed_reponse_model_v2 import FailedReponseModelV2
from ..types.generic_error_response import GenericErrorResponse
from ..types.http_validation_error import HttpValidationError
from ..types.run_settings import RunSettings
from ..types.seo_summary_page_request_selected_model import SeoSummaryPageRequestSelectedModel
from ..types.seo_summary_page_response import SeoSummaryPageResponse
from ..types.seo_summary_page_status_response import SeoSummaryPageStatusResponse
from ..types.serp_search_location import SerpSearchLocation
from ..types.serp_search_type import SerpSearchType

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CreateAPerfectSeoOptimizedTitleParagraphClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def seo_summary(
        self,
        *,
        search_query: str,
        keywords: str,
        title: str,
        company_url: str,
        serp_search_location: typing.Optional[SerpSearchLocation] = OMIT,
        scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,
        serp_search_type: typing.Optional[SerpSearchType] = OMIT,
        scaleserp_search_field: typing.Optional[str] = OMIT,
        task_instructions: typing.Optional[str] = OMIT,
        enable_html: typing.Optional[bool] = OMIT,
        selected_model: typing.Optional[SeoSummaryPageRequestSelectedModel] = OMIT,
        sampling_temperature: typing.Optional[float] = OMIT,
        max_tokens: typing.Optional[int] = OMIT,
        num_outputs: typing.Optional[int] = OMIT,
        quality: typing.Optional[float] = OMIT,
        avoid_repetition: typing.Optional[bool] = OMIT,
        max_search_urls: typing.Optional[int] = OMIT,
        enable_crosslinks: typing.Optional[bool] = OMIT,
        seed: typing.Optional[int] = OMIT,
        settings: typing.Optional[RunSettings] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> SeoSummaryPageResponse:
        """
        Parameters
        ----------
        search_query : str

        keywords : str

        title : str

        company_url : str

        serp_search_location : typing.Optional[SerpSearchLocation]

        scaleserp_locations : typing.Optional[typing.Sequence[str]]
            DEPRECATED: use `serp_search_location` instead

        serp_search_type : typing.Optional[SerpSearchType]

        scaleserp_search_field : typing.Optional[str]
            DEPRECATED: use `serp_search_type` instead

        task_instructions : typing.Optional[str]

        enable_html : typing.Optional[bool]

        selected_model : typing.Optional[SeoSummaryPageRequestSelectedModel]

        sampling_temperature : typing.Optional[float]

        max_tokens : typing.Optional[int]

        num_outputs : typing.Optional[int]

        quality : typing.Optional[float]

        avoid_repetition : typing.Optional[bool]

        max_search_urls : typing.Optional[int]

        enable_crosslinks : typing.Optional[bool]

        seed : typing.Optional[int]

        settings : typing.Optional[RunSettings]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SeoSummaryPageResponse
            Successful Response

        Examples
        --------
        from gooey.client import Gooey

        client = Gooey(
            authorization="YOUR_AUTHORIZATION",
            base_url="https://yourhost.com/path/to/api",
        )
        client.create_a_perfect_seo_optimized_title_paragraph.seo_summary(
            search_query="search_query",
            keywords="keywords",
            title="title",
            company_url="company_url",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/SEOSummary/",
            method="POST",
            json={
                "serp_search_location": serp_search_location,
                "scaleserp_locations": scaleserp_locations,
                "serp_search_type": serp_search_type,
                "scaleserp_search_field": scaleserp_search_field,
                "search_query": search_query,
                "keywords": keywords,
                "title": title,
                "company_url": company_url,
                "task_instructions": task_instructions,
                "enable_html": enable_html,
                "selected_model": selected_model,
                "sampling_temperature": sampling_temperature,
                "max_tokens": max_tokens,
                "num_outputs": num_outputs,
                "quality": quality,
                "avoid_repetition": avoid_repetition,
                "max_search_urls": max_search_urls,
                "enable_crosslinks": enable_crosslinks,
                "seed": seed,
                "settings": settings,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(SeoSummaryPageResponse, _response.json())  # type: ignore
            if _response.status_code == 402:
                raise PaymentRequiredError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    pydantic_v1.parse_obj_as(GenericErrorResponse, _response.json())  # type: ignore
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    pydantic_v1.parse_obj_as(FailedReponseModelV2, _response.json())  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def async_seo_summary(
        self,
        *,
        search_query: str,
        keywords: str,
        title: str,
        company_url: str,
        serp_search_location: typing.Optional[SerpSearchLocation] = OMIT,
        scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,
        serp_search_type: typing.Optional[SerpSearchType] = OMIT,
        scaleserp_search_field: typing.Optional[str] = OMIT,
        task_instructions: typing.Optional[str] = OMIT,
        enable_html: typing.Optional[bool] = OMIT,
        selected_model: typing.Optional[SeoSummaryPageRequestSelectedModel] = OMIT,
        sampling_temperature: typing.Optional[float] = OMIT,
        max_tokens: typing.Optional[int] = OMIT,
        num_outputs: typing.Optional[int] = OMIT,
        quality: typing.Optional[float] = OMIT,
        avoid_repetition: typing.Optional[bool] = OMIT,
        max_search_urls: typing.Optional[int] = OMIT,
        enable_crosslinks: typing.Optional[bool] = OMIT,
        seed: typing.Optional[int] = OMIT,
        settings: typing.Optional[RunSettings] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncApiResponseModelV3:
        """
        Parameters
        ----------
        search_query : str

        keywords : str

        title : str

        company_url : str

        serp_search_location : typing.Optional[SerpSearchLocation]

        scaleserp_locations : typing.Optional[typing.Sequence[str]]
            DEPRECATED: use `serp_search_location` instead

        serp_search_type : typing.Optional[SerpSearchType]

        scaleserp_search_field : typing.Optional[str]
            DEPRECATED: use `serp_search_type` instead

        task_instructions : typing.Optional[str]

        enable_html : typing.Optional[bool]

        selected_model : typing.Optional[SeoSummaryPageRequestSelectedModel]

        sampling_temperature : typing.Optional[float]

        max_tokens : typing.Optional[int]

        num_outputs : typing.Optional[int]

        quality : typing.Optional[float]

        avoid_repetition : typing.Optional[bool]

        max_search_urls : typing.Optional[int]

        enable_crosslinks : typing.Optional[bool]

        seed : typing.Optional[int]

        settings : typing.Optional[RunSettings]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncApiResponseModelV3
            Successful Response

        Examples
        --------
        from gooey.client import Gooey

        client = Gooey(
            authorization="YOUR_AUTHORIZATION",
            base_url="https://yourhost.com/path/to/api",
        )
        client.create_a_perfect_seo_optimized_title_paragraph.async_seo_summary(
            search_query="search_query",
            keywords="keywords",
            title="title",
            company_url="company_url",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/SEOSummary/async/",
            method="POST",
            json={
                "serp_search_location": serp_search_location,
                "scaleserp_locations": scaleserp_locations,
                "serp_search_type": serp_search_type,
                "scaleserp_search_field": scaleserp_search_field,
                "search_query": search_query,
                "keywords": keywords,
                "title": title,
                "company_url": company_url,
                "task_instructions": task_instructions,
                "enable_html": enable_html,
                "selected_model": selected_model,
                "sampling_temperature": sampling_temperature,
                "max_tokens": max_tokens,
                "num_outputs": num_outputs,
                "quality": quality,
                "avoid_repetition": avoid_repetition,
                "max_search_urls": max_search_urls,
                "enable_crosslinks": enable_crosslinks,
                "seed": seed,
                "settings": settings,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(AsyncApiResponseModelV3, _response.json())  # type: ignore
            if _response.status_code == 402:
                raise PaymentRequiredError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    pydantic_v1.parse_obj_as(GenericErrorResponse, _response.json())  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def status_seo_summary(
        self, *, run_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> SeoSummaryPageStatusResponse:
        """
        Parameters
        ----------
        run_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SeoSummaryPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey.client import Gooey

        client = Gooey(
            authorization="YOUR_AUTHORIZATION",
            base_url="https://yourhost.com/path/to/api",
        )
        client.create_a_perfect_seo_optimized_title_paragraph.status_seo_summary(
            run_id="run_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/SEOSummary/status/", method="GET", params={"run_id": run_id}, request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(SeoSummaryPageStatusResponse, _response.json())  # type: ignore
            if _response.status_code == 402:
                raise PaymentRequiredError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    pydantic_v1.parse_obj_as(GenericErrorResponse, _response.json())  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncCreateAPerfectSeoOptimizedTitleParagraphClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def seo_summary(
        self,
        *,
        search_query: str,
        keywords: str,
        title: str,
        company_url: str,
        serp_search_location: typing.Optional[SerpSearchLocation] = OMIT,
        scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,
        serp_search_type: typing.Optional[SerpSearchType] = OMIT,
        scaleserp_search_field: typing.Optional[str] = OMIT,
        task_instructions: typing.Optional[str] = OMIT,
        enable_html: typing.Optional[bool] = OMIT,
        selected_model: typing.Optional[SeoSummaryPageRequestSelectedModel] = OMIT,
        sampling_temperature: typing.Optional[float] = OMIT,
        max_tokens: typing.Optional[int] = OMIT,
        num_outputs: typing.Optional[int] = OMIT,
        quality: typing.Optional[float] = OMIT,
        avoid_repetition: typing.Optional[bool] = OMIT,
        max_search_urls: typing.Optional[int] = OMIT,
        enable_crosslinks: typing.Optional[bool] = OMIT,
        seed: typing.Optional[int] = OMIT,
        settings: typing.Optional[RunSettings] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> SeoSummaryPageResponse:
        """
        Parameters
        ----------
        search_query : str

        keywords : str

        title : str

        company_url : str

        serp_search_location : typing.Optional[SerpSearchLocation]

        scaleserp_locations : typing.Optional[typing.Sequence[str]]
            DEPRECATED: use `serp_search_location` instead

        serp_search_type : typing.Optional[SerpSearchType]

        scaleserp_search_field : typing.Optional[str]
            DEPRECATED: use `serp_search_type` instead

        task_instructions : typing.Optional[str]

        enable_html : typing.Optional[bool]

        selected_model : typing.Optional[SeoSummaryPageRequestSelectedModel]

        sampling_temperature : typing.Optional[float]

        max_tokens : typing.Optional[int]

        num_outputs : typing.Optional[int]

        quality : typing.Optional[float]

        avoid_repetition : typing.Optional[bool]

        max_search_urls : typing.Optional[int]

        enable_crosslinks : typing.Optional[bool]

        seed : typing.Optional[int]

        settings : typing.Optional[RunSettings]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SeoSummaryPageResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey.client import AsyncGooey

        client = AsyncGooey(
            authorization="YOUR_AUTHORIZATION",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.create_a_perfect_seo_optimized_title_paragraph.seo_summary(
                search_query="search_query",
                keywords="keywords",
                title="title",
                company_url="company_url",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/SEOSummary/",
            method="POST",
            json={
                "serp_search_location": serp_search_location,
                "scaleserp_locations": scaleserp_locations,
                "serp_search_type": serp_search_type,
                "scaleserp_search_field": scaleserp_search_field,
                "search_query": search_query,
                "keywords": keywords,
                "title": title,
                "company_url": company_url,
                "task_instructions": task_instructions,
                "enable_html": enable_html,
                "selected_model": selected_model,
                "sampling_temperature": sampling_temperature,
                "max_tokens": max_tokens,
                "num_outputs": num_outputs,
                "quality": quality,
                "avoid_repetition": avoid_repetition,
                "max_search_urls": max_search_urls,
                "enable_crosslinks": enable_crosslinks,
                "seed": seed,
                "settings": settings,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(SeoSummaryPageResponse, _response.json())  # type: ignore
            if _response.status_code == 402:
                raise PaymentRequiredError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    pydantic_v1.parse_obj_as(GenericErrorResponse, _response.json())  # type: ignore
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    pydantic_v1.parse_obj_as(FailedReponseModelV2, _response.json())  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def async_seo_summary(
        self,
        *,
        search_query: str,
        keywords: str,
        title: str,
        company_url: str,
        serp_search_location: typing.Optional[SerpSearchLocation] = OMIT,
        scaleserp_locations: typing.Optional[typing.Sequence[str]] = OMIT,
        serp_search_type: typing.Optional[SerpSearchType] = OMIT,
        scaleserp_search_field: typing.Optional[str] = OMIT,
        task_instructions: typing.Optional[str] = OMIT,
        enable_html: typing.Optional[bool] = OMIT,
        selected_model: typing.Optional[SeoSummaryPageRequestSelectedModel] = OMIT,
        sampling_temperature: typing.Optional[float] = OMIT,
        max_tokens: typing.Optional[int] = OMIT,
        num_outputs: typing.Optional[int] = OMIT,
        quality: typing.Optional[float] = OMIT,
        avoid_repetition: typing.Optional[bool] = OMIT,
        max_search_urls: typing.Optional[int] = OMIT,
        enable_crosslinks: typing.Optional[bool] = OMIT,
        seed: typing.Optional[int] = OMIT,
        settings: typing.Optional[RunSettings] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncApiResponseModelV3:
        """
        Parameters
        ----------
        search_query : str

        keywords : str

        title : str

        company_url : str

        serp_search_location : typing.Optional[SerpSearchLocation]

        scaleserp_locations : typing.Optional[typing.Sequence[str]]
            DEPRECATED: use `serp_search_location` instead

        serp_search_type : typing.Optional[SerpSearchType]

        scaleserp_search_field : typing.Optional[str]
            DEPRECATED: use `serp_search_type` instead

        task_instructions : typing.Optional[str]

        enable_html : typing.Optional[bool]

        selected_model : typing.Optional[SeoSummaryPageRequestSelectedModel]

        sampling_temperature : typing.Optional[float]

        max_tokens : typing.Optional[int]

        num_outputs : typing.Optional[int]

        quality : typing.Optional[float]

        avoid_repetition : typing.Optional[bool]

        max_search_urls : typing.Optional[int]

        enable_crosslinks : typing.Optional[bool]

        seed : typing.Optional[int]

        settings : typing.Optional[RunSettings]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncApiResponseModelV3
            Successful Response

        Examples
        --------
        import asyncio

        from gooey.client import AsyncGooey

        client = AsyncGooey(
            authorization="YOUR_AUTHORIZATION",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.create_a_perfect_seo_optimized_title_paragraph.async_seo_summary(
                search_query="search_query",
                keywords="keywords",
                title="title",
                company_url="company_url",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/SEOSummary/async/",
            method="POST",
            json={
                "serp_search_location": serp_search_location,
                "scaleserp_locations": scaleserp_locations,
                "serp_search_type": serp_search_type,
                "scaleserp_search_field": scaleserp_search_field,
                "search_query": search_query,
                "keywords": keywords,
                "title": title,
                "company_url": company_url,
                "task_instructions": task_instructions,
                "enable_html": enable_html,
                "selected_model": selected_model,
                "sampling_temperature": sampling_temperature,
                "max_tokens": max_tokens,
                "num_outputs": num_outputs,
                "quality": quality,
                "avoid_repetition": avoid_repetition,
                "max_search_urls": max_search_urls,
                "enable_crosslinks": enable_crosslinks,
                "seed": seed,
                "settings": settings,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(AsyncApiResponseModelV3, _response.json())  # type: ignore
            if _response.status_code == 402:
                raise PaymentRequiredError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    pydantic_v1.parse_obj_as(GenericErrorResponse, _response.json())  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def status_seo_summary(
        self, *, run_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> SeoSummaryPageStatusResponse:
        """
        Parameters
        ----------
        run_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SeoSummaryPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey.client import AsyncGooey

        client = AsyncGooey(
            authorization="YOUR_AUTHORIZATION",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.create_a_perfect_seo_optimized_title_paragraph.status_seo_summary(
                run_id="run_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/SEOSummary/status/", method="GET", params={"run_id": run_id}, request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(SeoSummaryPageStatusResponse, _response.json())  # type: ignore
            if _response.status_code == 402:
                raise PaymentRequiredError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    pydantic_v1.parse_obj_as(GenericErrorResponse, _response.json())  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
