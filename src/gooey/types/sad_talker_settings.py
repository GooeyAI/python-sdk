# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .preprocess import Preprocess


class SadTalkerSettings(pydantic_v1.BaseModel):
    still: typing.Optional[bool] = None
    preprocess: typing.Optional[Preprocess] = pydantic_v1.Field(default=None)
    """
    SadTalker only generates 512x512 output. 'crop' handles this by cropping the input to 512x512. 'resize' scales down the input to fit 512x512 and scales it back up after lipsyncing (does not work well for full person images, better for portraits). 'full' processes the cropped region and pastes it back into the original input. 'extcrop' and 'extfull' are similar to 'crop' and 'full' but with extended cropping.
    """

    pose_style: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Random seed 0-45 inclusive that affects how the pose is animated.
    """

    expression_scale: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    Scale the amount of expression motion. 1.0 is normal, 0.5 is very reduced, and 2.0 is quite a lot.
    """

    ref_eyeblink: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Optional reference video for eyeblinks to make the eyebrow movement more natural.
    """

    ref_pose: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Optional reference video to pose the head.
    """

    input_yaw: typing.Optional[typing.List[int]] = None
    input_pitch: typing.Optional[typing.List[int]] = None
    input_roll: typing.Optional[typing.List[int]] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
