# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .asr_page_request_output_format import AsrPageRequestOutputFormat
from .asr_page_request_selected_model import AsrPageRequestSelectedModel
from .asr_page_request_translation_model import AsrPageRequestTranslationModel
from .recipe_function import RecipeFunction
from .run_settings import RunSettings


class AsrPageRequest(pydantic_v1.BaseModel):
    functions: typing.Optional[typing.List[RecipeFunction]] = None
    variables: typing.Optional[typing.Dict[str, typing.Any]] = pydantic_v1.Field(default=None)
    """
    Variables to be used as Jinja prompt templates and in functions as arguments
    """

    documents: typing.List[str]
    selected_model: typing.Optional[AsrPageRequestSelectedModel] = None
    language: typing.Optional[str] = None
    translation_model: typing.Optional[AsrPageRequestTranslationModel] = None
    output_format: typing.Optional[AsrPageRequestOutputFormat] = None
    google_translate_target: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    use `translation_model` & `translation_target` instead.
    """

    translation_source: typing.Optional[str] = None
    translation_target: typing.Optional[str] = None
    glossary_document: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Provide a glossary to customize translation and improve accuracy of domain-specific terms.
    If not specified or invalid, no glossary will be used. Read about the expected format [here](https://docs.google.com/document/d/1TwzAvFmFYekloRKql2PXNPIyqCbsHRL8ZtnWkzAYrh8/edit?usp=sharing).
    """

    settings: typing.Optional[RunSettings] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
