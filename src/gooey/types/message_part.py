# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .recipe_run_state import RecipeRunState
from .reply_button import ReplyButton


class MessagePart(pydantic_v1.BaseModel):
    status: RecipeRunState = pydantic_v1.Field()
    """
    Status of the run
    """

    detail: str = pydantic_v1.Field()
    """
    Details about the status of the run as a human readable string
    """

    text: typing.Optional[str] = None
    audio: typing.Optional[str] = None
    video: typing.Optional[str] = None
    buttons: typing.Optional[typing.List[ReplyButton]] = None
    documents: typing.Optional[typing.List[str]] = None
    type: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The partial outputs from the bot will be streamed in parts. Use this to update the user interface iteratively.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
