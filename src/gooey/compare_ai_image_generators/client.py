# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..errors.internal_server_error import InternalServerError
from ..errors.payment_required_error import PaymentRequiredError
from ..errors.too_many_requests_error import TooManyRequestsError
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.async_api_response_model_v3 import AsyncApiResponseModelV3
from ..types.compare_text2img_page_request_selected_models_item import CompareText2ImgPageRequestSelectedModelsItem
from ..types.compare_text2img_page_response import CompareText2ImgPageResponse
from ..types.compare_text2img_page_status_response import CompareText2ImgPageStatusResponse
from ..types.failed_reponse_model_v2 import FailedReponseModelV2
from ..types.generic_error_response import GenericErrorResponse
from ..types.http_validation_error import HttpValidationError
from ..types.recipe_function import RecipeFunction
from ..types.run_settings import RunSettings
from ..types.scheduler import Scheduler

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CompareAiImageGeneratorsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def compare_text2img(
        self,
        *,
        text_prompt: str,
        functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,
        variables: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        negative_prompt: typing.Optional[str] = OMIT,
        output_width: typing.Optional[int] = OMIT,
        output_height: typing.Optional[int] = OMIT,
        num_outputs: typing.Optional[int] = OMIT,
        quality: typing.Optional[int] = OMIT,
        dall_e3quality: typing.Optional[str] = OMIT,
        dall_e3style: typing.Optional[str] = OMIT,
        guidance_scale: typing.Optional[float] = OMIT,
        seed: typing.Optional[int] = OMIT,
        sd2upscaling: typing.Optional[bool] = OMIT,
        selected_models: typing.Optional[typing.Sequence[CompareText2ImgPageRequestSelectedModelsItem]] = OMIT,
        scheduler: typing.Optional[Scheduler] = OMIT,
        edit_instruction: typing.Optional[str] = OMIT,
        image_guidance_scale: typing.Optional[float] = OMIT,
        settings: typing.Optional[RunSettings] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> CompareText2ImgPageResponse:
        """
        Parameters
        ----------
        text_prompt : str

        functions : typing.Optional[typing.Sequence[RecipeFunction]]

        variables : typing.Optional[typing.Dict[str, typing.Any]]
            Variables to be used as Jinja prompt templates and in functions as arguments

        negative_prompt : typing.Optional[str]

        output_width : typing.Optional[int]

        output_height : typing.Optional[int]

        num_outputs : typing.Optional[int]

        quality : typing.Optional[int]

        dall_e3quality : typing.Optional[str]

        dall_e3style : typing.Optional[str]

        guidance_scale : typing.Optional[float]

        seed : typing.Optional[int]

        sd2upscaling : typing.Optional[bool]

        selected_models : typing.Optional[typing.Sequence[CompareText2ImgPageRequestSelectedModelsItem]]

        scheduler : typing.Optional[Scheduler]

        edit_instruction : typing.Optional[str]

        image_guidance_scale : typing.Optional[float]

        settings : typing.Optional[RunSettings]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompareText2ImgPageResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            authorization="YOUR_AUTHORIZATION",
            api_key="YOUR_API_KEY",
        )
        client.compare_ai_image_generators.compare_text2img(
            text_prompt="text_prompt",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/CompareText2Img/",
            method="POST",
            json={
                "functions": functions,
                "variables": variables,
                "text_prompt": text_prompt,
                "negative_prompt": negative_prompt,
                "output_width": output_width,
                "output_height": output_height,
                "num_outputs": num_outputs,
                "quality": quality,
                "dall_e_3_quality": dall_e3quality,
                "dall_e_3_style": dall_e3style,
                "guidance_scale": guidance_scale,
                "seed": seed,
                "sd_2_upscaling": sd2upscaling,
                "selected_models": selected_models,
                "scheduler": scheduler,
                "edit_instruction": edit_instruction,
                "image_guidance_scale": image_guidance_scale,
                "settings": settings,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CompareText2ImgPageResponse, parse_obj_as(type_=CompareText2ImgPageResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 402:
                raise PaymentRequiredError(
                    typing.cast(typing.Any, parse_obj_as(type_=typing.Any, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, parse_obj_as(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(GenericErrorResponse, parse_obj_as(type_=GenericErrorResponse, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(FailedReponseModelV2, parse_obj_as(type_=FailedReponseModelV2, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def async_compare_text2img(
        self,
        *,
        text_prompt: str,
        functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,
        variables: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        negative_prompt: typing.Optional[str] = OMIT,
        output_width: typing.Optional[int] = OMIT,
        output_height: typing.Optional[int] = OMIT,
        num_outputs: typing.Optional[int] = OMIT,
        quality: typing.Optional[int] = OMIT,
        dall_e3quality: typing.Optional[str] = OMIT,
        dall_e3style: typing.Optional[str] = OMIT,
        guidance_scale: typing.Optional[float] = OMIT,
        seed: typing.Optional[int] = OMIT,
        sd2upscaling: typing.Optional[bool] = OMIT,
        selected_models: typing.Optional[typing.Sequence[CompareText2ImgPageRequestSelectedModelsItem]] = OMIT,
        scheduler: typing.Optional[Scheduler] = OMIT,
        edit_instruction: typing.Optional[str] = OMIT,
        image_guidance_scale: typing.Optional[float] = OMIT,
        settings: typing.Optional[RunSettings] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncApiResponseModelV3:
        """
        Parameters
        ----------
        text_prompt : str

        functions : typing.Optional[typing.Sequence[RecipeFunction]]

        variables : typing.Optional[typing.Dict[str, typing.Any]]
            Variables to be used as Jinja prompt templates and in functions as arguments

        negative_prompt : typing.Optional[str]

        output_width : typing.Optional[int]

        output_height : typing.Optional[int]

        num_outputs : typing.Optional[int]

        quality : typing.Optional[int]

        dall_e3quality : typing.Optional[str]

        dall_e3style : typing.Optional[str]

        guidance_scale : typing.Optional[float]

        seed : typing.Optional[int]

        sd2upscaling : typing.Optional[bool]

        selected_models : typing.Optional[typing.Sequence[CompareText2ImgPageRequestSelectedModelsItem]]

        scheduler : typing.Optional[Scheduler]

        edit_instruction : typing.Optional[str]

        image_guidance_scale : typing.Optional[float]

        settings : typing.Optional[RunSettings]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncApiResponseModelV3
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            authorization="YOUR_AUTHORIZATION",
            api_key="YOUR_API_KEY",
        )
        client.compare_ai_image_generators.async_compare_text2img(
            text_prompt="text_prompt",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/CompareText2Img/async/",
            method="POST",
            json={
                "functions": functions,
                "variables": variables,
                "text_prompt": text_prompt,
                "negative_prompt": negative_prompt,
                "output_width": output_width,
                "output_height": output_height,
                "num_outputs": num_outputs,
                "quality": quality,
                "dall_e_3_quality": dall_e3quality,
                "dall_e_3_style": dall_e3style,
                "guidance_scale": guidance_scale,
                "seed": seed,
                "sd_2_upscaling": sd2upscaling,
                "selected_models": selected_models,
                "scheduler": scheduler,
                "edit_instruction": edit_instruction,
                "image_guidance_scale": image_guidance_scale,
                "settings": settings,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(AsyncApiResponseModelV3, parse_obj_as(type_=AsyncApiResponseModelV3, object_=_response.json()))  # type: ignore
            if _response.status_code == 402:
                raise PaymentRequiredError(
                    typing.cast(typing.Any, parse_obj_as(type_=typing.Any, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, parse_obj_as(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(GenericErrorResponse, parse_obj_as(type_=GenericErrorResponse, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def status_compare_text2img(
        self, *, run_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> CompareText2ImgPageStatusResponse:
        """
        Parameters
        ----------
        run_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompareText2ImgPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            authorization="YOUR_AUTHORIZATION",
            api_key="YOUR_API_KEY",
        )
        client.compare_ai_image_generators.status_compare_text2img(
            run_id="run_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/CompareText2Img/status/", method="GET", params={"run_id": run_id}, request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CompareText2ImgPageStatusResponse, parse_obj_as(type_=CompareText2ImgPageStatusResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 402:
                raise PaymentRequiredError(
                    typing.cast(typing.Any, parse_obj_as(type_=typing.Any, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, parse_obj_as(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(GenericErrorResponse, parse_obj_as(type_=GenericErrorResponse, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncCompareAiImageGeneratorsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def compare_text2img(
        self,
        *,
        text_prompt: str,
        functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,
        variables: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        negative_prompt: typing.Optional[str] = OMIT,
        output_width: typing.Optional[int] = OMIT,
        output_height: typing.Optional[int] = OMIT,
        num_outputs: typing.Optional[int] = OMIT,
        quality: typing.Optional[int] = OMIT,
        dall_e3quality: typing.Optional[str] = OMIT,
        dall_e3style: typing.Optional[str] = OMIT,
        guidance_scale: typing.Optional[float] = OMIT,
        seed: typing.Optional[int] = OMIT,
        sd2upscaling: typing.Optional[bool] = OMIT,
        selected_models: typing.Optional[typing.Sequence[CompareText2ImgPageRequestSelectedModelsItem]] = OMIT,
        scheduler: typing.Optional[Scheduler] = OMIT,
        edit_instruction: typing.Optional[str] = OMIT,
        image_guidance_scale: typing.Optional[float] = OMIT,
        settings: typing.Optional[RunSettings] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> CompareText2ImgPageResponse:
        """
        Parameters
        ----------
        text_prompt : str

        functions : typing.Optional[typing.Sequence[RecipeFunction]]

        variables : typing.Optional[typing.Dict[str, typing.Any]]
            Variables to be used as Jinja prompt templates and in functions as arguments

        negative_prompt : typing.Optional[str]

        output_width : typing.Optional[int]

        output_height : typing.Optional[int]

        num_outputs : typing.Optional[int]

        quality : typing.Optional[int]

        dall_e3quality : typing.Optional[str]

        dall_e3style : typing.Optional[str]

        guidance_scale : typing.Optional[float]

        seed : typing.Optional[int]

        sd2upscaling : typing.Optional[bool]

        selected_models : typing.Optional[typing.Sequence[CompareText2ImgPageRequestSelectedModelsItem]]

        scheduler : typing.Optional[Scheduler]

        edit_instruction : typing.Optional[str]

        image_guidance_scale : typing.Optional[float]

        settings : typing.Optional[RunSettings]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompareText2ImgPageResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            authorization="YOUR_AUTHORIZATION",
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.compare_ai_image_generators.compare_text2img(
                text_prompt="text_prompt",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/CompareText2Img/",
            method="POST",
            json={
                "functions": functions,
                "variables": variables,
                "text_prompt": text_prompt,
                "negative_prompt": negative_prompt,
                "output_width": output_width,
                "output_height": output_height,
                "num_outputs": num_outputs,
                "quality": quality,
                "dall_e_3_quality": dall_e3quality,
                "dall_e_3_style": dall_e3style,
                "guidance_scale": guidance_scale,
                "seed": seed,
                "sd_2_upscaling": sd2upscaling,
                "selected_models": selected_models,
                "scheduler": scheduler,
                "edit_instruction": edit_instruction,
                "image_guidance_scale": image_guidance_scale,
                "settings": settings,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CompareText2ImgPageResponse, parse_obj_as(type_=CompareText2ImgPageResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 402:
                raise PaymentRequiredError(
                    typing.cast(typing.Any, parse_obj_as(type_=typing.Any, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, parse_obj_as(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(GenericErrorResponse, parse_obj_as(type_=GenericErrorResponse, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(FailedReponseModelV2, parse_obj_as(type_=FailedReponseModelV2, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def async_compare_text2img(
        self,
        *,
        text_prompt: str,
        functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,
        variables: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        negative_prompt: typing.Optional[str] = OMIT,
        output_width: typing.Optional[int] = OMIT,
        output_height: typing.Optional[int] = OMIT,
        num_outputs: typing.Optional[int] = OMIT,
        quality: typing.Optional[int] = OMIT,
        dall_e3quality: typing.Optional[str] = OMIT,
        dall_e3style: typing.Optional[str] = OMIT,
        guidance_scale: typing.Optional[float] = OMIT,
        seed: typing.Optional[int] = OMIT,
        sd2upscaling: typing.Optional[bool] = OMIT,
        selected_models: typing.Optional[typing.Sequence[CompareText2ImgPageRequestSelectedModelsItem]] = OMIT,
        scheduler: typing.Optional[Scheduler] = OMIT,
        edit_instruction: typing.Optional[str] = OMIT,
        image_guidance_scale: typing.Optional[float] = OMIT,
        settings: typing.Optional[RunSettings] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncApiResponseModelV3:
        """
        Parameters
        ----------
        text_prompt : str

        functions : typing.Optional[typing.Sequence[RecipeFunction]]

        variables : typing.Optional[typing.Dict[str, typing.Any]]
            Variables to be used as Jinja prompt templates and in functions as arguments

        negative_prompt : typing.Optional[str]

        output_width : typing.Optional[int]

        output_height : typing.Optional[int]

        num_outputs : typing.Optional[int]

        quality : typing.Optional[int]

        dall_e3quality : typing.Optional[str]

        dall_e3style : typing.Optional[str]

        guidance_scale : typing.Optional[float]

        seed : typing.Optional[int]

        sd2upscaling : typing.Optional[bool]

        selected_models : typing.Optional[typing.Sequence[CompareText2ImgPageRequestSelectedModelsItem]]

        scheduler : typing.Optional[Scheduler]

        edit_instruction : typing.Optional[str]

        image_guidance_scale : typing.Optional[float]

        settings : typing.Optional[RunSettings]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncApiResponseModelV3
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            authorization="YOUR_AUTHORIZATION",
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.compare_ai_image_generators.async_compare_text2img(
                text_prompt="text_prompt",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/CompareText2Img/async/",
            method="POST",
            json={
                "functions": functions,
                "variables": variables,
                "text_prompt": text_prompt,
                "negative_prompt": negative_prompt,
                "output_width": output_width,
                "output_height": output_height,
                "num_outputs": num_outputs,
                "quality": quality,
                "dall_e_3_quality": dall_e3quality,
                "dall_e_3_style": dall_e3style,
                "guidance_scale": guidance_scale,
                "seed": seed,
                "sd_2_upscaling": sd2upscaling,
                "selected_models": selected_models,
                "scheduler": scheduler,
                "edit_instruction": edit_instruction,
                "image_guidance_scale": image_guidance_scale,
                "settings": settings,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(AsyncApiResponseModelV3, parse_obj_as(type_=AsyncApiResponseModelV3, object_=_response.json()))  # type: ignore
            if _response.status_code == 402:
                raise PaymentRequiredError(
                    typing.cast(typing.Any, parse_obj_as(type_=typing.Any, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, parse_obj_as(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(GenericErrorResponse, parse_obj_as(type_=GenericErrorResponse, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def status_compare_text2img(
        self, *, run_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> CompareText2ImgPageStatusResponse:
        """
        Parameters
        ----------
        run_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompareText2ImgPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            authorization="YOUR_AUTHORIZATION",
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.compare_ai_image_generators.status_compare_text2img(
                run_id="run_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/CompareText2Img/status/", method="GET", params={"run_id": run_id}, request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(CompareText2ImgPageStatusResponse, parse_obj_as(type_=CompareText2ImgPageStatusResponse, object_=_response.json()))  # type: ignore
            if _response.status_code == 402:
                raise PaymentRequiredError(
                    typing.cast(typing.Any, parse_obj_as(type_=typing.Any, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(HttpValidationError, parse_obj_as(type_=HttpValidationError, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(GenericErrorResponse, parse_obj_as(type_=GenericErrorResponse, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
