# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .types.async_lipsync_request_functions_item import AsyncLipsyncRequestFunctionsItem
from .. import core
from .types.async_lipsync_request_sadtalker_settings import AsyncLipsyncRequestSadtalkerSettings
from .types.async_lipsync_request_selected_model import AsyncLipsyncRequestSelectedModel
from ..types.run_settings import RunSettings
from ..core.request_options import RequestOptions
from ..types.lipsync_page_output import LipsyncPageOutput
from ..core.pydantic_utilities import parse_obj_as
from ..errors.payment_required_error import PaymentRequiredError
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from ..errors.too_many_requests_error import TooManyRequestsError
from ..types.generic_error_response import GenericErrorResponse
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class LipSyncingClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def async_lipsync(
        self,
        *,
        example_id: typing.Optional[str] = None,
        functions: typing.Optional[typing.List[AsyncLipsyncRequestFunctionsItem]] = None,
        variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None,
        input_face: typing.Optional[core.File] = None,
        face_padding_top: typing.Optional[int] = None,
        face_padding_bottom: typing.Optional[int] = None,
        face_padding_left: typing.Optional[int] = None,
        face_padding_right: typing.Optional[int] = None,
        sadtalker_settings: typing.Optional[AsyncLipsyncRequestSadtalkerSettings] = None,
        selected_model: typing.Optional[AsyncLipsyncRequestSelectedModel] = None,
        input_audio: typing.Optional[core.File] = None,
        settings: typing.Optional[RunSettings] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> LipsyncPageOutput:
        """
        Parameters
        ----------
        example_id : typing.Optional[str]

        functions : typing.Optional[typing.List[AsyncLipsyncRequestFunctionsItem]]

        variables : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Variables to be used as Jinja prompt templates and in functions as arguments

        input_face : typing.Optional[core.File]
            See core.File for more documentation

        face_padding_top : typing.Optional[int]

        face_padding_bottom : typing.Optional[int]

        face_padding_left : typing.Optional[int]

        face_padding_right : typing.Optional[int]

        sadtalker_settings : typing.Optional[AsyncLipsyncRequestSadtalkerSettings]

        selected_model : typing.Optional[AsyncLipsyncRequestSelectedModel]

        input_audio : typing.Optional[core.File]
            See core.File for more documentation

        settings : typing.Optional[RunSettings]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LipsyncPageOutput
            Successful Response

        Examples
        --------
        from gooey import Gooey

        client = Gooey(
            api_key="YOUR_API_KEY",
        )
        client.lip_syncing.async_lipsync()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/Lipsync/async",
            method="POST",
            params={
                "example_id": example_id,
            },
            data={
                "functions": functions,
                "variables": variables,
                "face_padding_top": face_padding_top,
                "face_padding_bottom": face_padding_bottom,
                "face_padding_left": face_padding_left,
                "face_padding_right": face_padding_right,
                "sadtalker_settings": sadtalker_settings,
                "selected_model": selected_model,
                "settings": settings,
            },
            files={
                "input_face": input_face,
                "input_audio": input_audio,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    LipsyncPageOutput,
                    parse_obj_as(
                        type_=LipsyncPageOutput,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 402:
                raise PaymentRequiredError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        GenericErrorResponse,
                        parse_obj_as(
                            type_=GenericErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncLipSyncingClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def async_lipsync(
        self,
        *,
        example_id: typing.Optional[str] = None,
        functions: typing.Optional[typing.List[AsyncLipsyncRequestFunctionsItem]] = None,
        variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None,
        input_face: typing.Optional[core.File] = None,
        face_padding_top: typing.Optional[int] = None,
        face_padding_bottom: typing.Optional[int] = None,
        face_padding_left: typing.Optional[int] = None,
        face_padding_right: typing.Optional[int] = None,
        sadtalker_settings: typing.Optional[AsyncLipsyncRequestSadtalkerSettings] = None,
        selected_model: typing.Optional[AsyncLipsyncRequestSelectedModel] = None,
        input_audio: typing.Optional[core.File] = None,
        settings: typing.Optional[RunSettings] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> LipsyncPageOutput:
        """
        Parameters
        ----------
        example_id : typing.Optional[str]

        functions : typing.Optional[typing.List[AsyncLipsyncRequestFunctionsItem]]

        variables : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Variables to be used as Jinja prompt templates and in functions as arguments

        input_face : typing.Optional[core.File]
            See core.File for more documentation

        face_padding_top : typing.Optional[int]

        face_padding_bottom : typing.Optional[int]

        face_padding_left : typing.Optional[int]

        face_padding_right : typing.Optional[int]

        sadtalker_settings : typing.Optional[AsyncLipsyncRequestSadtalkerSettings]

        selected_model : typing.Optional[AsyncLipsyncRequestSelectedModel]

        input_audio : typing.Optional[core.File]
            See core.File for more documentation

        settings : typing.Optional[RunSettings]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LipsyncPageOutput
            Successful Response

        Examples
        --------
        import asyncio

        from gooey import AsyncGooey

        client = AsyncGooey(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.lip_syncing.async_lipsync()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/Lipsync/async",
            method="POST",
            params={
                "example_id": example_id,
            },
            data={
                "functions": functions,
                "variables": variables,
                "face_padding_top": face_padding_top,
                "face_padding_bottom": face_padding_bottom,
                "face_padding_left": face_padding_left,
                "face_padding_right": face_padding_right,
                "sadtalker_settings": sadtalker_settings,
                "selected_model": selected_model,
                "settings": settings,
            },
            files={
                "input_face": input_face,
                "input_audio": input_audio,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    LipsyncPageOutput,
                    parse_obj_as(
                        type_=LipsyncPageOutput,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 402:
                raise PaymentRequiredError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        GenericErrorResponse,
                        parse_obj_as(
                            type_=GenericErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
