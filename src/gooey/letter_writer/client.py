# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.pydantic_utilities import pydantic_v1
from ..core.request_options import RequestOptions
from ..errors.internal_server_error import InternalServerError
from ..errors.payment_required_error import PaymentRequiredError
from ..errors.too_many_requests_error import TooManyRequestsError
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.async_api_response_model_v3 import AsyncApiResponseModelV3
from ..types.failed_reponse_model_v2 import FailedReponseModelV2
from ..types.generic_error_response import GenericErrorResponse
from ..types.http_validation_error import HttpValidationError
from ..types.letter_writer_page_response import LetterWriterPageResponse
from ..types.letter_writer_page_status_response import LetterWriterPageStatusResponse
from ..types.recipe_function import RecipeFunction
from ..types.run_settings import RunSettings
from ..types.training_data_model import TrainingDataModel

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class LetterWriterClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def letter_writer(
        self,
        *,
        action_id: str,
        functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,
        variables: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        prompt_header: typing.Optional[str] = OMIT,
        example_letters: typing.Optional[typing.Sequence[TrainingDataModel]] = OMIT,
        lm_selected_api: typing.Optional[str] = OMIT,
        lm_selected_engine: typing.Optional[str] = OMIT,
        num_outputs: typing.Optional[int] = OMIT,
        quality: typing.Optional[float] = OMIT,
        lm_sampling_temperature: typing.Optional[float] = OMIT,
        api_http_method: typing.Optional[str] = OMIT,
        api_url: typing.Optional[str] = OMIT,
        api_headers: typing.Optional[str] = OMIT,
        api_json_body: typing.Optional[str] = OMIT,
        input_prompt: typing.Optional[str] = OMIT,
        strip_html2text: typing.Optional[bool] = OMIT,
        settings: typing.Optional[RunSettings] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> LetterWriterPageResponse:
        """
        Parameters
        ----------
        action_id : str

        functions : typing.Optional[typing.Sequence[RecipeFunction]]

        variables : typing.Optional[typing.Dict[str, typing.Any]]
            Variables to be used as Jinja prompt templates and in functions as arguments

        prompt_header : typing.Optional[str]

        example_letters : typing.Optional[typing.Sequence[TrainingDataModel]]

        lm_selected_api : typing.Optional[str]

        lm_selected_engine : typing.Optional[str]

        num_outputs : typing.Optional[int]

        quality : typing.Optional[float]

        lm_sampling_temperature : typing.Optional[float]

        api_http_method : typing.Optional[str]

        api_url : typing.Optional[str]

        api_headers : typing.Optional[str]

        api_json_body : typing.Optional[str]

        input_prompt : typing.Optional[str]

        strip_html2text : typing.Optional[bool]

        settings : typing.Optional[RunSettings]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LetterWriterPageResponse
            Successful Response

        Examples
        --------
        from gooey.client import Gooey

        client = Gooey(
            authorization="YOUR_AUTHORIZATION",
            base_url="https://yourhost.com/path/to/api",
        )
        client.letter_writer.letter_writer(
            action_id="action_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/LetterWriter/",
            method="POST",
            json={
                "functions": functions,
                "variables": variables,
                "action_id": action_id,
                "prompt_header": prompt_header,
                "example_letters": example_letters,
                "lm_selected_api": lm_selected_api,
                "lm_selected_engine": lm_selected_engine,
                "num_outputs": num_outputs,
                "quality": quality,
                "lm_sampling_temperature": lm_sampling_temperature,
                "api_http_method": api_http_method,
                "api_url": api_url,
                "api_headers": api_headers,
                "api_json_body": api_json_body,
                "input_prompt": input_prompt,
                "strip_html_2_text": strip_html2text,
                "settings": settings,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(LetterWriterPageResponse, _response.json())  # type: ignore
            if _response.status_code == 402:
                raise PaymentRequiredError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    pydantic_v1.parse_obj_as(GenericErrorResponse, _response.json())  # type: ignore
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    pydantic_v1.parse_obj_as(FailedReponseModelV2, _response.json())  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def async_letter_writer(
        self,
        *,
        action_id: str,
        functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,
        variables: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        prompt_header: typing.Optional[str] = OMIT,
        example_letters: typing.Optional[typing.Sequence[TrainingDataModel]] = OMIT,
        lm_selected_api: typing.Optional[str] = OMIT,
        lm_selected_engine: typing.Optional[str] = OMIT,
        num_outputs: typing.Optional[int] = OMIT,
        quality: typing.Optional[float] = OMIT,
        lm_sampling_temperature: typing.Optional[float] = OMIT,
        api_http_method: typing.Optional[str] = OMIT,
        api_url: typing.Optional[str] = OMIT,
        api_headers: typing.Optional[str] = OMIT,
        api_json_body: typing.Optional[str] = OMIT,
        input_prompt: typing.Optional[str] = OMIT,
        strip_html2text: typing.Optional[bool] = OMIT,
        settings: typing.Optional[RunSettings] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncApiResponseModelV3:
        """
        Parameters
        ----------
        action_id : str

        functions : typing.Optional[typing.Sequence[RecipeFunction]]

        variables : typing.Optional[typing.Dict[str, typing.Any]]
            Variables to be used as Jinja prompt templates and in functions as arguments

        prompt_header : typing.Optional[str]

        example_letters : typing.Optional[typing.Sequence[TrainingDataModel]]

        lm_selected_api : typing.Optional[str]

        lm_selected_engine : typing.Optional[str]

        num_outputs : typing.Optional[int]

        quality : typing.Optional[float]

        lm_sampling_temperature : typing.Optional[float]

        api_http_method : typing.Optional[str]

        api_url : typing.Optional[str]

        api_headers : typing.Optional[str]

        api_json_body : typing.Optional[str]

        input_prompt : typing.Optional[str]

        strip_html2text : typing.Optional[bool]

        settings : typing.Optional[RunSettings]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncApiResponseModelV3
            Successful Response

        Examples
        --------
        from gooey.client import Gooey

        client = Gooey(
            authorization="YOUR_AUTHORIZATION",
            base_url="https://yourhost.com/path/to/api",
        )
        client.letter_writer.async_letter_writer(
            action_id="action_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/LetterWriter/async/",
            method="POST",
            json={
                "functions": functions,
                "variables": variables,
                "action_id": action_id,
                "prompt_header": prompt_header,
                "example_letters": example_letters,
                "lm_selected_api": lm_selected_api,
                "lm_selected_engine": lm_selected_engine,
                "num_outputs": num_outputs,
                "quality": quality,
                "lm_sampling_temperature": lm_sampling_temperature,
                "api_http_method": api_http_method,
                "api_url": api_url,
                "api_headers": api_headers,
                "api_json_body": api_json_body,
                "input_prompt": input_prompt,
                "strip_html_2_text": strip_html2text,
                "settings": settings,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(AsyncApiResponseModelV3, _response.json())  # type: ignore
            if _response.status_code == 402:
                raise PaymentRequiredError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    pydantic_v1.parse_obj_as(GenericErrorResponse, _response.json())  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def status_letter_writer(
        self, *, run_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> LetterWriterPageStatusResponse:
        """
        Parameters
        ----------
        run_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LetterWriterPageStatusResponse
            Successful Response

        Examples
        --------
        from gooey.client import Gooey

        client = Gooey(
            authorization="YOUR_AUTHORIZATION",
            base_url="https://yourhost.com/path/to/api",
        )
        client.letter_writer.status_letter_writer(
            run_id="run_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v3/LetterWriter/status/", method="GET", params={"run_id": run_id}, request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(LetterWriterPageStatusResponse, _response.json())  # type: ignore
            if _response.status_code == 402:
                raise PaymentRequiredError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    pydantic_v1.parse_obj_as(GenericErrorResponse, _response.json())  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncLetterWriterClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def letter_writer(
        self,
        *,
        action_id: str,
        functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,
        variables: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        prompt_header: typing.Optional[str] = OMIT,
        example_letters: typing.Optional[typing.Sequence[TrainingDataModel]] = OMIT,
        lm_selected_api: typing.Optional[str] = OMIT,
        lm_selected_engine: typing.Optional[str] = OMIT,
        num_outputs: typing.Optional[int] = OMIT,
        quality: typing.Optional[float] = OMIT,
        lm_sampling_temperature: typing.Optional[float] = OMIT,
        api_http_method: typing.Optional[str] = OMIT,
        api_url: typing.Optional[str] = OMIT,
        api_headers: typing.Optional[str] = OMIT,
        api_json_body: typing.Optional[str] = OMIT,
        input_prompt: typing.Optional[str] = OMIT,
        strip_html2text: typing.Optional[bool] = OMIT,
        settings: typing.Optional[RunSettings] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> LetterWriterPageResponse:
        """
        Parameters
        ----------
        action_id : str

        functions : typing.Optional[typing.Sequence[RecipeFunction]]

        variables : typing.Optional[typing.Dict[str, typing.Any]]
            Variables to be used as Jinja prompt templates and in functions as arguments

        prompt_header : typing.Optional[str]

        example_letters : typing.Optional[typing.Sequence[TrainingDataModel]]

        lm_selected_api : typing.Optional[str]

        lm_selected_engine : typing.Optional[str]

        num_outputs : typing.Optional[int]

        quality : typing.Optional[float]

        lm_sampling_temperature : typing.Optional[float]

        api_http_method : typing.Optional[str]

        api_url : typing.Optional[str]

        api_headers : typing.Optional[str]

        api_json_body : typing.Optional[str]

        input_prompt : typing.Optional[str]

        strip_html2text : typing.Optional[bool]

        settings : typing.Optional[RunSettings]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LetterWriterPageResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey.client import AsyncGooey

        client = AsyncGooey(
            authorization="YOUR_AUTHORIZATION",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.letter_writer.letter_writer(
                action_id="action_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/LetterWriter/",
            method="POST",
            json={
                "functions": functions,
                "variables": variables,
                "action_id": action_id,
                "prompt_header": prompt_header,
                "example_letters": example_letters,
                "lm_selected_api": lm_selected_api,
                "lm_selected_engine": lm_selected_engine,
                "num_outputs": num_outputs,
                "quality": quality,
                "lm_sampling_temperature": lm_sampling_temperature,
                "api_http_method": api_http_method,
                "api_url": api_url,
                "api_headers": api_headers,
                "api_json_body": api_json_body,
                "input_prompt": input_prompt,
                "strip_html_2_text": strip_html2text,
                "settings": settings,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(LetterWriterPageResponse, _response.json())  # type: ignore
            if _response.status_code == 402:
                raise PaymentRequiredError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    pydantic_v1.parse_obj_as(GenericErrorResponse, _response.json())  # type: ignore
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    pydantic_v1.parse_obj_as(FailedReponseModelV2, _response.json())  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def async_letter_writer(
        self,
        *,
        action_id: str,
        functions: typing.Optional[typing.Sequence[RecipeFunction]] = OMIT,
        variables: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
        prompt_header: typing.Optional[str] = OMIT,
        example_letters: typing.Optional[typing.Sequence[TrainingDataModel]] = OMIT,
        lm_selected_api: typing.Optional[str] = OMIT,
        lm_selected_engine: typing.Optional[str] = OMIT,
        num_outputs: typing.Optional[int] = OMIT,
        quality: typing.Optional[float] = OMIT,
        lm_sampling_temperature: typing.Optional[float] = OMIT,
        api_http_method: typing.Optional[str] = OMIT,
        api_url: typing.Optional[str] = OMIT,
        api_headers: typing.Optional[str] = OMIT,
        api_json_body: typing.Optional[str] = OMIT,
        input_prompt: typing.Optional[str] = OMIT,
        strip_html2text: typing.Optional[bool] = OMIT,
        settings: typing.Optional[RunSettings] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncApiResponseModelV3:
        """
        Parameters
        ----------
        action_id : str

        functions : typing.Optional[typing.Sequence[RecipeFunction]]

        variables : typing.Optional[typing.Dict[str, typing.Any]]
            Variables to be used as Jinja prompt templates and in functions as arguments

        prompt_header : typing.Optional[str]

        example_letters : typing.Optional[typing.Sequence[TrainingDataModel]]

        lm_selected_api : typing.Optional[str]

        lm_selected_engine : typing.Optional[str]

        num_outputs : typing.Optional[int]

        quality : typing.Optional[float]

        lm_sampling_temperature : typing.Optional[float]

        api_http_method : typing.Optional[str]

        api_url : typing.Optional[str]

        api_headers : typing.Optional[str]

        api_json_body : typing.Optional[str]

        input_prompt : typing.Optional[str]

        strip_html2text : typing.Optional[bool]

        settings : typing.Optional[RunSettings]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncApiResponseModelV3
            Successful Response

        Examples
        --------
        import asyncio

        from gooey.client import AsyncGooey

        client = AsyncGooey(
            authorization="YOUR_AUTHORIZATION",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.letter_writer.async_letter_writer(
                action_id="action_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/LetterWriter/async/",
            method="POST",
            json={
                "functions": functions,
                "variables": variables,
                "action_id": action_id,
                "prompt_header": prompt_header,
                "example_letters": example_letters,
                "lm_selected_api": lm_selected_api,
                "lm_selected_engine": lm_selected_engine,
                "num_outputs": num_outputs,
                "quality": quality,
                "lm_sampling_temperature": lm_sampling_temperature,
                "api_http_method": api_http_method,
                "api_url": api_url,
                "api_headers": api_headers,
                "api_json_body": api_json_body,
                "input_prompt": input_prompt,
                "strip_html_2_text": strip_html2text,
                "settings": settings,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(AsyncApiResponseModelV3, _response.json())  # type: ignore
            if _response.status_code == 402:
                raise PaymentRequiredError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    pydantic_v1.parse_obj_as(GenericErrorResponse, _response.json())  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def status_letter_writer(
        self, *, run_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> LetterWriterPageStatusResponse:
        """
        Parameters
        ----------
        run_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LetterWriterPageStatusResponse
            Successful Response

        Examples
        --------
        import asyncio

        from gooey.client import AsyncGooey

        client = AsyncGooey(
            authorization="YOUR_AUTHORIZATION",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.letter_writer.status_letter_writer(
                run_id="run_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v3/LetterWriter/status/", method="GET", params={"run_id": run_id}, request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(LetterWriterPageStatusResponse, _response.json())  # type: ignore
            if _response.status_code == 402:
                raise PaymentRequiredError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    pydantic_v1.parse_obj_as(GenericErrorResponse, _response.json())  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
